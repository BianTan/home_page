!function(){"use strict";var t={7564:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i);var n=Object.getOwnPropertyDescriptor(e,i);n&&!("get"in n?!e.__esModule:n.writable||n.configurable)||(n={enumerable:!0,get:function(){return e[i]}}),Object.defineProperty(t,r,n)}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.CubismDefaultParameterId=void 0,e.CubismDefaultParameterId=Object.freeze({HitAreaPrefix:"HitArea",HitAreaHead:"Head",HitAreaBody:"Body",PartsIdCore:"Parts01Core",PartsArmPrefix:"Parts01Arm_",PartsArmLPrefix:"Parts01ArmL_",PartsArmRPrefix:"Parts01ArmR_",ParamAngleX:"ParamAngleX",ParamAngleY:"ParamAngleY",ParamAngleZ:"ParamAngleZ",ParamEyeLOpen:"ParamEyeLOpen",ParamEyeLSmile:"ParamEyeLSmile",ParamEyeROpen:"ParamEyeROpen",ParamEyeRSmile:"ParamEyeRSmile",ParamEyeBallX:"ParamEyeBallX",ParamEyeBallY:"ParamEyeBallY",ParamEyeBallForm:"ParamEyeBallForm",ParamBrowLY:"ParamBrowLY",ParamBrowRY:"ParamBrowRY",ParamBrowLX:"ParamBrowLX",ParamBrowRX:"ParamBrowRX",ParamBrowLAngle:"ParamBrowLAngle",ParamBrowRAngle:"ParamBrowRAngle",ParamBrowLForm:"ParamBrowLForm",ParamBrowRForm:"ParamBrowRForm",ParamMouthForm:"ParamMouthForm",ParamMouthOpenY:"ParamMouthOpenY",ParamCheek:"ParamCheek",ParamBodyAngleX:"ParamBodyAngleX",ParamBodyAngleY:"ParamBodyAngleY",ParamBodyAngleZ:"ParamBodyAngleZ",ParamBreath:"ParamBreath",ParamArmLA:"ParamArmLA",ParamArmRA:"ParamArmRA",ParamArmLB:"ParamArmLB",ParamArmRB:"ParamArmRB",ParamHandL:"ParamHandL",ParamHandR:"ParamHandR",ParamHairFront:"ParamHairFront",ParamHairSide:"ParamHairSide",ParamHairBack:"ParamHairBack",ParamHairFluffy:"ParamHairFluffy",ParamShoulderY:"ParamShoulderY",ParamBustX:"ParamBustX",ParamBustY:"ParamBustY",ParamBaseX:"ParamBaseX",ParamBaseY:"ParamBaseY",ParamNONE:"NONE:"});var a,s=o(i(7564));(a=e.Live2DCubismFramework||(e.Live2DCubismFramework={})).HitAreaBody=s.CubismDefaultParameterId.HitAreaBody,a.HitAreaHead=s.CubismDefaultParameterId.HitAreaHead,a.HitAreaPrefix=s.CubismDefaultParameterId.HitAreaPrefix,a.ParamAngleX=s.CubismDefaultParameterId.ParamAngleX,a.ParamAngleY=s.CubismDefaultParameterId.ParamAngleY,a.ParamAngleZ=s.CubismDefaultParameterId.ParamAngleZ,a.ParamArmLA=s.CubismDefaultParameterId.ParamArmLA,a.ParamArmLB=s.CubismDefaultParameterId.ParamArmLB,a.ParamArmRA=s.CubismDefaultParameterId.ParamArmRA,a.ParamArmRB=s.CubismDefaultParameterId.ParamArmRB,a.ParamBaseX=s.CubismDefaultParameterId.ParamBaseX,a.ParamBaseY=s.CubismDefaultParameterId.ParamBaseY,a.ParamBodyAngleX=s.CubismDefaultParameterId.ParamBodyAngleX,a.ParamBodyAngleY=s.CubismDefaultParameterId.ParamBodyAngleY,a.ParamBodyAngleZ=s.CubismDefaultParameterId.ParamBodyAngleZ,a.ParamBreath=s.CubismDefaultParameterId.ParamBreath,a.ParamBrowLAngle=s.CubismDefaultParameterId.ParamBrowLAngle,a.ParamBrowLForm=s.CubismDefaultParameterId.ParamBrowLForm,a.ParamBrowLX=s.CubismDefaultParameterId.ParamBrowLX,a.ParamBrowLY=s.CubismDefaultParameterId.ParamBrowLY,a.ParamBrowRAngle=s.CubismDefaultParameterId.ParamBrowRAngle,a.ParamBrowRForm=s.CubismDefaultParameterId.ParamBrowRForm,a.ParamBrowRX=s.CubismDefaultParameterId.ParamBrowRX,a.ParamBrowRY=s.CubismDefaultParameterId.ParamBrowRY,a.ParamBustX=s.CubismDefaultParameterId.ParamBustX,a.ParamBustY=s.CubismDefaultParameterId.ParamBustY,a.ParamCheek=s.CubismDefaultParameterId.ParamCheek,a.ParamEyeBallForm=s.CubismDefaultParameterId.ParamEyeBallForm,a.ParamEyeBallX=s.CubismDefaultParameterId.ParamEyeBallX,a.ParamEyeBallY=s.CubismDefaultParameterId.ParamEyeBallY,a.ParamEyeLOpen=s.CubismDefaultParameterId.ParamEyeLOpen,a.ParamEyeLSmile=s.CubismDefaultParameterId.ParamEyeLSmile,a.ParamEyeROpen=s.CubismDefaultParameterId.ParamEyeROpen,a.ParamEyeRSmile=s.CubismDefaultParameterId.ParamEyeRSmile,a.ParamHairBack=s.CubismDefaultParameterId.ParamHairBack,a.ParamHairFluffy=s.CubismDefaultParameterId.ParamHairFluffy,a.ParamHairFront=s.CubismDefaultParameterId.ParamHairFront,a.ParamHairSide=s.CubismDefaultParameterId.ParamHairSide,a.ParamHandL=s.CubismDefaultParameterId.ParamHandL,a.ParamHandR=s.CubismDefaultParameterId.ParamHandR,a.ParamMouthForm=s.CubismDefaultParameterId.ParamMouthForm,a.ParamMouthOpenY=s.CubismDefaultParameterId.ParamMouthOpenY,a.ParamNONE=s.CubismDefaultParameterId.ParamNONE,a.ParamShoulderY=s.CubismDefaultParameterId.ParamShoulderY,a.PartsArmLPrefix=s.CubismDefaultParameterId.PartsArmLPrefix,a.PartsArmPrefix=s.CubismDefaultParameterId.PartsArmPrefix,a.PartsArmRPrefix=s.CubismDefaultParameterId.PartsArmRPrefix,a.PartsIdCore=s.CubismDefaultParameterId.PartsIdCore},1816:function(t,e){Object.defineProperty(e,"__esModule",{value:!0}),e.CSM_LOG_LEVEL=e.CSM_LOG_LEVEL_OFF=e.CSM_LOG_LEVEL_ERROR=e.CSM_LOG_LEVEL_WARNING=e.CSM_LOG_LEVEL_INFO=e.CSM_LOG_LEVEL_DEBUG=e.CSM_LOG_LEVEL_VERBOSE=void 0,e.CSM_LOG_LEVEL_VERBOSE=0,e.CSM_LOG_LEVEL_DEBUG=1,e.CSM_LOG_LEVEL_INFO=2,e.CSM_LOG_LEVEL_WARNING=3,e.CSM_LOG_LEVEL_ERROR=4,e.CSM_LOG_LEVEL_OFF=5,e.CSM_LOG_LEVEL=e.CSM_LOG_LEVEL_VERBOSE},9462:function(t,e,i){var r,n=this&&this.__extends||(r=function(t,e){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},r(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),o=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i);var n=Object.getOwnPropertyDescriptor(e,i);n&&!("get"in n?!e.__esModule:n.writable||n.configurable)||(n={enumerable:!0,get:function(){return e[i]}}),Object.defineProperty(t,r,n)}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),a=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&o(e,t,i);return a(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.CubismModelSettingJson=void 0;var u,l=i(9531),c=i(1671),h=i(5760),p=i(3706),d="FileReferences",g="UserData",_="Name",m="File",f="Ids",y="Sound",b="FadeInTime",v="FadeOutTime",C="LipSync",S="EyeBlink";!function(t){t[t.FrequestNode_Groups=0]="FrequestNode_Groups",t[t.FrequestNode_Moc=1]="FrequestNode_Moc",t[t.FrequestNode_Motions=2]="FrequestNode_Motions",t[t.FrequestNode_Expressions=3]="FrequestNode_Expressions",t[t.FrequestNode_Textures=4]="FrequestNode_Textures",t[t.FrequestNode_Physics=5]="FrequestNode_Physics",t[t.FrequestNode_Pose=6]="FrequestNode_Pose",t[t.FrequestNode_HitAreas=7]="FrequestNode_HitAreas"}(u||(u={}));var P=function(t){function e(e,i){var r=t.call(this)||this;return r._json=p.CubismJson.create(e,i),r._json&&(r._jsonValue=new h.csmVector,r._jsonValue.pushBack(r._json.getRoot().getValueByString("Groups")),r._jsonValue.pushBack(r._json.getRoot().getValueByString(d).getValueByString("Moc")),r._jsonValue.pushBack(r._json.getRoot().getValueByString(d).getValueByString("Motions")),r._jsonValue.pushBack(r._json.getRoot().getValueByString(d).getValueByString("Expressions")),r._jsonValue.pushBack(r._json.getRoot().getValueByString(d).getValueByString("Textures")),r._jsonValue.pushBack(r._json.getRoot().getValueByString(d).getValueByString("Physics")),r._jsonValue.pushBack(r._json.getRoot().getValueByString(d).getValueByString("Pose")),r._jsonValue.pushBack(r._json.getRoot().getValueByString("HitAreas"))),r}return n(e,t),e.prototype.release=function(){p.CubismJson.delete(this._json),this._jsonValue=null},e.prototype.GetJson=function(){return this._json},e.prototype.getModelFileName=function(){return this.isExistModelFile()?this._jsonValue.at(u.FrequestNode_Moc).getRawString():""},e.prototype.getTextureCount=function(){return this.isExistTextureFiles()?this._jsonValue.at(u.FrequestNode_Textures).getSize():0},e.prototype.getTextureDirectory=function(){return this._jsonValue.at(u.FrequestNode_Textures).getRawString()},e.prototype.getTextureFileName=function(t){return this._jsonValue.at(u.FrequestNode_Textures).getValueByIndex(t).getRawString()},e.prototype.getHitAreasCount=function(){return this.isExistHitAreas()?this._jsonValue.at(u.FrequestNode_HitAreas).getSize():0},e.prototype.getHitAreaId=function(t){return c.CubismFramework.getIdManager().getId(this._jsonValue.at(u.FrequestNode_HitAreas).getValueByIndex(t).getValueByString("Id").getRawString())},e.prototype.getHitAreaName=function(t){return this._jsonValue.at(u.FrequestNode_HitAreas).getValueByIndex(t).getValueByString(_).getRawString()},e.prototype.getPhysicsFileName=function(){return this.isExistPhysicsFile()?this._jsonValue.at(u.FrequestNode_Physics).getRawString():""},e.prototype.getPoseFileName=function(){return this.isExistPoseFile()?this._jsonValue.at(u.FrequestNode_Pose).getRawString():""},e.prototype.getExpressionCount=function(){return this.isExistExpressionFile()?this._jsonValue.at(u.FrequestNode_Expressions).getSize():0},e.prototype.getExpressionName=function(t){return this._jsonValue.at(u.FrequestNode_Expressions).getValueByIndex(t).getValueByString(_).getRawString()},e.prototype.getExpressionFileName=function(t){return this._jsonValue.at(u.FrequestNode_Expressions).getValueByIndex(t).getValueByString(m).getRawString()},e.prototype.getMotionGroupCount=function(){return this.isExistMotionGroups()?this._jsonValue.at(u.FrequestNode_Motions).getKeys().getSize():0},e.prototype.getMotionGroupName=function(t){return this.isExistMotionGroups()?this._jsonValue.at(u.FrequestNode_Motions).getKeys().at(t):null},e.prototype.getMotionCount=function(t){return this.isExistMotionGroupName(t)?this._jsonValue.at(u.FrequestNode_Motions).getValueByString(t).getSize():0},e.prototype.getMotionFileName=function(t,e){return this.isExistMotionGroupName(t)?this._jsonValue.at(u.FrequestNode_Motions).getValueByString(t).getValueByIndex(e).getValueByString(m).getRawString():""},e.prototype.getMotionSoundFileName=function(t,e){return this.isExistMotionSoundFile(t,e)?this._jsonValue.at(u.FrequestNode_Motions).getValueByString(t).getValueByIndex(e).getValueByString(y).getRawString():""},e.prototype.getMotionFadeInTimeValue=function(t,e){return this.isExistMotionFadeIn(t,e)?this._jsonValue.at(u.FrequestNode_Motions).getValueByString(t).getValueByIndex(e).getValueByString(b).toFloat():-1},e.prototype.getMotionFadeOutTimeValue=function(t,e){return this.isExistMotionFadeOut(t,e)?this._jsonValue.at(u.FrequestNode_Motions).getValueByString(t).getValueByIndex(e).getValueByString(v).toFloat():-1},e.prototype.getUserDataFile=function(){return this.isExistUserDataFile()?this._json.getRoot().getValueByString(d).getValueByString(g).getRawString():""},e.prototype.getLayoutMap=function(t){var e=this._json.getRoot().getValueByString("Layout").getMap();if(null==e)return!1;for(var i=!1,r=e.begin();r.notEqual(e.end());r.preIncrement())t.setValue(r.ptr().first,r.ptr().second.toFloat()),i=!0;return i},e.prototype.getEyeBlinkParameterCount=function(){if(!this.isExistEyeBlinkParameters())return 0;for(var t=0,e=0;e<this._jsonValue.at(u.FrequestNode_Groups).getSize();e++){var i=this._jsonValue.at(u.FrequestNode_Groups).getValueByIndex(e);if(!i.isNull()&&!i.isError()&&i.getValueByString(_).getRawString()==S){t=i.getValueByString(f).getVector().getSize();break}}return t},e.prototype.getEyeBlinkParameterId=function(t){if(!this.isExistEyeBlinkParameters())return null;for(var e=0;e<this._jsonValue.at(u.FrequestNode_Groups).getSize();e++){var i=this._jsonValue.at(u.FrequestNode_Groups).getValueByIndex(e);if(!i.isNull()&&!i.isError()&&i.getValueByString(_).getRawString()==S)return c.CubismFramework.getIdManager().getId(i.getValueByString(f).getValueByIndex(t).getRawString())}return null},e.prototype.getLipSyncParameterCount=function(){if(!this.isExistLipSyncParameters())return 0;for(var t=0,e=0;e<this._jsonValue.at(u.FrequestNode_Groups).getSize();e++){var i=this._jsonValue.at(u.FrequestNode_Groups).getValueByIndex(e);if(!i.isNull()&&!i.isError()&&i.getValueByString(_).getRawString()==C){t=i.getValueByString(f).getVector().getSize();break}}return t},e.prototype.getLipSyncParameterId=function(t){if(!this.isExistLipSyncParameters())return null;for(var e=0;e<this._jsonValue.at(u.FrequestNode_Groups).getSize();e++){var i=this._jsonValue.at(u.FrequestNode_Groups).getValueByIndex(e);if(!i.isNull()&&!i.isError()&&i.getValueByString(_).getRawString()==C)return c.CubismFramework.getIdManager().getId(i.getValueByString(f).getValueByIndex(t).getRawString())}return null},e.prototype.isExistModelFile=function(){var t=this._jsonValue.at(u.FrequestNode_Moc);return!t.isNull()&&!t.isError()},e.prototype.isExistTextureFiles=function(){var t=this._jsonValue.at(u.FrequestNode_Textures);return!t.isNull()&&!t.isError()},e.prototype.isExistHitAreas=function(){var t=this._jsonValue.at(u.FrequestNode_HitAreas);return!t.isNull()&&!t.isError()},e.prototype.isExistPhysicsFile=function(){var t=this._jsonValue.at(u.FrequestNode_Physics);return!t.isNull()&&!t.isError()},e.prototype.isExistPoseFile=function(){var t=this._jsonValue.at(u.FrequestNode_Pose);return!t.isNull()&&!t.isError()},e.prototype.isExistExpressionFile=function(){var t=this._jsonValue.at(u.FrequestNode_Expressions);return!t.isNull()&&!t.isError()},e.prototype.isExistMotionGroups=function(){var t=this._jsonValue.at(u.FrequestNode_Motions);return!t.isNull()&&!t.isError()},e.prototype.isExistMotionGroupName=function(t){var e=this._jsonValue.at(u.FrequestNode_Motions).getValueByString(t);return!e.isNull()&&!e.isError()},e.prototype.isExistMotionSoundFile=function(t,e){var i=this._jsonValue.at(u.FrequestNode_Motions).getValueByString(t).getValueByIndex(e).getValueByString(y);return!i.isNull()&&!i.isError()},e.prototype.isExistMotionFadeIn=function(t,e){var i=this._jsonValue.at(u.FrequestNode_Motions).getValueByString(t).getValueByIndex(e).getValueByString(b);return!i.isNull()&&!i.isError()},e.prototype.isExistMotionFadeOut=function(t,e){var i=this._jsonValue.at(u.FrequestNode_Motions).getValueByString(t).getValueByIndex(e).getValueByString(v);return!i.isNull()&&!i.isError()},e.prototype.isExistUserDataFile=function(){var t=this._json.getRoot().getValueByString(d).getValueByString(g);return!t.isNull()&&!t.isError()},e.prototype.isExistEyeBlinkParameters=function(){if(this._jsonValue.at(u.FrequestNode_Groups).isNull()||this._jsonValue.at(u.FrequestNode_Groups).isError())return!1;for(var t=0;t<this._jsonValue.at(u.FrequestNode_Groups).getSize();++t)if(this._jsonValue.at(u.FrequestNode_Groups).getValueByIndex(t).getValueByString(_).getRawString()==S)return!0;return!1},e.prototype.isExistLipSyncParameters=function(){if(this._jsonValue.at(u.FrequestNode_Groups).isNull()||this._jsonValue.at(u.FrequestNode_Groups).isError())return!1;for(var t=0;t<this._jsonValue.at(u.FrequestNode_Groups).getSize();++t)if(this._jsonValue.at(u.FrequestNode_Groups).getValueByIndex(t).getValueByString(_).getRawString()==C)return!0;return!1},e}(l.ICubismModelSetting);e.CubismModelSettingJson=P;var M=s(i(9462));(e.Live2DCubismFramework||(e.Live2DCubismFramework={})).CubismModelSettingJson=M.CubismModelSettingJson},5644:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i);var n=Object.getOwnPropertyDescriptor(e,i);n&&!("get"in n?!e.__esModule:n.writable||n.configurable)||(n={enumerable:!0,get:function(){return e[i]}}),Object.defineProperty(t,r,n)}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.BreathParameterData=e.CubismBreath=void 0;var a=function(){function t(){this._currentTime=0}return t.create=function(){return new t},t.delete=function(t){null!=t&&(t=null)},t.prototype.setParameters=function(t){this._breathParameters=t},t.prototype.getParameters=function(){return this._breathParameters},t.prototype.updateParameters=function(t,e){this._currentTime+=e;for(var i=2*this._currentTime*3.14159,r=0;r<this._breathParameters.getSize();++r){var n=this._breathParameters.at(r);t.addParameterValueById(n.parameterId,n.offset+n.peak*Math.sin(i/n.cycle),n.weight)}},t}();e.CubismBreath=a;e.BreathParameterData=function(t,e,i,r,n){this.parameterId=null==t?null:t,this.offset=null==e?0:e,this.peak=null==i?0:i,this.cycle=null==r?0:r,this.weight=null==n?0:n};var s,u=o(i(5644));(s=e.Live2DCubismFramework||(e.Live2DCubismFramework={})).BreathParameterData=u.BreathParameterData,s.CubismBreath=u.CubismBreath},6325:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i);var n=Object.getOwnPropertyDescriptor(e,i);n&&!("get"in n?!e.__esModule:n.writable||n.configurable)||(n={enumerable:!0,get:function(){return e[i]}}),Object.defineProperty(t,r,n)}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.EyeState=e.CubismEyeBlink=void 0;var a,s=i(5760),u=function(){function t(t){if(this._blinkingState=a.EyeState_First,this._nextBlinkingTime=0,this._stateStartTimeSeconds=0,this._blinkingIntervalSeconds=4,this._closingSeconds=.1,this._closedSeconds=.05,this._openingSeconds=.15,this._userTimeSeconds=0,this._parameterIds=new s.csmVector,null!=t)for(var e=0;e<t.getEyeBlinkParameterCount();++e)this._parameterIds.pushBack(t.getEyeBlinkParameterId(e))}return t.create=function(e){return void 0===e&&(e=null),new t(e)},t.delete=function(t){null!=t&&(t=null)},t.prototype.setBlinkingInterval=function(t){this._blinkingIntervalSeconds=t},t.prototype.setBlinkingSetting=function(t,e,i){this._closingSeconds=t,this._closedSeconds=e,this._openingSeconds=i},t.prototype.setParameterIds=function(t){this._parameterIds=t},t.prototype.getParameterIds=function(){return this._parameterIds},t.prototype.updateParameters=function(e,i){var r;this._userTimeSeconds+=i;var n=0;switch(this._blinkingState){case a.EyeState_Closing:(n=(this._userTimeSeconds-this._stateStartTimeSeconds)/this._closingSeconds)>=1&&(n=1,this._blinkingState=a.EyeState_Closed,this._stateStartTimeSeconds=this._userTimeSeconds),r=1-n;break;case a.EyeState_Closed:(n=(this._userTimeSeconds-this._stateStartTimeSeconds)/this._closedSeconds)>=1&&(this._blinkingState=a.EyeState_Opening,this._stateStartTimeSeconds=this._userTimeSeconds),r=0;break;case a.EyeState_Opening:(n=(this._userTimeSeconds-this._stateStartTimeSeconds)/this._openingSeconds)>=1&&(n=1,this._blinkingState=a.EyeState_Interval,this._nextBlinkingTime=this.determinNextBlinkingTiming()),r=n;break;case a.EyeState_Interval:this._nextBlinkingTime<this._userTimeSeconds&&(this._blinkingState=a.EyeState_Closing,this._stateStartTimeSeconds=this._userTimeSeconds),r=1;break;case a.EyeState_First:default:this._blinkingState=a.EyeState_Interval,this._nextBlinkingTime=this.determinNextBlinkingTiming(),r=1}t.CloseIfZero||(r=-r);for(var o=0;o<this._parameterIds.getSize();++o)e.setParameterValueById(this._parameterIds.at(o),r)},t.prototype.determinNextBlinkingTiming=function(){var t=Math.random();return this._userTimeSeconds+t*(2*this._blinkingIntervalSeconds-1)},t.CloseIfZero=!0,t}();e.CubismEyeBlink=u,function(t){t[t.EyeState_First=0]="EyeState_First",t[t.EyeState_Interval=1]="EyeState_Interval",t[t.EyeState_Closing=2]="EyeState_Closing",t[t.EyeState_Closed=3]="EyeState_Closed",t[t.EyeState_Opening=4]="EyeState_Opening"}(a=e.EyeState||(e.EyeState={}));var l,c=o(i(6325));(l=e.Live2DCubismFramework||(e.Live2DCubismFramework={})).CubismEyeBlink=c.CubismEyeBlink,l.EyeState=c.EyeState},8111:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i);var n=Object.getOwnPropertyDescriptor(e,i);n&&!("get"in n?!e.__esModule:n.writable||n.configurable)||(n={enumerable:!0,get:function(){return e[i]}}),Object.defineProperty(t,r,n)}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.PartData=e.CubismPose=void 0;var a=i(1671),s=i(5760),u=i(3706),l="FadeInTime",c="Link",h=function(){function t(){this._fadeTimeSeconds=.5,this._lastModel=null,this._partGroups=new s.csmVector,this._partGroupCounts=new s.csmVector}return t.create=function(e,i){var r=new t,n=u.CubismJson.create(e,i),o=n.getRoot();o.getValueByString(l).isNull()||(r._fadeTimeSeconds=o.getValueByString(l).toFloat(.5),r._fadeTimeSeconds<=0&&(r._fadeTimeSeconds=.5));for(var s=o.getValueByString("Groups"),h=s.getSize(),d=0;d<h;++d){for(var g=s.getValueByIndex(d),_=g.getSize(),m=0,f=0;f<_;++f){var y=g.getValueByIndex(f),b=new p,v=a.CubismFramework.getIdManager().getId(y.getValueByString("Id").getRawString());if(b.partId=v,!y.getValueByString(c).isNull())for(var C=y.getValueByString(c),S=C.getSize(),P=0;P<S;++P){var M=new p,x=a.CubismFramework.getIdManager().getId(C.getValueByIndex(P).getString());M.partId=x,b.link.pushBack(M)}r._partGroups.pushBack(b.clone()),++m}r._partGroupCounts.pushBack(m)}return u.CubismJson.delete(n),r},t.delete=function(t){null!=t&&(t=null)},t.prototype.updateParameters=function(t,e){t!=this._lastModel&&this.reset(t),this._lastModel=t,e<0&&(e=0);for(var i=0,r=0;r<this._partGroupCounts.getSize();r++){var n=this._partGroupCounts.at(r);this.doFade(t,e,i,n),i+=n}this.copyPartOpacities(t)},t.prototype.reset=function(t){for(var e=0,i=0;i<this._partGroupCounts.getSize();++i){for(var r=this._partGroupCounts.at(i),n=e;n<e+r;++n){this._partGroups.at(n).initialize(t);var o=this._partGroups.at(n).partIndex,a=this._partGroups.at(n).parameterIndex;if(!(o<0)){t.setPartOpacityByIndex(o,n==e?1:0),t.setParameterValueByIndex(a,n==e?1:0);for(var s=0;s<this._partGroups.at(n).link.getSize();++s)this._partGroups.at(n).link.at(s).initialize(t)}}e+=r}},t.prototype.copyPartOpacities=function(t){for(var e=0;e<this._partGroups.getSize();++e){var i=this._partGroups.at(e);if(0!=i.link.getSize())for(var r=this._partGroups.at(e).partIndex,n=t.getPartOpacityByIndex(r),o=0;o<i.link.getSize();++o){var a=i.link.at(o).partIndex;a<0||t.setPartOpacityByIndex(a,n)}}},t.prototype.doFade=function(t,e,i,r){for(var n=-1,o=1,a=i;a<i+r;++a){var s=this._partGroups.at(a).partIndex,u=this._partGroups.at(a).parameterIndex;if(t.getParameterValueByIndex(u)>.001){if(n>=0)break;n=a,o=t.getPartOpacityByIndex(s),(o+=e/this._fadeTimeSeconds)>1&&(o=1)}}for(n<0&&(n=0,o=1),a=i;a<i+r;++a){var l=this._partGroups.at(a).partIndex;if(n==a)t.setPartOpacityByIndex(l,o);else{var c=t.getPartOpacityByIndex(l),h=void 0;(1-(h=o<.5?-.5*o/.5+1:.5*(1-o)/.5))*(1-o)>.15&&(h=1-.15/(1-o)),c>h&&(c=h),t.setPartOpacityByIndex(l,c)}}},t}();e.CubismPose=h;var p=function(){function t(t){if(this.parameterIndex=0,this.partIndex=0,this.link=new s.csmVector,null!=t){this.partId=t.partId;for(var e=t.link.begin();e.notEqual(t.link.end());e.preIncrement())this.link.pushBack(e.ptr().clone())}}return t.prototype.assignment=function(t){this.partId=t.partId;for(var e=t.link.begin();e.notEqual(t.link.end());e.preIncrement())this.link.pushBack(e.ptr().clone());return this},t.prototype.initialize=function(t){this.parameterIndex=t.getParameterIndex(this.partId),this.partIndex=t.getPartIndex(this.partId),t.setParameterValueByIndex(this.parameterIndex,1)},t.prototype.clone=function(){var e=new t;e.partId=this.partId,e.parameterIndex=this.parameterIndex,e.partIndex=this.partIndex,e.link=new s.csmVector;for(var i=this.link.begin();i.notEqual(this.link.end());i.increment())e.link.pushBack(i.ptr().clone());return e},t}();e.PartData=p;var d,g=o(i(8111));(d=e.Live2DCubismFramework||(e.Live2DCubismFramework={})).CubismPose=g.CubismPose,d.PartData=g.PartData},9531:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i);var n=Object.getOwnPropertyDescriptor(e,i);n&&!("get"in n?!e.__esModule:n.writable||n.configurable)||(n={enumerable:!0,get:function(){return e[i]}}),Object.defineProperty(t,r,n)}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.ICubismModelSetting=void 0;e.ICubismModelSetting=function(){};var a=o(i(9531));(e.Live2DCubismFramework||(e.Live2DCubismFramework={})).ICubismModelSetting=a.ICubismModelSetting},5266:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i);var n=Object.getOwnPropertyDescriptor(e,i);n&&!("get"in n?!e.__esModule:n.writable||n.configurable)||(n={enumerable:!0,get:function(){return e[i]}}),Object.defineProperty(t,r,n)}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.CubismId=void 0;var a=i(1695),s=function(){function t(t){this._id="string"!=typeof t?t:new a.csmString(t)}return t.prototype.getString=function(){return this._id},t.prototype.isEqual=function(e){return"string"==typeof e?this._id.isEqual(e):e instanceof a.csmString?this._id.isEqual(e.s):e instanceof t&&this._id.isEqual(e._id.s)},t.prototype.isNotEqual=function(e){return"string"==typeof e?!this._id.isEqual(e):e instanceof a.csmString?!this._id.isEqual(e.s):e instanceof t&&!this._id.isEqual(e._id.s)},t}();e.CubismId=s;var u=o(i(5266));(e.Live2DCubismFramework||(e.Live2DCubismFramework={})).CubismId=u.CubismId},9534:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i);var n=Object.getOwnPropertyDescriptor(e,i);n&&!("get"in n?!e.__esModule:n.writable||n.configurable)||(n={enumerable:!0,get:function(){return e[i]}}),Object.defineProperty(t,r,n)}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.CubismIdManager=void 0;var a=i(5760),s=i(5266),u=function(){function t(){this._ids=new a.csmVector}return t.prototype.release=function(){for(var t=0;t<this._ids.getSize();++t)this._ids.set(t,void 0);this._ids=null},t.prototype.registerIds=function(t){for(var e=0;e<t.length;e++)this.registerId(t[e])},t.prototype.registerId=function(t){var e=null;return"string"!=typeof t?this.registerId(t.s):(null!=(e=this.findId(t))||(e=new s.CubismId(t),this._ids.pushBack(e)),e)},t.prototype.getId=function(t){return this.registerId(t)},t.prototype.isExist=function(t){return"string"==typeof t?null!=this.findId(t):this.isExist(t.s)},t.prototype.findId=function(t){for(var e=0;e<this._ids.getSize();++e)if(this._ids.at(e).getString().isEqual(t))return this._ids.at(e);return null},t}();e.CubismIdManager=u;var l=o(i(9534));(e.Live2DCubismFramework||(e.Live2DCubismFramework={})).CubismIdManager=l.CubismIdManager},1671:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i);var n=Object.getOwnPropertyDescriptor(e,i);n&&!("get"in n?!e.__esModule:n.writable||n.configurable)||(n={enumerable:!0,get:function(){return e[i]}}),Object.defineProperty(t,r,n)}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.LogLevel=e.Option=e.CubismFramework=e.csmDelete=e.Constant=e.strtod=void 0;var a=i(9534),s=i(7151),u=i(1073),l=i(3706);e.strtod=function(t,e){for(var i=0,r=1;;r++){var n=t.slice(r-1,r);if("e"!=n&&"-"!=n&&"E"!=n){var o=t.substring(0,r),a=Number(o);if(isNaN(a))break;i=r}}var s=parseFloat(t);return isNaN(s)&&(s=NaN),e[0]=t.slice(i),s};var c=!1,h=!1,p=null,d=null;e.Constant=Object.freeze({vertexOffset:0,vertexStep:2}),e.csmDelete=function(t){t&&(t=void 0)};var g=function(){function t(){}return t.startUp=function(t){if(void 0===t&&(t=null),c)return(0,u.CubismLogInfo)("CubismFramework.startUp() is already done."),c;if(null!=(p=t)&&Live2DCubismCore.Logging.csmSetLogFunction(p.logFunction),c=!0){var e=Live2DCubismCore.Version.csmGetVersion(),i=(4278190080&e)>>24,r=(16711680&e)>>16,n=65535&e,o=e;(0,u.CubismLogInfo)("Live2D Cubism Core version: {0}.{1}.{2} ({3})",("00"+i).slice(-2),("00"+r).slice(-2),("0000"+n).slice(-4),o)}return(0,u.CubismLogInfo)("CubismFramework.startUp() is complete."),c},t.cleanUp=function(){c=!1,h=!1,p=null,d=null},t.initialize=function(){(0,u.CSM_ASSERT)(c),c?h?(0,u.CubismLogWarning)("CubismFramework.initialize() skipped, already initialized."):(l.Value.staticInitializeNotForClientCall(),d=new a.CubismIdManager,h=!0,(0,u.CubismLogInfo)("CubismFramework.initialize() is complete.")):(0,u.CubismLogWarning)("CubismFramework is not started.")},t.dispose=function(){(0,u.CSM_ASSERT)(c),c?h?(l.Value.staticReleaseNotForClientCall(),d.release(),d=null,s.CubismRenderer.staticRelease(),h=!1,(0,u.CubismLogInfo)("CubismFramework.dispose() is complete.")):(0,u.CubismLogWarning)("CubismFramework.dispose() skipped, not initialized."):(0,u.CubismLogWarning)("CubismFramework is not started.")},t.isStarted=function(){return c},t.isInitialized=function(){return h},t.coreLogFunction=function(t){Live2DCubismCore.Logging.csmGetLogFunction()&&Live2DCubismCore.Logging.csmGetLogFunction()(t)},t.getLoggingLevel=function(){return null!=p?p.loggingLevel:_.LogLevel_Off},t.getIdManager=function(){return d},t}();e.CubismFramework=g;var _;e.Option=function(){},function(t){t[t.LogLevel_Verbose=0]="LogLevel_Verbose",t[t.LogLevel_Debug=1]="LogLevel_Debug",t[t.LogLevel_Info=2]="LogLevel_Info",t[t.LogLevel_Warning=3]="LogLevel_Warning",t[t.LogLevel_Error=4]="LogLevel_Error",t[t.LogLevel_Off=5]="LogLevel_Off"}(_=e.LogLevel||(e.LogLevel={}));var m,f=o(i(1671));(m=e.Live2DCubismFramework||(e.Live2DCubismFramework={})).Constant=f.Constant,m.csmDelete=f.csmDelete,m.CubismFramework=f.CubismFramework},6370:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i);var n=Object.getOwnPropertyDescriptor(e,i);n&&!("get"in n?!e.__esModule:n.writable||n.configurable)||(n={enumerable:!0,get:function(){return e[i]}}),Object.defineProperty(t,r,n)}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.CubismMath=void 0;var a=i(2376),s=function(){function t(){}return t.range=function(t,e,i){return t<e?t=e:t>i&&(t=i),t},t.sin=function(t){return Math.sin(t)},t.cos=function(t){return Math.cos(t)},t.abs=function(t){return Math.abs(t)},t.sqrt=function(t){return Math.sqrt(t)},t.cbrt=function(t){if(0===t)return t;var e,i=t,r=i<0;return r&&(i=-i),e=i===1/0?1/0:(i/((e=Math.exp(Math.log(i)/3))*e)+2*e)/3,r?-e:e},t.getEasingSine=function(t){return t<0?0:t>1?1:.5-.5*this.cos(t*Math.PI)},t.max=function(t,e){return t>e?t:e},t.min=function(t,e){return t>e?e:t},t.degreesToRadian=function(t){return t/180*Math.PI},t.radianToDegrees=function(t){return 180*t/Math.PI},t.directionToRadian=function(t,e){for(var i=Math.atan2(e.y,e.x)-Math.atan2(t.y,t.x);i<-Math.PI;)i+=2*Math.PI;for(;i>Math.PI;)i-=2*Math.PI;return i},t.directionToDegrees=function(t,e){var i=this.directionToRadian(t,e),r=this.radianToDegrees(i);return e.x-t.x>0&&(r=-r),r},t.radianToDirection=function(t){var e=new a.CubismVector2;return e.x=this.sin(t),e.y=this.cos(t),e},t.quadraticEquation=function(e,i,r){return this.abs(e)<t.Epsilon?this.abs(i)<t.Epsilon?-r:-r/i:-(i+this.sqrt(i*i-4*e*r))/(2*e)},t.cardanoAlgorithmForBezier=function(e,i,r,n){if(this.sqrt(e)<t.Epsilon)return this.range(this.quadraticEquation(i,r,n),0,1);var o=i/e,a=r/e,s=(3*a-o*o)/3,u=s/3,l=(2*o*o*o-9*o*a+n/e*27)/27,c=l/2,h=c*c+u*u*u,p=.51;if(h<0){var d=-s/3,g=d*d*d,_=this.sqrt(g),m=-l/(2*_),f=this.range(m,-1,1),y=Math.acos(f),b=2*this.cbrt(_),v=b*this.cos(y/3)-o/3;if(this.abs(v-.5)<p)return this.range(v,0,1);var C=b*this.cos((y+2*Math.PI)/3)-o/3;if(this.abs(C-.5)<p)return this.range(C,0,1);var S=b*this.cos((y+4*Math.PI)/3)-o/3;return this.range(S,0,1)}if(0==h){var P,M=2*(P=c<0?this.cbrt(-c):-this.cbrt(c))-o/3;return this.abs(M-.5)<p?this.range(M,0,1):(C=-P-o/3,this.range(C,0,1))}var x=this.sqrt(h),w=this.cbrt(x-c)-this.cbrt(x+c)-o/3;return this.range(w,0,1)},t.Epsilon=1e-5,t}();e.CubismMath=s;var u=o(i(6370));(e.Live2DCubismFramework||(e.Live2DCubismFramework={})).CubismMath=u.CubismMath},1149:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i);var n=Object.getOwnPropertyDescriptor(e,i);n&&!("get"in n?!e.__esModule:n.writable||n.configurable)||(n={enumerable:!0,get:function(){return e[i]}}),Object.defineProperty(t,r,n)}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.CubismMatrix44=void 0;var a=function(){function t(){this._tr=new Float32Array(16),this.loadIdentity()}return t.multiply=function(t,e,i){for(var r=new Float32Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),n=0;n<4;++n)for(var o=0;o<4;++o)for(var a=0;a<4;++a)r[o+4*n]+=t[a+4*n]*e[o+4*a];for(n=0;n<16;++n)i[n]=r[n]},t.prototype.loadIdentity=function(){var t=new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]);this.setMatrix(t)},t.prototype.setMatrix=function(t){for(var e=0;e<16;++e)this._tr[e]=t[e]},t.prototype.getArray=function(){return this._tr},t.prototype.getScaleX=function(){return this._tr[0]},t.prototype.getScaleY=function(){return this._tr[5]},t.prototype.getTranslateX=function(){return this._tr[12]},t.prototype.getTranslateY=function(){return this._tr[13]},t.prototype.transformX=function(t){return this._tr[0]*t+this._tr[12]},t.prototype.transformY=function(t){return this._tr[5]*t+this._tr[13]},t.prototype.invertTransformX=function(t){return(t-this._tr[12])/this._tr[0]},t.prototype.invertTransformY=function(t){return(t-this._tr[13])/this._tr[5]},t.prototype.translateRelative=function(e,i){var r=new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,e,i,0,1]);t.multiply(r,this._tr,this._tr)},t.prototype.translate=function(t,e){this._tr[12]=t,this._tr[13]=e},t.prototype.translateX=function(t){this._tr[12]=t},t.prototype.translateY=function(t){this._tr[13]=t},t.prototype.scaleRelative=function(e,i){var r=new Float32Array([e,0,0,0,0,i,0,0,0,0,1,0,0,0,0,1]);t.multiply(r,this._tr,this._tr)},t.prototype.scale=function(t,e){this._tr[0]=t,this._tr[5]=e},t.prototype.multiplyByMatrix=function(e){t.multiply(e.getArray(),this._tr,this._tr)},t.prototype.clone=function(){for(var e=new t,i=0;i<this._tr.length;i++)e._tr[i]=this._tr[i];return e},t}();e.CubismMatrix44=a;var s=o(i(1149));(e.Live2DCubismFramework||(e.Live2DCubismFramework={})).CubismMatrix44=s.CubismMatrix44},6175:function(t,e,i){var r,n=this&&this.__extends||(r=function(t,e){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},r(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),o=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i);var n=Object.getOwnPropertyDescriptor(e,i);n&&!("get"in n?!e.__esModule:n.writable||n.configurable)||(n={enumerable:!0,get:function(){return e[i]}}),Object.defineProperty(t,r,n)}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),a=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&o(e,t,i);return a(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.CubismModelMatrix=void 0;var u=function(t){function e(e,i){var r=t.call(this)||this;return r._width=void 0!==e?e:0,r._height=void 0!==i?i:0,r.setHeight(2),r}return n(e,t),e.prototype.setWidth=function(t){var e=t/this._width,i=e;this.scale(e,i)},e.prototype.setHeight=function(t){var e=t/this._height,i=e;this.scale(e,i)},e.prototype.setPosition=function(t,e){this.translate(t,e)},e.prototype.setCenterPosition=function(t,e){this.centerX(t),this.centerY(e)},e.prototype.top=function(t){this.setY(t)},e.prototype.bottom=function(t){var e=this._height*this.getScaleY();this.translateY(t-e)},e.prototype.left=function(t){this.setX(t)},e.prototype.right=function(t){var e=this._width*this.getScaleX();this.translateX(t-e)},e.prototype.centerX=function(t){var e=this._width*this.getScaleX();this.translateX(t-e/2)},e.prototype.setX=function(t){this.translateX(t)},e.prototype.centerY=function(t){var e=this._height*this.getScaleY();this.translateY(t-e/2)},e.prototype.setY=function(t){this.translateY(t)},e.prototype.setupFromLayout=function(t){for(var e=t.begin();e.notEqual(t.end());e.preIncrement()){var i=e.ptr().first,r=e.ptr().second;"width"==i?this.setWidth(r):"height"==i&&this.setHeight(r)}for(e=t.begin();e.notEqual(t.end());e.preIncrement())i=e.ptr().first,r=e.ptr().second,"x"==i?this.setX(r):"y"==i?this.setY(r):"center_x"==i?this.centerX(r):"center_y"==i?this.centerY(r):"top"==i?this.top(r):"bottom"==i?this.bottom(r):"left"==i?this.left(r):"right"==i&&this.right(r)},e}(i(1149).CubismMatrix44);e.CubismModelMatrix=u;var l=s(i(6175));(e.Live2DCubismFramework||(e.Live2DCubismFramework={})).CubismModelMatrix=l.CubismModelMatrix},1042:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i);var n=Object.getOwnPropertyDescriptor(e,i);n&&!("get"in n?!e.__esModule:n.writable||n.configurable)||(n={enumerable:!0,get:function(){return e[i]}}),Object.defineProperty(t,r,n)}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.CubismTargetPoint=void 0;var a=i(6370),s=function(){function t(){this._faceTargetX=0,this._faceTargetY=0,this._faceX=0,this._faceY=0,this._faceVX=0,this._faceVY=0,this._lastTimeSeconds=0,this._userTimeSeconds=0}return t.prototype.update=function(t){this._userTimeSeconds+=t;var e=4/30;if(0!=this._lastTimeSeconds){var i=30*(this._userTimeSeconds-this._lastTimeSeconds);this._lastTimeSeconds=this._userTimeSeconds;var r=i*e/4.5,n=this._faceTargetX-this._faceX,o=this._faceTargetY-this._faceY;if(!(a.CubismMath.abs(n)<=.01&&a.CubismMath.abs(o)<=.01)){var s=a.CubismMath.sqrt(n*n+o*o),u=e*o/s,l=e*n/s-this._faceVX,c=u-this._faceVY,h=a.CubismMath.sqrt(l*l+c*c);(h<-r||h>r)&&(l*=r/h,c*=r/h),this._faceVX+=l,this._faceVY+=c;var p=.5*(a.CubismMath.sqrt(r*r+16*r*s-8*r*s)-r),d=a.CubismMath.sqrt(this._faceVX*this._faceVX+this._faceVY*this._faceVY);d>p&&(this._faceVX*=p/d,this._faceVY*=p/d),this._faceX+=this._faceVX,this._faceY+=this._faceVY}}else this._lastTimeSeconds=this._userTimeSeconds},t.prototype.getX=function(){return this._faceX},t.prototype.getY=function(){return this._faceY},t.prototype.set=function(t,e){this._faceTargetX=t,this._faceTargetY=e},t}();e.CubismTargetPoint=s;var u=o(i(1042));(e.Live2DCubismFramework||(e.Live2DCubismFramework={})).CubismTargetPoint=u.CubismTargetPoint},2376:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i);var n=Object.getOwnPropertyDescriptor(e,i);n&&!("get"in n?!e.__esModule:n.writable||n.configurable)||(n={enumerable:!0,get:function(){return e[i]}}),Object.defineProperty(t,r,n)}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.CubismVector2=void 0;var a=function(){function t(t,e){this.x=t,this.y=e,this.x=null==t?0:t,this.y=null==e?0:e}return t.prototype.add=function(e){var i=new t(0,0);return i.x=this.x+e.x,i.y=this.y+e.y,i},t.prototype.substract=function(e){var i=new t(0,0);return i.x=this.x-e.x,i.y=this.y-e.y,i},t.prototype.multiply=function(e){var i=new t(0,0);return i.x=this.x*e.x,i.y=this.y*e.y,i},t.prototype.multiplyByScaler=function(e){return this.multiply(new t(e,e))},t.prototype.division=function(e){var i=new t(0,0);return i.x=this.x/e.x,i.y=this.y/e.y,i},t.prototype.divisionByScalar=function(e){return this.division(new t(e,e))},t.prototype.getLength=function(){return Math.sqrt(this.x*this.x+this.y*this.y)},t.prototype.getDistanceWith=function(t){return Math.sqrt((this.x-t.x)*(this.x-t.x)+(this.y-t.y)*(this.y-t.y))},t.prototype.dot=function(t){return this.x*t.x+this.y*t.y},t.prototype.normalize=function(){var t=Math.pow(this.x*this.x+this.y*this.y,.5);this.x=this.x/t,this.y=this.y/t},t.prototype.isEqual=function(t){return this.x==t.x&&this.y==t.y},t.prototype.isNotEqual=function(t){return!this.isEqual(t)},t}();e.CubismVector2=a;var s=o(i(2376));(e.Live2DCubismFramework||(e.Live2DCubismFramework={})).CubismVector2=s.CubismVector2},9248:function(t,e,i){var r,n=this&&this.__extends||(r=function(t,e){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},r(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),o=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i);var n=Object.getOwnPropertyDescriptor(e,i);n&&!("get"in n?!e.__esModule:n.writable||n.configurable)||(n={enumerable:!0,get:function(){return e[i]}}),Object.defineProperty(t,r,n)}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),a=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&o(e,t,i);return a(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.CubismViewMatrix=void 0;var u=i(1149),l=function(t){function e(){var e=t.call(this)||this;return e._screenLeft=0,e._screenRight=0,e._screenTop=0,e._screenBottom=0,e._maxLeft=0,e._maxRight=0,e._maxTop=0,e._maxBottom=0,e._maxScale=0,e._minScale=0,e}return n(e,t),e.prototype.adjustTranslate=function(t,e){this._tr[0]*this._maxLeft+(this._tr[12]+t)>this._screenLeft&&(t=this._screenLeft-this._tr[0]*this._maxLeft-this._tr[12]),this._tr[0]*this._maxRight+(this._tr[12]+t)<this._screenRight&&(t=this._screenRight-this._tr[0]*this._maxRight-this._tr[12]),this._tr[5]*this._maxTop+(this._tr[13]+e)<this._screenTop&&(e=this._screenTop-this._tr[5]*this._maxTop-this._tr[13]),this._tr[5]*this._maxBottom+(this._tr[13]+e)>this._screenBottom&&(e=this._screenBottom-this._tr[5]*this._maxBottom-this._tr[13]);var i=new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,t,e,0,1]);u.CubismMatrix44.multiply(i,this._tr,this._tr)},e.prototype.adjustScale=function(t,e,i){var r=this.getMaxScale(),n=this.getMinScale(),o=i*this._tr[0];o<n?this._tr[0]>0&&(i=n/this._tr[0]):o>r&&this._tr[0]>0&&(i=r/this._tr[0]);var a=new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,t,e,0,1]),s=new Float32Array([i,0,0,0,0,i,0,0,0,0,1,0,0,0,0,1]),l=new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,-t,-e,0,1]);u.CubismMatrix44.multiply(l,this._tr,this._tr),u.CubismMatrix44.multiply(s,this._tr,this._tr),u.CubismMatrix44.multiply(a,this._tr,this._tr)},e.prototype.setScreenRect=function(t,e,i,r){this._screenLeft=t,this._screenRight=e,this._screenBottom=i,this._screenTop=r},e.prototype.setMaxScreenRect=function(t,e,i,r){this._maxLeft=t,this._maxRight=e,this._maxTop=r,this._maxBottom=i},e.prototype.setMaxScale=function(t){this._maxScale=t},e.prototype.setMinScale=function(t){this._minScale=t},e.prototype.getMaxScale=function(){return this._maxScale},e.prototype.getMinScale=function(){return this._minScale},e.prototype.isMaxScale=function(){return this.getScaleX()>=this._maxScale},e.prototype.isMinScale=function(){return this.getScaleX()<=this._minScale},e.prototype.getScreenLeft=function(){return this._screenLeft},e.prototype.getScreenRight=function(){return this._screenRight},e.prototype.getScreenBottom=function(){return this._screenBottom},e.prototype.getScreenTop=function(){return this._screenTop},e.prototype.getMaxLeft=function(){return this._maxLeft},e.prototype.getMaxRight=function(){return this._maxRight},e.prototype.getMaxBottom=function(){return this._maxBottom},e.prototype.getMaxTop=function(){return this._maxTop},e}(u.CubismMatrix44);e.CubismViewMatrix=l;var c=s(i(9248));(e.Live2DCubismFramework||(e.Live2DCubismFramework={})).CubismViewMatrix=c.CubismViewMatrix},7577:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i);var n=Object.getOwnPropertyDescriptor(e,i);n&&!("get"in n?!e.__esModule:n.writable||n.configurable)||(n={enumerable:!0,get:function(){return e[i]}}),Object.defineProperty(t,r,n)}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.CubismMoc=void 0;var a=i(1073),s=i(1403),u=function(){function t(t){this._moc=t,this._modelCount=0}return t.create=function(e){var i=null,r=Live2DCubismCore.Moc.fromArrayBuffer(e);return r&&(i=new t(r)),i},t.delete=function(t){t._moc._release(),t._moc=null,t=null},t.prototype.createModel=function(){var t=null,e=Live2DCubismCore.Model.fromMoc(this._moc);return e&&((t=new s.CubismModel(e)).initialize(),++this._modelCount),t},t.prototype.deleteModel=function(t){null!=t&&(t.release(),t=null,--this._modelCount)},t.prototype.release=function(){(0,a.CSM_ASSERT)(0==this._modelCount),this._moc._release(),this._moc=null},t}();e.CubismMoc=u;var l=o(i(7577));(e.Live2DCubismFramework||(e.Live2DCubismFramework={})).CubismMoc=l.CubismMoc},1403:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i);var n=Object.getOwnPropertyDescriptor(e,i);n&&!("get"in n?!e.__esModule:n.writable||n.configurable)||(n={enumerable:!0,get:function(){return e[i]}}),Object.defineProperty(t,r,n)}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.CubismModel=void 0;var a=i(1671),s=i(7151),u=i(502),l=i(5760),c=i(1073),h=function(){function t(t){this._model=t,this._parameterValues=null,this._parameterMaximumValues=null,this._parameterMinimumValues=null,this._partOpacities=null,this._savedParameters=new l.csmVector,this._parameterIds=new l.csmVector,this._drawableIds=new l.csmVector,this._partIds=new l.csmVector,this._notExistPartId=new u.csmMap,this._notExistParameterId=new u.csmMap,this._notExistParameterValues=new u.csmMap,this._notExistPartOpacities=new u.csmMap}return t.prototype.update=function(){this._model.update(),this._model.drawables.resetDynamicFlags()},t.prototype.getCanvasWidth=function(){return null==this._model?0:this._model.canvasinfo.CanvasWidth/this._model.canvasinfo.PixelsPerUnit},t.prototype.getCanvasHeight=function(){return null==this._model?0:this._model.canvasinfo.CanvasHeight/this._model.canvasinfo.PixelsPerUnit},t.prototype.saveParameters=function(){for(var t=this._model.parameters.count,e=this._savedParameters.getSize(),i=0;i<t;++i)i<e?this._savedParameters.set(i,this._parameterValues[i]):this._savedParameters.pushBack(this._parameterValues[i])},t.prototype.getModel=function(){return this._model},t.prototype.getPartIndex=function(t){var e,i=this._model.parts.count;for(e=0;e<i;++e)if(t==this._partIds.at(e))return e;return this._notExistPartId.isExist(t)?this._notExistPartId.getValue(t):(e=i+this._notExistPartId.getSize(),this._notExistPartId.setValue(t,e),this._notExistPartOpacities.appendKey(e),e)},t.prototype.getPartCount=function(){return this._model.parts.count},t.prototype.setPartOpacityByIndex=function(t,e){this._notExistPartOpacities.isExist(t)?this._notExistPartOpacities.setValue(t,e):((0,c.CSM_ASSERT)(0<=t&&t<this.getPartCount()),this._partOpacities[t]=e)},t.prototype.setPartOpacityById=function(t,e){var i=this.getPartIndex(t);i<0||this.setPartOpacityByIndex(i,e)},t.prototype.getPartOpacityByIndex=function(t){return this._notExistPartOpacities.isExist(t)?this._notExistPartOpacities.getValue(t):((0,c.CSM_ASSERT)(0<=t&&t<this.getPartCount()),this._partOpacities[t])},t.prototype.getPartOpacityById=function(t){var e=this.getPartIndex(t);return e<0?0:this.getPartOpacityByIndex(e)},t.prototype.getParameterIndex=function(t){var e,i=this._model.parameters.count;for(e=0;e<i;++e)if(t==this._parameterIds.at(e))return e;return this._notExistParameterId.isExist(t)?this._notExistParameterId.getValue(t):(e=this._model.parameters.count+this._notExistParameterId.getSize(),this._notExistParameterId.setValue(t,e),this._notExistParameterValues.appendKey(e),e)},t.prototype.getParameterCount=function(){return this._model.parameters.count},t.prototype.getParameterMaximumValue=function(t){return this._model.parameters.maximumValues[t]},t.prototype.getParameterMinimumValue=function(t){return this._model.parameters.minimumValues[t]},t.prototype.getParameterDefaultValue=function(t){return this._model.parameters.defaultValues[t]},t.prototype.getParameterValueByIndex=function(t){return this._notExistParameterValues.isExist(t)?this._notExistParameterValues.getValue(t):((0,c.CSM_ASSERT)(0<=t&&t<this.getParameterCount()),this._parameterValues[t])},t.prototype.getParameterValueById=function(t){var e=this.getParameterIndex(t);return this.getParameterValueByIndex(e)},t.prototype.setParameterValueByIndex=function(t,e,i){void 0===i&&(i=1),this._notExistParameterValues.isExist(t)?this._notExistParameterValues.setValue(t,1==i?e:this._notExistParameterValues.getValue(t)*(1-i)+e*i):((0,c.CSM_ASSERT)(0<=t&&t<this.getParameterCount()),this._model.parameters.maximumValues[t]<e&&(e=this._model.parameters.maximumValues[t]),this._model.parameters.minimumValues[t]>e&&(e=this._model.parameters.minimumValues[t]),this._parameterValues[t]=1==i?e:this._parameterValues[t]=this._parameterValues[t]*(1-i)+e*i)},t.prototype.setParameterValueById=function(t,e,i){void 0===i&&(i=1);var r=this.getParameterIndex(t);this.setParameterValueByIndex(r,e,i)},t.prototype.addParameterValueByIndex=function(t,e,i){void 0===i&&(i=1),this.setParameterValueByIndex(t,this.getParameterValueByIndex(t)+e*i)},t.prototype.addParameterValueById=function(t,e,i){void 0===i&&(i=1);var r=this.getParameterIndex(t);this.addParameterValueByIndex(r,e,i)},t.prototype.multiplyParameterValueById=function(t,e,i){void 0===i&&(i=1);var r=this.getParameterIndex(t);this.multiplyParameterValueByIndex(r,e,i)},t.prototype.multiplyParameterValueByIndex=function(t,e,i){void 0===i&&(i=1),this.setParameterValueByIndex(t,this.getParameterValueByIndex(t)*(1+(e-1)*i))},t.prototype.getDrawableIndex=function(t){for(var e=this._model.drawables.count,i=0;i<e;++i)if(this._drawableIds.at(i)==t)return i;return-1},t.prototype.getDrawableCount=function(){return this._model.drawables.count},t.prototype.getDrawableId=function(t){var e=this._model.drawables.ids;return a.CubismFramework.getIdManager().getId(e[t])},t.prototype.getDrawableRenderOrders=function(){return this._model.drawables.renderOrders},t.prototype.getDrawableTextureIndices=function(t){return this._model.drawables.textureIndices[t]},t.prototype.getDrawableDynamicFlagVertexPositionsDidChange=function(t){var e=this._model.drawables.dynamicFlags;return Live2DCubismCore.Utils.hasVertexPositionsDidChangeBit(e[t])},t.prototype.getDrawableVertexIndexCount=function(t){return this._model.drawables.indexCounts[t]},t.prototype.getDrawableVertexCount=function(t){return this._model.drawables.vertexCounts[t]},t.prototype.getDrawableVertices=function(t){return this.getDrawableVertexPositions(t)},t.prototype.getDrawableVertexIndices=function(t){return this._model.drawables.indices[t]},t.prototype.getDrawableVertexPositions=function(t){return this._model.drawables.vertexPositions[t]},t.prototype.getDrawableVertexUvs=function(t){return this._model.drawables.vertexUvs[t]},t.prototype.getDrawableOpacity=function(t){return this._model.drawables.opacities[t]},t.prototype.getDrawableCulling=function(t){var e=this._model.drawables.constantFlags;return!Live2DCubismCore.Utils.hasIsDoubleSidedBit(e[t])},t.prototype.getDrawableBlendMode=function(t){var e=this._model.drawables.constantFlags;return Live2DCubismCore.Utils.hasBlendAdditiveBit(e[t])?s.CubismBlendMode.CubismBlendMode_Additive:Live2DCubismCore.Utils.hasBlendMultiplicativeBit(e[t])?s.CubismBlendMode.CubismBlendMode_Multiplicative:s.CubismBlendMode.CubismBlendMode_Normal},t.prototype.getDrawableInvertedMaskBit=function(t){var e=this._model.drawables.constantFlags;return Live2DCubismCore.Utils.hasIsInvertedMaskBit(e[t])},t.prototype.getDrawableMasks=function(){return this._model.drawables.masks},t.prototype.getDrawableMaskCounts=function(){return this._model.drawables.maskCounts},t.prototype.isUsingMasking=function(){for(var t=0;t<this._model.drawables.count;++t)if(!(this._model.drawables.maskCounts[t]<=0))return!0;return!1},t.prototype.getDrawableDynamicFlagIsVisible=function(t){var e=this._model.drawables.dynamicFlags;return Live2DCubismCore.Utils.hasIsVisibleBit(e[t])},t.prototype.getDrawableDynamicFlagVisibilityDidChange=function(t){var e=this._model.drawables.dynamicFlags;return Live2DCubismCore.Utils.hasVisibilityDidChangeBit(e[t])},t.prototype.getDrawableDynamicFlagOpacityDidChange=function(t){var e=this._model.drawables.dynamicFlags;return Live2DCubismCore.Utils.hasOpacityDidChangeBit(e[t])},t.prototype.getDrawableDynamicFlagRenderOrderDidChange=function(t){var e=this._model.drawables.dynamicFlags;return Live2DCubismCore.Utils.hasRenderOrderDidChangeBit(e[t])},t.prototype.loadParameters=function(){var t=this._model.parameters.count,e=this._savedParameters.getSize();t>e&&(t=e);for(var i=0;i<t;++i)this._parameterValues[i]=this._savedParameters.at(i)},t.prototype.initialize=function(){(0,c.CSM_ASSERT)(this._model),this._parameterValues=this._model.parameters.values,this._partOpacities=this._model.parts.opacities,this._parameterMaximumValues=this._model.parameters.maximumValues,this._parameterMinimumValues=this._model.parameters.minimumValues;var t=this._model.parameters.ids,e=this._model.parameters.count;this._parameterIds.prepareCapacity(e);for(var i=0;i<e;++i)this._parameterIds.pushBack(a.CubismFramework.getIdManager().getId(t[i]));var r=this._model.parts.ids,n=this._model.parts.count;for(this._partIds.prepareCapacity(n),i=0;i<n;++i)this._partIds.pushBack(a.CubismFramework.getIdManager().getId(r[i]));var o=this._model.drawables.ids,s=this._model.drawables.count;for(this._drawableIds.prepareCapacity(s),i=0;i<s;++i)this._drawableIds.pushBack(a.CubismFramework.getIdManager().getId(o[i]))},t.prototype.release=function(){this._model.release(),this._model=null},t}();e.CubismModel=h;var p=o(i(1403));(e.Live2DCubismFramework||(e.Live2DCubismFramework={})).CubismModel=p.CubismModel},5408:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i);var n=Object.getOwnPropertyDescriptor(e,i);n&&!("get"in n?!e.__esModule:n.writable||n.configurable)||(n={enumerable:!0,get:function(){return e[i]}}),Object.defineProperty(t,r,n)}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.CubismModelUserData=e.CubismModelUserDataNode=void 0;var a=i(1671),s=i(1695),u=i(5760),l=i(8845),c=function(){};e.CubismModelUserDataNode=c;var h=function(){function t(){this._userDataNodes=new u.csmVector,this._artMeshUserDataNode=new u.csmVector}return t.create=function(e,i){var r=new t;return r.parseUserData(e,i),r},t.delete=function(t){null!=t&&(t.release(),t=null)},t.prototype.getArtMeshUserDatas=function(){return this._artMeshUserDataNode},t.prototype.parseUserData=function(t,e){for(var i=new l.CubismModelUserDataJson(t,e),r=a.CubismFramework.getIdManager().getId("ArtMesh"),n=i.getUserDataCount(),o=0;o<n;o++){var u=new c;u.targetId=i.getUserDataId(o),u.targetType=a.CubismFramework.getIdManager().getId(i.getUserDataTargetType(o)),u.value=new s.csmString(i.getUserDataValue(o)),this._userDataNodes.pushBack(u),u.targetType==r&&this._artMeshUserDataNode.pushBack(u)}i.release(),i=void 0},t.prototype.release=function(){for(var t=0;t<this._userDataNodes.getSize();++t)this._userDataNodes.set(t,null);this._userDataNodes=null},t}();e.CubismModelUserData=h;var p,d=o(i(5408));(p=e.Live2DCubismFramework||(e.Live2DCubismFramework={})).CubismModelUserData=d.CubismModelUserData,p.CubismModelUserDataNode=d.CubismModelUserDataNode},8845:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i);var n=Object.getOwnPropertyDescriptor(e,i);n&&!("get"in n?!e.__esModule:n.writable||n.configurable)||(n={enumerable:!0,get:function(){return e[i]}}),Object.defineProperty(t,r,n)}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.CubismModelUserDataJson=void 0;var a=i(1671),s=i(3706),u="Meta",l="UserData",c=function(){function t(t,e){this._json=s.CubismJson.create(t,e)}return t.prototype.release=function(){s.CubismJson.delete(this._json)},t.prototype.getUserDataCount=function(){return this._json.getRoot().getValueByString(u).getValueByString("UserDataCount").toInt()},t.prototype.getTotalUserDataSize=function(){return this._json.getRoot().getValueByString(u).getValueByString("TotalUserDataSize").toInt()},t.prototype.getUserDataTargetType=function(t){return this._json.getRoot().getValueByString(l).getValueByIndex(t).getValueByString("Target").getRawString()},t.prototype.getUserDataId=function(t){return a.CubismFramework.getIdManager().getId(this._json.getRoot().getValueByString(l).getValueByIndex(t).getValueByString("Id").getRawString())},t.prototype.getUserDataValue=function(t){return this._json.getRoot().getValueByString(l).getValueByIndex(t).getValueByString("Value").getRawString()},t}();e.CubismModelUserDataJson=c;var h=o(i(8845));(e.Live2DCubismFramework||(e.Live2DCubismFramework={})).CubismModelUserDataJson=h.CubismModelUserDataJson},8385:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i);var n=Object.getOwnPropertyDescriptor(e,i);n&&!("get"in n?!e.__esModule:n.writable||n.configurable)||(n={enumerable:!0,get:function(){return e[i]}}),Object.defineProperty(t,r,n)}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.CubismUserModel=void 0;var a=i(5644),s=i(6325),u=i(8111),l=i(1671),c=i(6175),h=i(1042),p=i(6437),d=i(2916),g=i(9296),_=i(3039),m=i(3795),f=i(1073),y=i(7577),b=i(5408),v=function(){function t(){this.loadMotion=function(t,e,i,r){return d.CubismMotion.create(t,e,r)},this._moc=null,this._model=null,this._motionManager=null,this._expressionManager=null,this._eyeBlink=null,this._breath=null,this._modelMatrix=null,this._pose=null,this._dragManager=null,this._physics=null,this._modelUserData=null,this._initialized=!1,this._updating=!1,this._opacity=1,this._lipsync=!0,this._lastLipSyncValue=0,this._dragX=0,this._dragY=0,this._accelerationX=0,this._accelerationY=0,this._accelerationZ=0,this._debugMode=!1,this._renderer=null,this._motionManager=new g.CubismMotionManager,this._motionManager.setEventCallback(t.cubismDefaultMotionEventCallback,this),this._expressionManager=new g.CubismMotionManager,this._dragManager=new h.CubismTargetPoint}return t.prototype.isInitialized=function(){return this._initialized},t.prototype.setInitialized=function(t){this._initialized=t},t.prototype.isUpdating=function(){return this._updating},t.prototype.setUpdating=function(t){this._updating=t},t.prototype.setDragging=function(t,e){this._dragManager.set(t,e)},t.prototype.setAcceleration=function(t,e,i){this._accelerationX=t,this._accelerationY=e,this._accelerationZ=i},t.prototype.getModelMatrix=function(){return this._modelMatrix},t.prototype.setOpacity=function(t){this._opacity=t},t.prototype.getOpacity=function(){return this._opacity},t.prototype.loadModel=function(t){this._moc=y.CubismMoc.create(t),this._model=this._moc.createModel(),this._model.saveParameters(),null!=this._moc&&null!=this._model?this._modelMatrix=new c.CubismModelMatrix(this._model.getCanvasWidth(),this._model.getCanvasHeight()):(0,f.CubismLogError)("Failed to CreateModel().")},t.prototype.loadExpression=function(t,e,i){return p.CubismExpressionMotion.create(t,e)},t.prototype.loadPose=function(t,e){this._pose=u.CubismPose.create(t,e)},t.prototype.loadUserData=function(t,e){this._modelUserData=b.CubismModelUserData.create(t,e)},t.prototype.loadPhysics=function(t,e){this._physics=_.CubismPhysics.create(t,e)},t.prototype.isHit=function(t,e,i){var r=this._model.getDrawableIndex(t);if(r<0)return!1;for(var n=this._model.getDrawableVertexCount(r),o=this._model.getDrawableVertices(r),a=o[0],s=o[0],u=o[1],c=o[1],h=1;h<n;++h){var p=o[l.Constant.vertexOffset+h*l.Constant.vertexStep],d=o[l.Constant.vertexOffset+h*l.Constant.vertexStep+1];p<a&&(a=p),p>s&&(s=p),d<u&&(u=d),d>c&&(c=d)}var g=this._modelMatrix.invertTransformX(e),_=this._modelMatrix.invertTransformY(i);return a<=g&&g<=s&&u<=_&&_<=c},t.prototype.getModel=function(){return this._model},t.prototype.getRenderer=function(){return this._renderer},t.prototype.createRenderer=function(){this._renderer&&this.deleteRenderer(),this._renderer=new m.CubismRenderer_WebGL,this._renderer.initialize(this._model)},t.prototype.deleteRenderer=function(){null!=this._renderer&&(this._renderer.release(),this._renderer=null)},t.prototype.motionEventFired=function(t){(0,f.CubismLogInfo)("{0}",t.s)},t.cubismDefaultMotionEventCallback=function(t,e,i){null!=i&&i.motionEventFired(e)},t.prototype.release=function(){null!=this._motionManager&&(this._motionManager.release(),this._motionManager=null),null!=this._expressionManager&&(this._expressionManager.release(),this._expressionManager=null),null!=this._moc&&(this._moc.deleteModel(this._model),this._moc.release(),this._moc=null),this._modelMatrix=null,u.CubismPose.delete(this._pose),s.CubismEyeBlink.delete(this._eyeBlink),a.CubismBreath.delete(this._breath),this._dragManager=null,_.CubismPhysics.delete(this._physics),b.CubismModelUserData.delete(this._modelUserData),this.deleteRenderer()},t}();e.CubismUserModel=v;var C=o(i(8385));(e.Live2DCubismFramework||(e.Live2DCubismFramework={})).CubismUserModel=C.CubismUserModel},8855:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i);var n=Object.getOwnPropertyDescriptor(e,i);n&&!("get"in n?!e.__esModule:n.writable||n.configurable)||(n={enumerable:!0,get:function(){return e[i]}}),Object.defineProperty(t,r,n)}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.ACubismMotion=void 0;var a=i(6370),s=i(5760),u=i(1073),l=function(){function t(){var t=this;this.setFinishedMotionHandler=function(e){return t._onFinishedMotion=e},this.getFinishedMotionHandler=function(){return t._onFinishedMotion},this._fadeInSeconds=-1,this._fadeOutSeconds=-1,this._weight=1,this._offsetSeconds=0,this._firedEventValues=new s.csmVector}return t.delete=function(t){t.release(),t=null},t.prototype.release=function(){this._weight=0},t.prototype.updateParameters=function(t,e,i){if(e.isAvailable()&&!e.isFinished()){if(!e.isStarted()){e.setIsStarted(!0),e.setStartTime(i-this._offsetSeconds),e.setFadeInStartTime(i);var r=this.getDuration();e.getEndTime()<0&&e.setEndTime(r<=0?-1:e.getStartTime()+r)}var n=this._weight;n=n*(0==this._fadeInSeconds?1:a.CubismMath.getEasingSine((i-e.getFadeInStartTime())/this._fadeInSeconds))*(0==this._fadeOutSeconds||e.getEndTime()<0?1:a.CubismMath.getEasingSine((e.getEndTime()-i)/this._fadeOutSeconds)),e.setState(i,n),(0,u.CSM_ASSERT)(0<=n&&n<=1),this.doUpdateParameters(t,i,n,e),e.getEndTime()>0&&e.getEndTime()<i&&e.setIsFinished(!0)}},t.prototype.setFadeInTime=function(t){this._fadeInSeconds=t},t.prototype.setFadeOutTime=function(t){this._fadeOutSeconds=t},t.prototype.getFadeOutTime=function(){return this._fadeOutSeconds},t.prototype.getFadeInTime=function(){return this._fadeInSeconds},t.prototype.setWeight=function(t){this._weight=t},t.prototype.getWeight=function(){return this._weight},t.prototype.getDuration=function(){return-1},t.prototype.getLoopDuration=function(){return-1},t.prototype.setOffsetTime=function(t){this._offsetSeconds=t},t.prototype.getFiredEvent=function(t,e){return this._firedEventValues},t}();e.ACubismMotion=l;var c=o(i(8855));(e.Live2DCubismFramework||(e.Live2DCubismFramework={})).ACubismMotion=c.ACubismMotion},6437:function(t,e,i){var r,n=this&&this.__extends||(r=function(t,e){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},r(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),o=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i);var n=Object.getOwnPropertyDescriptor(e,i);n&&!("get"in n?!e.__esModule:n.writable||n.configurable)||(n={enumerable:!0,get:function(){return e[i]}}),Object.defineProperty(t,r,n)}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),a=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&o(e,t,i);return a(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.ExpressionParameter=e.ExpressionBlendType=e.CubismExpressionMotion=void 0;var u,l=i(1671),c=i(5760),h=i(3706),p=i(8855),d="Parameters",g="Blend",_=function(t){function e(){var e=t.call(this)||this;return e._parameters=new c.csmVector,e}return n(e,t),e.create=function(t,i){var r=new e,n=h.CubismJson.create(t,i),o=n.getRoot();r.setFadeInTime(o.getValueByString("FadeInTime").toFloat(1)),r.setFadeOutTime(o.getValueByString("FadeOutTime").toFloat(1));var a=o.getValueByString(d).getSize();r._parameters.prepareCapacity(a);for(var s=0;s<a;++s){var c,p=o.getValueByString(d).getValueByIndex(s),_=l.CubismFramework.getIdManager().getId(p.getValueByString("Id").getRawString()),f=p.getValueByString("Value").toFloat();c=p.getValueByString(g).isNull()||"Add"==p.getValueByString(g).getString()?u.ExpressionBlendType_Add:"Multiply"==p.getValueByString(g).getString()?u.ExpressionBlendType_Multiply:"Overwrite"==p.getValueByString(g).getString()?u.ExpressionBlendType_Overwrite:u.ExpressionBlendType_Add;var y=new m;y.parameterId=_,y.blendType=c,y.value=f,r._parameters.pushBack(y)}return h.CubismJson.delete(n),r},e.prototype.doUpdateParameters=function(t,e,i,r){for(var n=0;n<this._parameters.getSize();++n){var o=this._parameters.at(n);switch(o.blendType){case u.ExpressionBlendType_Add:t.addParameterValueById(o.parameterId,o.value,i);break;case u.ExpressionBlendType_Multiply:t.multiplyParameterValueById(o.parameterId,o.value,i);break;case u.ExpressionBlendType_Overwrite:t.setParameterValueById(o.parameterId,o.value,i)}}},e}(p.ACubismMotion);e.CubismExpressionMotion=_,function(t){t[t.ExpressionBlendType_Add=0]="ExpressionBlendType_Add",t[t.ExpressionBlendType_Multiply=1]="ExpressionBlendType_Multiply",t[t.ExpressionBlendType_Overwrite=2]="ExpressionBlendType_Overwrite"}(u=e.ExpressionBlendType||(e.ExpressionBlendType={}));var m=function(){};e.ExpressionParameter=m;var f,y=s(i(6437));(f=e.Live2DCubismFramework||(e.Live2DCubismFramework={})).CubismExpressionMotion=y.CubismExpressionMotion,f.ExpressionBlendType=y.ExpressionBlendType,f.ExpressionParameter=y.ExpressionParameter},2916:function(t,e,i){var r,n=this&&this.__extends||(r=function(t,e){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},r(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),o=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i);var n=Object.getOwnPropertyDescriptor(e,i);n&&!("get"in n?!e.__esModule:n.writable||n.configurable)||(n={enumerable:!0,get:function(){return e[i]}}),Object.defineProperty(t,r,n)}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),a=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&o(e,t,i);return a(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.CubismMotion=void 0;var u=i(1671),l=i(6370),c=i(1695),h=i(1073),p=i(8855),d=i(924),g=i(6571);function _(t,e,i){var r=new d.CubismMotionPoint;return r.time=t.time+(e.time-t.time)*i,r.value=t.value+(e.value-t.value)*i,r}function m(t,e){var i=(e-t[0].time)/(t[1].time-t[0].time);return i<0&&(i=0),t[0].value+(t[1].value-t[0].value)*i}function f(t,e){var i=(e-t[0].time)/(t[3].time-t[0].time);i<0&&(i=0);var r=_(t[0],t[1],i),n=_(t[1],t[2],i),o=_(t[2],t[3],i),a=_(r,n,i),s=_(n,o,i);return _(a,s,i).value}function y(t,e){var i=e,r=t[0].time,n=t[3].time,o=t[1].time,a=t[2].time,s=n-3*a+3*o-r,u=3*a-6*o+3*r,c=3*o-3*r,h=r-i,p=l.CubismMath.cardanoAlgorithmForBezier(s,u,c,h),d=_(t[0],t[1],p),g=_(t[1],t[2],p),m=_(t[2],t[3],p),f=_(d,g,p),y=_(g,m,p);return _(f,y,p).value}function b(t,e){return t[0].value}function v(t,e){return t[1].value}function C(t,e,i){for(var r=t.curves.at(e),n=-1,o=r.baseSegmentIndex+r.segmentCount,a=0,s=r.baseSegmentIndex;s<o;++s)if(a=t.segments.at(s).basePointIndex+(t.segments.at(s).segmentType==d.CubismMotionSegmentType.CubismMotionSegmentType_Bezier?3:1),t.points.at(a).time>i){n=s;break}if(-1==n)return t.points.at(a).value;var u=t.segments.at(n);return u.evaluate(t.points.get(u.basePointIndex),i)}var S=function(t){function e(){var e=t.call(this)||this;return e._sourceFrameRate=30,e._loopDurationSeconds=-1,e._isLoop=!1,e._isLoopFadeIn=!0,e._lastWeight=0,e._motionData=null,e._modelCurveIdEyeBlink=null,e._modelCurveIdLipSync=null,e._eyeBlinkParameterIds=null,e._lipSyncParameterIds=null,e}return n(e,t),e.create=function(t,i,r){var n=new e;return n.parse(t,i),n._sourceFrameRate=n._motionData.fps,n._loopDurationSeconds=n._motionData.duration,n._onFinishedMotion=r,n},e.prototype.doUpdateParameters=function(t,e,i,r){null==this._modelCurveIdEyeBlink&&(this._modelCurveIdEyeBlink=u.CubismFramework.getIdManager().getId("EyeBlink")),null==this._modelCurveIdLipSync&&(this._modelCurveIdLipSync=u.CubismFramework.getIdManager().getId("LipSync"));var n=e-r.getStartTime();n<0&&(n=0);var o=Number.MAX_VALUE,a=Number.MAX_VALUE,s=64,c=0,p=0;this._eyeBlinkParameterIds.getSize()>s&&(0,h.CubismLogDebug)("too many eye blink targets : {0}",this._eyeBlinkParameterIds.getSize()),this._lipSyncParameterIds.getSize()>s&&(0,h.CubismLogDebug)("too many lip sync targets : {0}",this._lipSyncParameterIds.getSize());var g,_,m,f=this._fadeInSeconds<=0?1:l.CubismMath.getEasingSine((e-r.getFadeInStartTime())/this._fadeInSeconds),y=this._fadeOutSeconds<=0||r.getEndTime()<0?1:l.CubismMath.getEasingSine((r.getEndTime()-e)/this._fadeOutSeconds),b=n;if(this._isLoop)for(;b>this._motionData.duration;)b-=this._motionData.duration;var v=this._motionData.curves;for(_=0;_<this._motionData.curveCount&&v.at(_).type==d.CubismMotionCurveTarget.CubismMotionCurveTarget_Model;++_)g=C(this._motionData,_,b),v.at(_).id==this._modelCurveIdEyeBlink?a=g:v.at(_).id==this._modelCurveIdLipSync&&(o=g);for(;_<this._motionData.curveCount&&v.at(_).type==d.CubismMotionCurveTarget.CubismMotionCurveTarget_Parameter;++_)if(-1!=(m=t.getParameterIndex(v.at(_).id))){var S=t.getParameterValueByIndex(m);if(g=C(this._motionData,_,b),a!=Number.MAX_VALUE)for(var P=0;P<this._eyeBlinkParameterIds.getSize()&&P<s;++P)if(this._eyeBlinkParameterIds.at(P)==v.at(_).id){g*=a,p|=1<<P;break}if(o!=Number.MAX_VALUE)for(P=0;P<this._lipSyncParameterIds.getSize()&&P<s;++P)if(this._lipSyncParameterIds.at(P)==v.at(_).id){g+=o,c|=1<<P;break}var M=void 0;if(v.at(_).fadeInTime<0&&v.at(_).fadeOutTime<0)M=S+(g-S)*i;else{var x,w;x=v.at(_).fadeInTime<0?f:0==v.at(_).fadeInTime?1:l.CubismMath.getEasingSine((e-r.getFadeInStartTime())/v.at(_).fadeInTime),w=v.at(_).fadeOutTime<0?y:0==v.at(_).fadeOutTime||r.getEndTime()<0?1:l.CubismMath.getEasingSine((r.getEndTime()-e)/v.at(_).fadeOutTime),M=S+(g-S)*(this._weight*x*w)}t.setParameterValueByIndex(m,M,1)}if(a!=Number.MAX_VALUE)for(P=0;P<this._eyeBlinkParameterIds.getSize()&&P<s;++P)S=t.getParameterValueById(this._eyeBlinkParameterIds.at(P)),p>>P&1||(M=S+(a-S)*i,t.setParameterValueById(this._eyeBlinkParameterIds.at(P),M));if(o!=Number.MAX_VALUE)for(P=0;P<this._lipSyncParameterIds.getSize()&&P<s;++P)S=t.getParameterValueById(this._lipSyncParameterIds.at(P)),c>>P&1||(M=S+(o-S)*i,t.setParameterValueById(this._lipSyncParameterIds.at(P),M));for(;_<this._motionData.curveCount&&v.at(_).type==d.CubismMotionCurveTarget.CubismMotionCurveTarget_PartOpacity;++_)-1!=(m=t.getParameterIndex(v.at(_).id))&&(g=C(this._motionData,_,b),t.setParameterValueByIndex(m,g));n>=this._motionData.duration&&(this._isLoop?(r.setStartTime(e),this._isLoopFadeIn&&r.setFadeInStartTime(e)):(this._onFinishedMotion&&this._onFinishedMotion(this),r.setIsFinished(!0))),this._lastWeight=i},e.prototype.setIsLoop=function(t){this._isLoop=t},e.prototype.isLoop=function(){return this._isLoop},e.prototype.setIsLoopFadeIn=function(t){this._isLoopFadeIn=t},e.prototype.isLoopFadeIn=function(){return this._isLoopFadeIn},e.prototype.getDuration=function(){return this._isLoop?-1:this._loopDurationSeconds},e.prototype.getLoopDuration=function(){return this._loopDurationSeconds},e.prototype.setParameterFadeInTime=function(t,e){for(var i=this._motionData.curves,r=0;r<this._motionData.curveCount;++r)if(t==i.at(r).id)return void(i.at(r).fadeInTime=e)},e.prototype.setParameterFadeOutTime=function(t,e){for(var i=this._motionData.curves,r=0;r<this._motionData.curveCount;++r)if(t==i.at(r).id)return void(i.at(r).fadeOutTime=e)},e.prototype.getParameterFadeInTime=function(t){for(var e=this._motionData.curves,i=0;i<this._motionData.curveCount;++i)if(t==e.at(i).id)return e.at(i).fadeInTime;return-1},e.prototype.getParameterFadeOutTime=function(t){for(var e=this._motionData.curves,i=0;i<this._motionData.curveCount;++i)if(t==e.at(i).id)return e.at(i).fadeOutTime;return-1},e.prototype.setEffectIds=function(t,e){this._eyeBlinkParameterIds=t,this._lipSyncParameterIds=e},e.prototype.release=function(){this._motionData=void 0,this._motionData=null},e.prototype.parse=function(t,e){this._motionData=new d.CubismMotionData;var i=new g.CubismMotionJson(t,e);this._motionData.duration=i.getMotionDuration(),this._motionData.loop=i.isMotionLoop(),this._motionData.curveCount=i.getMotionCurveCount(),this._motionData.fps=i.getMotionFps(),this._motionData.eventCount=i.getEventCount();var r=i.getEvaluationOptionFlag(g.EvaluationOptionFlag.EvaluationOptionFlag_AreBeziersRistricted);i.isExistMotionFadeInTime()?this._fadeInSeconds=i.getMotionFadeInTime()<0?1:i.getMotionFadeInTime():this._fadeInSeconds=1,i.isExistMotionFadeOutTime()?this._fadeOutSeconds=i.getMotionFadeOutTime()<0?1:i.getMotionFadeOutTime():this._fadeOutSeconds=1,this._motionData.curves.updateSize(this._motionData.curveCount,d.CubismMotionCurve,!0),this._motionData.segments.updateSize(i.getMotionTotalSegmentCount(),d.CubismMotionSegment,!0),this._motionData.points.updateSize(i.getMotionTotalPointCount(),d.CubismMotionPoint,!0),this._motionData.events.updateSize(this._motionData.eventCount,d.CubismMotionEvent,!0);for(var n=0,o=0,a=0;a<this._motionData.curveCount;++a){"Model"==i.getMotionCurveTarget(a)?this._motionData.curves.at(a).type=d.CubismMotionCurveTarget.CubismMotionCurveTarget_Model:"Parameter"==i.getMotionCurveTarget(a)?this._motionData.curves.at(a).type=d.CubismMotionCurveTarget.CubismMotionCurveTarget_Parameter:"PartOpacity"==i.getMotionCurveTarget(a)?this._motionData.curves.at(a).type=d.CubismMotionCurveTarget.CubismMotionCurveTarget_PartOpacity:(0,h.CubismLogWarning)('Warning : Unable to get segment type from Curve! The number of "CurveCount" may be incorrect!'),this._motionData.curves.at(a).id=i.getMotionCurveId(a),this._motionData.curves.at(a).baseSegmentIndex=o,this._motionData.curves.at(a).fadeInTime=i.isExistMotionCurveFadeInTime(a)?i.getMotionCurveFadeInTime(a):-1,this._motionData.curves.at(a).fadeOutTime=i.isExistMotionCurveFadeOutTime(a)?i.getMotionCurveFadeOutTime(a):-1;for(var s=0;s<i.getMotionCurveSegmentCount(a);){switch(0==s?(this._motionData.segments.at(o).basePointIndex=n,this._motionData.points.at(n).time=i.getMotionCurveSegment(a,s),this._motionData.points.at(n).value=i.getMotionCurveSegment(a,s+1),n+=1,s+=2):this._motionData.segments.at(o).basePointIndex=n-1,i.getMotionCurveSegment(a,s)){case d.CubismMotionSegmentType.CubismMotionSegmentType_Linear:this._motionData.segments.at(o).segmentType=d.CubismMotionSegmentType.CubismMotionSegmentType_Linear,this._motionData.segments.at(o).evaluate=m,this._motionData.points.at(n).time=i.getMotionCurveSegment(a,s+1),this._motionData.points.at(n).value=i.getMotionCurveSegment(a,s+2),n+=1,s+=3;break;case d.CubismMotionSegmentType.CubismMotionSegmentType_Bezier:this._motionData.segments.at(o).segmentType=d.CubismMotionSegmentType.CubismMotionSegmentType_Bezier,this._motionData.segments.at(o).evaluate=r?f:y,this._motionData.points.at(n).time=i.getMotionCurveSegment(a,s+1),this._motionData.points.at(n).value=i.getMotionCurveSegment(a,s+2),this._motionData.points.at(n+1).time=i.getMotionCurveSegment(a,s+3),this._motionData.points.at(n+1).value=i.getMotionCurveSegment(a,s+4),this._motionData.points.at(n+2).time=i.getMotionCurveSegment(a,s+5),this._motionData.points.at(n+2).value=i.getMotionCurveSegment(a,s+6),n+=3,s+=7;break;case d.CubismMotionSegmentType.CubismMotionSegmentType_Stepped:this._motionData.segments.at(o).segmentType=d.CubismMotionSegmentType.CubismMotionSegmentType_Stepped,this._motionData.segments.at(o).evaluate=b,this._motionData.points.at(n).time=i.getMotionCurveSegment(a,s+1),this._motionData.points.at(n).value=i.getMotionCurveSegment(a,s+2),n+=1,s+=3;break;case d.CubismMotionSegmentType.CubismMotionSegmentType_InverseStepped:this._motionData.segments.at(o).segmentType=d.CubismMotionSegmentType.CubismMotionSegmentType_InverseStepped,this._motionData.segments.at(o).evaluate=v,this._motionData.points.at(n).time=i.getMotionCurveSegment(a,s+1),this._motionData.points.at(n).value=i.getMotionCurveSegment(a,s+2),n+=1,s+=3;break;default:(0,h.CSM_ASSERT)(0)}++this._motionData.curves.at(a).segmentCount,++o}}for(var u=0;u<i.getEventCount();++u)this._motionData.events.at(u).fireTime=i.getEventTime(u),this._motionData.events.at(u).value=i.getEventValue(u);i.release(),i=void 0,i=null},e.prototype.getFiredEvent=function(t,e){this._firedEventValues.updateSize(0);for(var i=0;i<this._motionData.eventCount;++i)this._motionData.events.at(i).fireTime>t&&this._motionData.events.at(i).fireTime<=e&&this._firedEventValues.pushBack(new c.csmString(this._motionData.events.at(i).value.s));return this._firedEventValues},e}(p.ACubismMotion);e.CubismMotion=S;var P=s(i(2916));(e.Live2DCubismFramework||(e.Live2DCubismFramework={})).CubismMotion=P.CubismMotion},924:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i);var n=Object.getOwnPropertyDescriptor(e,i);n&&!("get"in n?!e.__esModule:n.writable||n.configurable)||(n={enumerable:!0,get:function(){return e[i]}}),Object.defineProperty(t,r,n)}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.CubismMotionData=e.CubismMotionEvent=e.CubismMotionCurve=e.CubismMotionSegment=e.CubismMotionPoint=e.CubismMotionSegmentType=e.CubismMotionCurveTarget=void 0;var a,s,u=i(5760);!function(t){t[t.CubismMotionCurveTarget_Model=0]="CubismMotionCurveTarget_Model",t[t.CubismMotionCurveTarget_Parameter=1]="CubismMotionCurveTarget_Parameter",t[t.CubismMotionCurveTarget_PartOpacity=2]="CubismMotionCurveTarget_PartOpacity"}(a=e.CubismMotionCurveTarget||(e.CubismMotionCurveTarget={})),(s=e.CubismMotionSegmentType||(e.CubismMotionSegmentType={}))[s.CubismMotionSegmentType_Linear=0]="CubismMotionSegmentType_Linear",s[s.CubismMotionSegmentType_Bezier=1]="CubismMotionSegmentType_Bezier",s[s.CubismMotionSegmentType_Stepped=2]="CubismMotionSegmentType_Stepped",s[s.CubismMotionSegmentType_InverseStepped=3]="CubismMotionSegmentType_InverseStepped";e.CubismMotionPoint=function(){this.time=0,this.value=0};e.CubismMotionSegment=function(){this.evaluate=null,this.basePointIndex=0,this.segmentType=0};e.CubismMotionCurve=function(){this.type=a.CubismMotionCurveTarget_Model,this.segmentCount=0,this.baseSegmentIndex=0,this.fadeInTime=0,this.fadeOutTime=0};e.CubismMotionEvent=function(){this.fireTime=0};e.CubismMotionData=function(){this.duration=0,this.loop=!1,this.curveCount=0,this.eventCount=0,this.fps=0,this.curves=new u.csmVector,this.segments=new u.csmVector,this.points=new u.csmVector,this.events=new u.csmVector};var l,c=o(i(924));(l=e.Live2DCubismFramework||(e.Live2DCubismFramework={})).CubismMotionCurve=c.CubismMotionCurve,l.CubismMotionCurveTarget=c.CubismMotionCurveTarget,l.CubismMotionData=c.CubismMotionData,l.CubismMotionEvent=c.CubismMotionEvent,l.CubismMotionPoint=c.CubismMotionPoint,l.CubismMotionSegment=c.CubismMotionSegment,l.CubismMotionSegmentType=c.CubismMotionSegmentType},6571:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i);var n=Object.getOwnPropertyDescriptor(e,i);n&&!("get"in n?!e.__esModule:n.writable||n.configurable)||(n={enumerable:!0,get:function(){return e[i]}}),Object.defineProperty(t,r,n)}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.EvaluationOptionFlag=e.CubismMotionJson=void 0;var a,s=i(1671),u=i(1695),l=i(3706),c="Meta",h="Curves",p="FadeInTime",d="FadeOutTime",g="Segments",_="UserData",m=function(){function t(t,e){this._json=l.CubismJson.create(t,e)}return t.prototype.release=function(){l.CubismJson.delete(this._json)},t.prototype.getMotionDuration=function(){return this._json.getRoot().getValueByString(c).getValueByString("Duration").toFloat()},t.prototype.isMotionLoop=function(){return this._json.getRoot().getValueByString(c).getValueByString("Loop").toBoolean()},t.prototype.getEvaluationOptionFlag=function(t){return a.EvaluationOptionFlag_AreBeziersRistricted==t&&this._json.getRoot().getValueByString(c).getValueByString("AreBeziersRestricted").toBoolean()},t.prototype.getMotionCurveCount=function(){return this._json.getRoot().getValueByString(c).getValueByString("CurveCount").toInt()},t.prototype.getMotionFps=function(){return this._json.getRoot().getValueByString(c).getValueByString("Fps").toFloat()},t.prototype.getMotionTotalSegmentCount=function(){return this._json.getRoot().getValueByString(c).getValueByString("TotalSegmentCount").toInt()},t.prototype.getMotionTotalPointCount=function(){return this._json.getRoot().getValueByString(c).getValueByString("TotalPointCount").toInt()},t.prototype.isExistMotionFadeInTime=function(){return!this._json.getRoot().getValueByString(c).getValueByString(p).isNull()},t.prototype.isExistMotionFadeOutTime=function(){return!this._json.getRoot().getValueByString(c).getValueByString(d).isNull()},t.prototype.getMotionFadeInTime=function(){return this._json.getRoot().getValueByString(c).getValueByString(p).toFloat()},t.prototype.getMotionFadeOutTime=function(){return this._json.getRoot().getValueByString(c).getValueByString(d).toFloat()},t.prototype.getMotionCurveTarget=function(t){return this._json.getRoot().getValueByString(h).getValueByIndex(t).getValueByString("Target").getRawString()},t.prototype.getMotionCurveId=function(t){return s.CubismFramework.getIdManager().getId(this._json.getRoot().getValueByString(h).getValueByIndex(t).getValueByString("Id").getRawString())},t.prototype.isExistMotionCurveFadeInTime=function(t){return!this._json.getRoot().getValueByString(h).getValueByIndex(t).getValueByString(p).isNull()},t.prototype.isExistMotionCurveFadeOutTime=function(t){return!this._json.getRoot().getValueByString(h).getValueByIndex(t).getValueByString(d).isNull()},t.prototype.getMotionCurveFadeInTime=function(t){return this._json.getRoot().getValueByString(h).getValueByIndex(t).getValueByString(p).toFloat()},t.prototype.getMotionCurveFadeOutTime=function(t){return this._json.getRoot().getValueByString(h).getValueByIndex(t).getValueByString(d).toFloat()},t.prototype.getMotionCurveSegmentCount=function(t){return this._json.getRoot().getValueByString(h).getValueByIndex(t).getValueByString(g).getVector().getSize()},t.prototype.getMotionCurveSegment=function(t,e){return this._json.getRoot().getValueByString(h).getValueByIndex(t).getValueByString(g).getValueByIndex(e).toFloat()},t.prototype.getEventCount=function(){return this._json.getRoot().getValueByString(c).getValueByString("UserDataCount").toInt()},t.prototype.getTotalEventValueSize=function(){return this._json.getRoot().getValueByString(c).getValueByString("TotalUserDataSize").toInt()},t.prototype.getEventTime=function(t){return this._json.getRoot().getValueByString(_).getValueByIndex(t).getValueByString("Time").toFloat()},t.prototype.getEventValue=function(t){return new u.csmString(this._json.getRoot().getValueByString(_).getValueByIndex(t).getValueByString("Value").getRawString())},t}();e.CubismMotionJson=m,function(t){t[t.EvaluationOptionFlag_AreBeziersRistricted=0]="EvaluationOptionFlag_AreBeziersRistricted"}(a=e.EvaluationOptionFlag||(e.EvaluationOptionFlag={}));var f=o(i(6571));(e.Live2DCubismFramework||(e.Live2DCubismFramework={})).CubismMotionJson=f.CubismMotionJson},9296:function(t,e,i){var r,n=this&&this.__extends||(r=function(t,e){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},r(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),o=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i);var n=Object.getOwnPropertyDescriptor(e,i);n&&!("get"in n?!e.__esModule:n.writable||n.configurable)||(n={enumerable:!0,get:function(){return e[i]}}),Object.defineProperty(t,r,n)}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),a=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&o(e,t,i);return a(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.CubismMotionManager=void 0;var u=function(t){function e(){var e=t.call(this)||this;return e._currentPriority=0,e._reservePriority=0,e}return n(e,t),e.prototype.getCurrentPriority=function(){return this._currentPriority},e.prototype.getReservePriority=function(){return this._reservePriority},e.prototype.setReservePriority=function(t){this._reservePriority=t},e.prototype.startMotionPriority=function(e,i,r){return r==this._reservePriority&&(this._reservePriority=0),this._currentPriority=r,t.prototype.startMotion.call(this,e,i,this._userTimeSeconds)},e.prototype.updateMotion=function(e,i){this._userTimeSeconds+=i;var r=t.prototype.doUpdateMotion.call(this,e,this._userTimeSeconds);return this.isFinished()&&(this._currentPriority=0),r},e.prototype.reserveMotion=function(t){return!(t<=this._reservePriority||t<=this._currentPriority||(this._reservePriority=t,0))},e}(i(2928).CubismMotionQueueManager);e.CubismMotionManager=u;var l=s(i(9296));(e.Live2DCubismFramework||(e.Live2DCubismFramework={})).CubismMotionManager=l.CubismMotionManager},7219:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i);var n=Object.getOwnPropertyDescriptor(e,i);n&&!("get"in n?!e.__esModule:n.writable||n.configurable)||(n={enumerable:!0,get:function(){return e[i]}}),Object.defineProperty(t,r,n)}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.CubismMotionQueueEntry=void 0;var a=i(8855),s=function(){function t(){this._autoDelete=!1,this._motion=null,this._available=!0,this._finished=!1,this._started=!1,this._startTimeSeconds=-1,this._fadeInStartTimeSeconds=0,this._endTimeSeconds=-1,this._stateTimeSeconds=0,this._stateWeight=0,this._lastEventCheckSeconds=0,this._motionQueueEntryHandle=this,this._fadeOutSeconds=0,this._isTriggeredFadeOut=!1}return t.prototype.release=function(){this._autoDelete&&this._motion&&a.ACubismMotion.delete(this._motion)},t.prototype.setFadeOut=function(t){this._fadeOutSeconds=t,this._isTriggeredFadeOut=!0},t.prototype.startFadeOut=function(t,e){var i=e+t;this._isTriggeredFadeOut=!0,(this._endTimeSeconds<0||i<this._endTimeSeconds)&&(this._endTimeSeconds=i)},t.prototype.isFinished=function(){return this._finished},t.prototype.isStarted=function(){return this._started},t.prototype.getStartTime=function(){return this._startTimeSeconds},t.prototype.getFadeInStartTime=function(){return this._fadeInStartTimeSeconds},t.prototype.getEndTime=function(){return this._endTimeSeconds},t.prototype.setStartTime=function(t){this._startTimeSeconds=t},t.prototype.setFadeInStartTime=function(t){this._fadeInStartTimeSeconds=t},t.prototype.setEndTime=function(t){this._endTimeSeconds=t},t.prototype.setIsFinished=function(t){this._finished=t},t.prototype.setIsStarted=function(t){this._started=t},t.prototype.isAvailable=function(){return this._available},t.prototype.setIsAvailable=function(t){this._available=t},t.prototype.setState=function(t,e){this._stateTimeSeconds=t,this._stateWeight=e},t.prototype.getStateTime=function(){return this._stateTimeSeconds},t.prototype.getStateWeight=function(){return this._stateWeight},t.prototype.getLastCheckEventSeconds=function(){return this._lastEventCheckSeconds},t.prototype.setLastCheckEventSeconds=function(t){this._lastEventCheckSeconds=t},t.prototype.isTriggeredFadeOut=function(){return this._isTriggeredFadeOut},t.prototype.getFadeOutSeconds=function(){return this._fadeOutSeconds},t}();e.CubismMotionQueueEntry=s;var u=o(i(7219));(e.Live2DCubismFramework||(e.Live2DCubismFramework={})).CubismMotionQueueEntry=u.CubismMotionQueueEntry},2928:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i);var n=Object.getOwnPropertyDescriptor(e,i);n&&!("get"in n?!e.__esModule:n.writable||n.configurable)||(n={enumerable:!0,get:function(){return e[i]}}),Object.defineProperty(t,r,n)}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.InvalidMotionQueueEntryHandleValue=e.CubismMotionQueueManager=void 0;var a=i(7219),s=i(5760),u=function(){function t(){this._userTimeSeconds=0,this._eventCallBack=null,this._eventCustomData=null,this._motions=new s.csmVector}return t.prototype.release=function(){for(var t=0;t<this._motions.getSize();++t)this._motions.at(t)&&(this._motions.at(t).release(),this._motions.set(t,null));this._motions=null},t.prototype.startMotion=function(t,i,r){if(null==t)return e.InvalidMotionQueueEntryHandleValue;for(var n=null,o=0;o<this._motions.getSize();++o)null!=(n=this._motions.at(o))&&n.setFadeOut(n._motion.getFadeOutTime());return(n=new a.CubismMotionQueueEntry)._autoDelete=i,n._motion=t,this._motions.pushBack(n),n._motionQueueEntryHandle},t.prototype.isFinished=function(){for(var t=this._motions.begin();t.notEqual(this._motions.end());){var e=t.ptr();if(null!=e)if(null!=e._motion){if(!e.isFinished())return!1;t.preIncrement()}else e.release(),e=null,t=this._motions.erase(t);else t=this._motions.erase(t)}return!0},t.prototype.isFinishedByHandle=function(t){for(var e=this._motions.begin();e.notEqual(this._motions.end());e.increment()){var i=e.ptr();if(null!=i&&i._motionQueueEntryHandle==t&&!i.isFinished())return!1}return!0},t.prototype.stopAllMotions=function(){for(var t=this._motions.begin();t.notEqual(this._motions.end());){var e=t.ptr();null!=e?(e.release(),e=null,t=this._motions.erase(t)):t=this._motions.erase(t)}},t.prototype.getCubismMotionQueueEntry=function(t){for(var e=this._motions.begin();e.notEqual(this._motions.end());e.preIncrement()){var i=e.ptr();if(null!=i&&i._motionQueueEntryHandle==t)return i}return null},t.prototype.setEventCallback=function(t,e){void 0===e&&(e=null),this._eventCallBack=t,this._eventCustomData=e},t.prototype.doUpdateMotion=function(t,e){for(var i=!1,r=this._motions.begin();r.notEqual(this._motions.end());){var n=r.ptr();if(null!=n){var o=n._motion;if(null!=o){o.updateParameters(t,n,e),i=!0;for(var a=o.getFiredEvent(n.getLastCheckEventSeconds()-n.getStartTime(),e-n.getStartTime()),s=0;s<a.getSize();++s)this._eventCallBack(this,a.at(s),this._eventCustomData);n.setLastCheckEventSeconds(e),n.isFinished()?(n.release(),n=null,r=this._motions.erase(r)):(n.isTriggeredFadeOut()&&n.startFadeOut(n.getFadeOutSeconds(),e),r.preIncrement())}else n.release(),n=null,r=this._motions.erase(r)}else r=this._motions.erase(r)}return i},t}();e.CubismMotionQueueManager=u,e.InvalidMotionQueueEntryHandleValue=-1;var l,c=o(i(2928));(l=e.Live2DCubismFramework||(e.Live2DCubismFramework={})).CubismMotionQueueManager=c.CubismMotionQueueManager,l.InvalidMotionQueueEntryHandleValue=c.InvalidMotionQueueEntryHandleValue},3039:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i);var n=Object.getOwnPropertyDescriptor(e,i);n&&!("get"in n?!e.__esModule:n.writable||n.configurable)||(n={enumerable:!0,get:function(){return e[i]}}),Object.defineProperty(t,r,n)}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.Options=e.CubismPhysics=void 0;var a=i(6370),s=i(2376),u=i(6658),l=i(6286),c="Angle",h=function(){function t(){this._physicsRig=null,this._options=new p,this._options.gravity.y=-1,this._options.gravity.x=0,this._options.wind.x=0,this._options.wind.y=0}return t.create=function(e,i){var r=new t;return r.parse(e,i),r._physicsRig.gravity.y=0,r},t.delete=function(t){null!=t&&(t.release(),t=null)},t.prototype.evaluate=function(t,e){var i,r,n,o,u,l,c,h,p,d,g,_,m=new s.CubismVector2;p=t.getModel().parameters.values,d=t.getModel().parameters.maximumValues,g=t.getModel().parameters.minimumValues,_=t.getModel().parameters.defaultValues;for(var f=0;f<this._physicsRig.subRigCount;++f){i={angle:0},m.x=0,m.y=0,u=this._physicsRig.settings.at(f),l=this._physicsRig.inputs.get(u.baseInputIndex),c=this._physicsRig.outputs.get(u.baseOutputIndex),h=this._physicsRig.particles.get(u.baseParticleIndex);for(var y=0;y<u.inputCount;++y)r=l[y].weight/100,-1==l[y].sourceParameterIndex&&(l[y].sourceParameterIndex=t.getParameterIndex(l[y].source.id)),l[y].getNormalizedParameterValue(m,i,p[l[y].sourceParameterIndex],g[l[y].sourceParameterIndex],d[l[y].sourceParameterIndex],_[l[y].sourceParameterIndex],u.normalizationPosition,u.normalizationAngle,l[y].reflect,r);for(n=a.CubismMath.degreesToRadian(-i.angle),m.x=m.x*a.CubismMath.cos(n)-m.y*a.CubismMath.sin(n),m.y=m.x*a.CubismMath.sin(n)+m.y*a.CubismMath.cos(n),S(h,u.particleCount,m,i.angle,this._options.wind,.001*u.normalizationPosition.maximum,e,5),y=0;y<u.outputCount;++y){var b=c[y].vertexIndex;if(b<1||b>=u.particleCount)break;-1==c[y].destinationParameterIndex&&(c[y].destinationParameterIndex=t.getParameterIndex(c[y].destination.id));var v=new s.CubismVector2;v.x=h[b].position.x-h[b-1].position.x,v.y=h[b].position.y-h[b-1].position.y,o=c[y].getValue(v,h,b,c[y].reflect,this._options.gravity);var C=c[y].destinationParameterIndex,M=!Float32Array.prototype.slice&&"subarray"in Float32Array.prototype?JSON.parse(JSON.stringify(p.subarray(C))):p.slice(C);P(M,g[C],d[C],o,c[y]);for(var x=C,w=0;x<p.length;x++,w++)p[x]=M[w]}}},t.prototype.setOptions=function(t){this._options=t},t.prototype.getOption=function(){return this._options},t.prototype.release=function(){this._physicsRig=void 0,this._physicsRig=null},t.prototype.parse=function(t,e){this._physicsRig=new u.CubismPhysicsRig;var i=new l.CubismPhysicsJson(t,e);this._physicsRig.gravity=i.getGravity(),this._physicsRig.wind=i.getWind(),this._physicsRig.subRigCount=i.getSubRigCount(),this._physicsRig.settings.updateSize(this._physicsRig.subRigCount,u.CubismPhysicsSubRig,!0),this._physicsRig.inputs.updateSize(i.getTotalInputCount(),u.CubismPhysicsInput,!0),this._physicsRig.outputs.updateSize(i.getTotalOutputCount(),u.CubismPhysicsOutput,!0),this._physicsRig.particles.updateSize(i.getVertexCount(),u.CubismPhysicsParticle,!0);for(var r=0,n=0,o=0,a=0;a<this._physicsRig.settings.getSize();++a){this._physicsRig.settings.at(a).normalizationPosition.minimum=i.getNormalizationPositionMinimumValue(a),this._physicsRig.settings.at(a).normalizationPosition.maximum=i.getNormalizationPositionMaximumValue(a),this._physicsRig.settings.at(a).normalizationPosition.defalut=i.getNormalizationPositionDefaultValue(a),this._physicsRig.settings.at(a).normalizationAngle.minimum=i.getNormalizationAngleMinimumValue(a),this._physicsRig.settings.at(a).normalizationAngle.maximum=i.getNormalizationAngleMaximumValue(a),this._physicsRig.settings.at(a).normalizationAngle.defalut=i.getNormalizationAngleDefaultValue(a),this._physicsRig.settings.at(a).inputCount=i.getInputCount(a),this._physicsRig.settings.at(a).baseInputIndex=r;for(var s=0;s<this._physicsRig.settings.at(a).inputCount;++s)this._physicsRig.inputs.at(r+s).sourceParameterIndex=-1,this._physicsRig.inputs.at(r+s).weight=i.getInputWeight(a,s),this._physicsRig.inputs.at(r+s).reflect=i.getInputReflect(a,s),"X"==i.getInputType(a,s)?(this._physicsRig.inputs.at(r+s).type=u.CubismPhysicsSource.CubismPhysicsSource_X,this._physicsRig.inputs.at(r+s).getNormalizedParameterValue=d):"Y"==i.getInputType(a,s)?(this._physicsRig.inputs.at(r+s).type=u.CubismPhysicsSource.CubismPhysicsSource_Y,this._physicsRig.inputs.at(r+s).getNormalizedParameterValue=g):i.getInputType(a,s)==c&&(this._physicsRig.inputs.at(r+s).type=u.CubismPhysicsSource.CubismPhysicsSource_Angle,this._physicsRig.inputs.at(r+s).getNormalizedParameterValue=_),this._physicsRig.inputs.at(r+s).source.targetType=u.CubismPhysicsTargetType.CubismPhysicsTargetType_Parameter,this._physicsRig.inputs.at(r+s).source.id=i.getInputSourceId(a,s);for(r+=this._physicsRig.settings.at(a).inputCount,this._physicsRig.settings.at(a).outputCount=i.getOutputCount(a),this._physicsRig.settings.at(a).baseOutputIndex=n,s=0;s<this._physicsRig.settings.at(a).outputCount;++s)this._physicsRig.outputs.at(n+s).destinationParameterIndex=-1,this._physicsRig.outputs.at(n+s).vertexIndex=i.getOutputVertexIndex(a,s),this._physicsRig.outputs.at(n+s).angleScale=i.getOutputAngleScale(a,s),this._physicsRig.outputs.at(n+s).weight=i.getOutputWeight(a,s),this._physicsRig.outputs.at(n+s).destination.targetType=u.CubismPhysicsTargetType.CubismPhysicsTargetType_Parameter,this._physicsRig.outputs.at(n+s).destination.id=i.getOutputDestinationId(a,s),"X"==i.getOutputType(a,s)?(this._physicsRig.outputs.at(n+s).type=u.CubismPhysicsSource.CubismPhysicsSource_X,this._physicsRig.outputs.at(n+s).getValue=m,this._physicsRig.outputs.at(n+s).getScale=b):"Y"==i.getOutputType(a,s)?(this._physicsRig.outputs.at(n+s).type=u.CubismPhysicsSource.CubismPhysicsSource_Y,this._physicsRig.outputs.at(n+s).getValue=f,this._physicsRig.outputs.at(n+s).getScale=v):i.getOutputType(a,s)==c&&(this._physicsRig.outputs.at(n+s).type=u.CubismPhysicsSource.CubismPhysicsSource_Angle,this._physicsRig.outputs.at(n+s).getValue=y,this._physicsRig.outputs.at(n+s).getScale=C),this._physicsRig.outputs.at(n+s).reflect=i.getOutputReflect(a,s);for(n+=this._physicsRig.settings.at(a).outputCount,this._physicsRig.settings.at(a).particleCount=i.getParticleCount(a),this._physicsRig.settings.at(a).baseParticleIndex=o,s=0;s<this._physicsRig.settings.at(a).particleCount;++s)this._physicsRig.particles.at(o+s).mobility=i.getParticleMobility(a,s),this._physicsRig.particles.at(o+s).delay=i.getParticleDelay(a,s),this._physicsRig.particles.at(o+s).acceleration=i.getParticleAcceleration(a,s),this._physicsRig.particles.at(o+s).radius=i.getParticleRadius(a,s),this._physicsRig.particles.at(o+s).position=i.getParticlePosition(a,s);o+=this._physicsRig.settings.at(a).particleCount}this.initialize(),i.release(),i=void 0,i=null},t.prototype.initialize=function(){for(var t,e,i,r=0;r<this._physicsRig.subRigCount;++r){e=this._physicsRig.settings.at(r),(t=this._physicsRig.particles.get(e.baseParticleIndex))[0].initialPosition=new s.CubismVector2(0,0),t[0].lastPosition=new s.CubismVector2(t[0].initialPosition.x,t[0].initialPosition.y),t[0].lastGravity=new s.CubismVector2(0,-1),t[0].lastGravity.y*=-1,t[0].velocity=new s.CubismVector2(0,0),t[0].force=new s.CubismVector2(0,0);for(var n=1;n<e.particleCount;++n)(i=new s.CubismVector2(0,0)).y=t[n].radius,t[n].initialPosition=new s.CubismVector2(t[n-1].initialPosition.x+i.x,t[n-1].initialPosition.y+i.y),t[n].position=new s.CubismVector2(t[n].initialPosition.x,t[n].initialPosition.y),t[n].lastPosition=new s.CubismVector2(t[n].initialPosition.x,t[n].initialPosition.y),t[n].lastGravity=new s.CubismVector2(0,-1),t[n].lastGravity.y*=-1,t[n].velocity=new s.CubismVector2(0,0),t[n].force=new s.CubismVector2(0,0)}},t}();e.CubismPhysics=h;var p=function(){this.gravity=new s.CubismVector2(0,0),this.wind=new s.CubismVector2(0,0)};function d(t,e,i,r,n,o,a,s,u,l){t.x+=M(i,r,n,0,a.minimum,a.maximum,a.defalut,u)*l}function g(t,e,i,r,n,o,a,s,u,l){t.y+=M(i,r,n,0,a.minimum,a.maximum,a.defalut,u)*l}function _(t,e,i,r,n,o,a,s,u,l){e.angle+=M(i,r,n,0,s.minimum,s.maximum,s.defalut,u)*l}function m(t,e,i,r,n){var o=t.x;return r&&(o*=-1),o}function f(t,e,i,r,n){var o=t.y;return r&&(o*=-1),o}function y(t,e,i,r,n){var o;return n=i>=2?e[i-1].position.substract(e[i-2].position):n.multiplyByScaler(-1),o=a.CubismMath.directionToRadian(n,t),r&&(o*=-1),o}function b(t,e){return JSON.parse(JSON.stringify(t.x))}function v(t,e){return JSON.parse(JSON.stringify(t.y))}function C(t,e){return JSON.parse(JSON.stringify(e))}function S(t,e,i,r,n,o,u,l){var c,h,p,d,g=new s.CubismVector2(0,0),_=new s.CubismVector2(0,0),m=new s.CubismVector2(0,0),f=new s.CubismVector2(0,0);t[0].position=new s.CubismVector2(i.x,i.y),c=a.CubismMath.degreesToRadian(r),(d=a.CubismMath.radianToDirection(c)).normalize();for(var y=1;y<e;++y)t[y].force=d.multiplyByScaler(t[y].acceleration).add(n),t[y].lastPosition=new s.CubismVector2(t[y].position.x,t[y].position.y),h=t[y].delay*u*30,g=t[y].position.substract(t[y-1].position),p=a.CubismMath.directionToRadian(t[y].lastGravity,d)/l,g.x=a.CubismMath.cos(p)*g.x-g.y*a.CubismMath.sin(p),g.y=a.CubismMath.sin(p)*g.x+g.y*a.CubismMath.cos(p),t[y].position=t[y-1].position.add(g),_=t[y].velocity.multiplyByScaler(h),m=t[y].force.multiplyByScaler(h).multiplyByScaler(h),t[y].position=t[y].position.add(_).add(m),(f=t[y].position.substract(t[y-1].position)).normalize(),t[y].position=t[y-1].position.add(f.multiplyByScaler(t[y].radius)),a.CubismMath.abs(t[y].position.x)<o&&(t[y].position.x=0),0!=h&&(t[y].velocity=t[y].position.substract(t[y].lastPosition),t[y].velocity=t[y].velocity.divisionByScalar(h),t[y].velocity=t[y].velocity.multiplyByScaler(t[y].mobility)),t[y].force=new s.CubismVector2(0,0),t[y].lastGravity=new s.CubismVector2(d.x,d.y)}function P(t,e,i,r,n){var o,a;(o=r*n.getScale(n.translationScale,n.angleScale))<e?(o<n.valueBelowMinimum&&(n.valueBelowMinimum=o),o=e):o>i&&(o>n.valueExceededMaximum&&(n.valueExceededMaximum=o),o=i),(a=n.weight/100)>=1||(o=t[0]*(1-a)+o*a),t[0]=o}function M(t,e,i,r,n,o,s,u){var l=0,c=a.CubismMath.max(i,e);c<t&&(t=c);var h=a.CubismMath.min(i,e);h>t&&(t=h);var p,d,g=a.CubismMath.min(n,o),_=a.CubismMath.max(n,o),m=s,f=(p=h,d=c,a.CubismMath.min(p,d)+function(t,e){var i=a.CubismMath.max(t,e),r=a.CubismMath.min(t,e);return a.CubismMath.abs(i-r)}(p,d)/2),y=t-f;switch(function(t){var e=0;return t>0?e=1:t<0&&(e=-1),e}(y)){case 1:var b=_-m;0!=(v=c-f)&&(l=y*(b/v),l+=m);break;case-1:var v;b=g-m,0!=(v=h-f)&&(l=y*(b/v),l+=m);break;case 0:l=m}return u?l:-1*l}e.Options=p;var x,w=o(i(3039));(x=e.Live2DCubismFramework||(e.Live2DCubismFramework={})).CubismPhysics=w.CubismPhysics,x.Options=w.Options},6658:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i);var n=Object.getOwnPropertyDescriptor(e,i);n&&!("get"in n?!e.__esModule:n.writable||n.configurable)||(n={enumerable:!0,get:function(){return e[i]}}),Object.defineProperty(t,r,n)}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.CubismPhysicsRig=e.CubismPhysicsOutput=e.CubismPhysicsInput=e.CubismPhysicsSubRig=e.CubismPhysicsParticle=e.CubismPhysicsNormalization=e.CubismPhysicsParameter=e.PhysicsJsonEffectiveForces=e.CubismPhysicsSource=e.CubismPhysicsTargetType=void 0;var a,s,u=i(2376),l=i(5760);(s=e.CubismPhysicsTargetType||(e.CubismPhysicsTargetType={}))[s.CubismPhysicsTargetType_Parameter=0]="CubismPhysicsTargetType_Parameter",(a=e.CubismPhysicsSource||(e.CubismPhysicsSource={}))[a.CubismPhysicsSource_X=0]="CubismPhysicsSource_X",a[a.CubismPhysicsSource_Y=1]="CubismPhysicsSource_Y",a[a.CubismPhysicsSource_Angle=2]="CubismPhysicsSource_Angle";e.PhysicsJsonEffectiveForces=function(){this.gravity=new u.CubismVector2(0,0),this.wind=new u.CubismVector2(0,0)};var c=function(){};e.CubismPhysicsParameter=c;var h=function(){};e.CubismPhysicsNormalization=h;e.CubismPhysicsParticle=function(){this.initialPosition=new u.CubismVector2(0,0),this.position=new u.CubismVector2(0,0),this.lastPosition=new u.CubismVector2(0,0),this.lastGravity=new u.CubismVector2(0,0),this.force=new u.CubismVector2(0,0),this.velocity=new u.CubismVector2(0,0)};e.CubismPhysicsSubRig=function(){this.normalizationPosition=new h,this.normalizationAngle=new h};e.CubismPhysicsInput=function(){this.source=new c};e.CubismPhysicsOutput=function(){this.destination=new c,this.translationScale=new u.CubismVector2(0,0)};e.CubismPhysicsRig=function(){this.settings=new l.csmVector,this.inputs=new l.csmVector,this.outputs=new l.csmVector,this.particles=new l.csmVector,this.gravity=new u.CubismVector2(0,0),this.wind=new u.CubismVector2(0,0)};var p,d=o(i(6658));(p=e.Live2DCubismFramework||(e.Live2DCubismFramework={})).CubismPhysicsInput=d.CubismPhysicsInput,p.CubismPhysicsNormalization=d.CubismPhysicsNormalization,p.CubismPhysicsOutput=d.CubismPhysicsOutput,p.CubismPhysicsParameter=d.CubismPhysicsParameter,p.CubismPhysicsParticle=d.CubismPhysicsParticle,p.CubismPhysicsRig=d.CubismPhysicsRig,p.CubismPhysicsSource=d.CubismPhysicsSource,p.CubismPhysicsSubRig=d.CubismPhysicsSubRig,p.CubismPhysicsTargetType=d.CubismPhysicsTargetType,p.PhysicsJsonEffectiveForces=d.PhysicsJsonEffectiveForces},6286:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i);var n=Object.getOwnPropertyDescriptor(e,i);n&&!("get"in n?!e.__esModule:n.writable||n.configurable)||(n={enumerable:!0,get:function(){return e[i]}}),Object.defineProperty(t,r,n)}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.CubismPhysicsJson=void 0;var a=i(1671),s=i(2376),u=i(3706),l="Position",c="Angle",h="Type",p="Meta",d="EffectiveForces",g="Gravity",_="Wind",m="PhysicsSettings",f="Normalization",y="Minimum",b="Maximum",v="Default",C="Reflect",S="Weight",P="Input",M="Output",x="Vertices",w=function(){function t(t,e){this._json=u.CubismJson.create(t,e)}return t.prototype.release=function(){u.CubismJson.delete(this._json)},t.prototype.getGravity=function(){var t=new s.CubismVector2(0,0);return t.x=this._json.getRoot().getValueByString(p).getValueByString(d).getValueByString(g).getValueByString("X").toFloat(),t.y=this._json.getRoot().getValueByString(p).getValueByString(d).getValueByString(g).getValueByString("Y").toFloat(),t},t.prototype.getWind=function(){var t=new s.CubismVector2(0,0);return t.x=this._json.getRoot().getValueByString(p).getValueByString(d).getValueByString(_).getValueByString("X").toFloat(),t.y=this._json.getRoot().getValueByString(p).getValueByString(d).getValueByString(_).getValueByString("Y").toFloat(),t},t.prototype.getSubRigCount=function(){return this._json.getRoot().getValueByString(p).getValueByString("PhysicsSettingCount").toInt()},t.prototype.getTotalInputCount=function(){return this._json.getRoot().getValueByString(p).getValueByString("TotalInputCount").toInt()},t.prototype.getTotalOutputCount=function(){return this._json.getRoot().getValueByString(p).getValueByString("TotalOutputCount").toInt()},t.prototype.getVertexCount=function(){return this._json.getRoot().getValueByString(p).getValueByString("VertexCount").toInt()},t.prototype.getNormalizationPositionMinimumValue=function(t){return this._json.getRoot().getValueByString(m).getValueByIndex(t).getValueByString(f).getValueByString(l).getValueByString(y).toFloat()},t.prototype.getNormalizationPositionMaximumValue=function(t){return this._json.getRoot().getValueByString(m).getValueByIndex(t).getValueByString(f).getValueByString(l).getValueByString(b).toFloat()},t.prototype.getNormalizationPositionDefaultValue=function(t){return this._json.getRoot().getValueByString(m).getValueByIndex(t).getValueByString(f).getValueByString(l).getValueByString(v).toFloat()},t.prototype.getNormalizationAngleMinimumValue=function(t){return this._json.getRoot().getValueByString(m).getValueByIndex(t).getValueByString(f).getValueByString(c).getValueByString(y).toFloat()},t.prototype.getNormalizationAngleMaximumValue=function(t){return this._json.getRoot().getValueByString(m).getValueByIndex(t).getValueByString(f).getValueByString(c).getValueByString(b).toFloat()},t.prototype.getNormalizationAngleDefaultValue=function(t){return this._json.getRoot().getValueByString(m).getValueByIndex(t).getValueByString(f).getValueByString(c).getValueByString(v).toFloat()},t.prototype.getInputCount=function(t){return this._json.getRoot().getValueByString(m).getValueByIndex(t).getValueByString(P).getVector().getSize()},t.prototype.getInputWeight=function(t,e){return this._json.getRoot().getValueByString(m).getValueByIndex(t).getValueByString(P).getValueByIndex(e).getValueByString(S).toFloat()},t.prototype.getInputReflect=function(t,e){return this._json.getRoot().getValueByString(m).getValueByIndex(t).getValueByString(P).getValueByIndex(e).getValueByString(C).toBoolean()},t.prototype.getInputType=function(t,e){return this._json.getRoot().getValueByString(m).getValueByIndex(t).getValueByString(P).getValueByIndex(e).getValueByString(h).getRawString()},t.prototype.getInputSourceId=function(t,e){return a.CubismFramework.getIdManager().getId(this._json.getRoot().getValueByString(m).getValueByIndex(t).getValueByString(P).getValueByIndex(e).getValueByString("Source").getValueByString("Id").getRawString())},t.prototype.getOutputCount=function(t){return this._json.getRoot().getValueByString(m).getValueByIndex(t).getValueByString(M).getVector().getSize()},t.prototype.getOutputVertexIndex=function(t,e){return this._json.getRoot().getValueByString(m).getValueByIndex(t).getValueByString(M).getValueByIndex(e).getValueByString("VertexIndex").toInt()},t.prototype.getOutputAngleScale=function(t,e){return this._json.getRoot().getValueByString(m).getValueByIndex(t).getValueByString(M).getValueByIndex(e).getValueByString("Scale").toFloat()},t.prototype.getOutputWeight=function(t,e){return this._json.getRoot().getValueByString(m).getValueByIndex(t).getValueByString(M).getValueByIndex(e).getValueByString(S).toFloat()},t.prototype.getOutputDestinationId=function(t,e){return a.CubismFramework.getIdManager().getId(this._json.getRoot().getValueByString(m).getValueByIndex(t).getValueByString(M).getValueByIndex(e).getValueByString("Destination").getValueByString("Id").getRawString())},t.prototype.getOutputType=function(t,e){return this._json.getRoot().getValueByString(m).getValueByIndex(t).getValueByString(M).getValueByIndex(e).getValueByString(h).getRawString()},t.prototype.getOutputReflect=function(t,e){return this._json.getRoot().getValueByString(m).getValueByIndex(t).getValueByString(M).getValueByIndex(e).getValueByString(C).toBoolean()},t.prototype.getParticleCount=function(t){return this._json.getRoot().getValueByString(m).getValueByIndex(t).getValueByString(x).getVector().getSize()},t.prototype.getParticleMobility=function(t,e){return this._json.getRoot().getValueByString(m).getValueByIndex(t).getValueByString(x).getValueByIndex(e).getValueByString("Mobility").toFloat()},t.prototype.getParticleDelay=function(t,e){return this._json.getRoot().getValueByString(m).getValueByIndex(t).getValueByString(x).getValueByIndex(e).getValueByString("Delay").toFloat()},t.prototype.getParticleAcceleration=function(t,e){return this._json.getRoot().getValueByString(m).getValueByIndex(t).getValueByString(x).getValueByIndex(e).getValueByString("Acceleration").toFloat()},t.prototype.getParticleRadius=function(t,e){return this._json.getRoot().getValueByString(m).getValueByIndex(t).getValueByString(x).getValueByIndex(e).getValueByString("Radius").toFloat()},t.prototype.getParticlePosition=function(t,e){var i=new s.CubismVector2(0,0);return i.x=this._json.getRoot().getValueByString(m).getValueByIndex(t).getValueByString(x).getValueByIndex(e).getValueByString(l).getValueByString("X").toFloat(),i.y=this._json.getRoot().getValueByString(m).getValueByIndex(t).getValueByString(x).getValueByIndex(e).getValueByString(l).getValueByString("Y").toFloat(),i},t}();e.CubismPhysicsJson=w;var B=o(i(6286));(e.Live2DCubismFramework||(e.Live2DCubismFramework={})).CubismPhysicsJson=B.CubismPhysicsJson},7151:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i);var n=Object.getOwnPropertyDescriptor(e,i);n&&!("get"in n?!e.__esModule:n.writable||n.configurable)||(n={enumerable:!0,get:function(){return e[i]}}),Object.defineProperty(t,r,n)}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.CubismTextureColor=e.CubismBlendMode=e.CubismRenderer=void 0;var a,s=i(1149),u=function(){function t(){this._isCulling=!1,this._isPremultipliedAlpha=!1,this._anisortopy=0,this._model=null,this._modelColor=new l,this._mvpMatrix4x4=new s.CubismMatrix44,this._mvpMatrix4x4.loadIdentity()}return t.create=function(){return null},t.delete=function(t){},t.prototype.initialize=function(t){this._model=t},t.prototype.drawModel=function(){null!=this.getModel()&&this.doDrawModel()},t.prototype.setMvpMatrix=function(t){this._mvpMatrix4x4.setMatrix(t.getArray())},t.prototype.getMvpMatrix=function(){return this._mvpMatrix4x4},t.prototype.setModelColor=function(t,e,i,r){t<0?t=0:t>1&&(t=1),e<0?e=0:e>1&&(e=1),i<0?i=0:i>1&&(i=1),r<0?r=0:r>1&&(r=1),this._modelColor.R=t,this._modelColor.G=e,this._modelColor.B=i,this._modelColor.A=r},t.prototype.getModelColor=function(){return JSON.parse(JSON.stringify(this._modelColor))},t.prototype.setIsPremultipliedAlpha=function(t){this._isPremultipliedAlpha=t},t.prototype.isPremultipliedAlpha=function(){return this._isPremultipliedAlpha},t.prototype.setIsCulling=function(t){this._isCulling=t},t.prototype.isCulling=function(){return this._isCulling},t.prototype.setAnisotropy=function(t){this._anisortopy=t},t.prototype.getAnisotropy=function(){return this._anisortopy},t.prototype.getModel=function(){return this._model},t}();e.CubismRenderer=u,(a=e.CubismBlendMode||(e.CubismBlendMode={}))[a.CubismBlendMode_Normal=0]="CubismBlendMode_Normal",a[a.CubismBlendMode_Additive=1]="CubismBlendMode_Additive",a[a.CubismBlendMode_Multiplicative=2]="CubismBlendMode_Multiplicative";var l=function(){this.R=1,this.G=1,this.B=1,this.A=1};e.CubismTextureColor=l;var c,h=o(i(7151));(c=e.Live2DCubismFramework||(e.Live2DCubismFramework={})).CubismBlendMode=h.CubismBlendMode,c.CubismRenderer=h.CubismRenderer,c.CubismTextureColor=h.CubismTextureColor},3795:function(t,e,i){var r,n=this&&this.__extends||(r=function(t,e){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},r(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),o=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i);var n=Object.getOwnPropertyDescriptor(e,i);n&&!("get"in n?!e.__esModule:n.writable||n.configurable)||(n={enumerable:!0,get:function(){return e[i]}}),Object.defineProperty(t,r,n)}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),a=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&o(e,t,i);return a(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.CubismRenderer_WebGL=e.fragmentShaderSrcMaskInvertedPremultipliedAlpha=e.fragmentShaderSrcMaskPremultipliedAlpha=e.fragmentShaderSrcPremultipliedAlpha=e.vertexShaderSrcMasked=e.vertexShaderSrc=e.fragmentShaderSrcsetupMask=e.vertexShaderSrcSetupMask=e.ShaderNames=e.CubismShaderSet=e.CubismShader_WebGL=e.CubismClippingContext=e.CubismRenderTextureResource=e.CubismClippingManager_WebGL=void 0;var u,l,c,h=i(1671),p=i(1149),d=i(502),g=i(9920),_=i(5760),m=i(1073),f=i(7151),y=function(){function t(){this._maskRenderTexture=null,this._colorBuffer=null,this._currentFrameNo=0,this._clippingMaskBufferSize=256,this._clippingContextListForMask=new _.csmVector,this._clippingContextListForDraw=new _.csmVector,this._channelColors=new _.csmVector,this._tmpBoundsOnModel=new g.csmRect,this._tmpMatrix=new p.CubismMatrix44,this._tmpMatrixForMask=new p.CubismMatrix44,this._tmpMatrixForDraw=new p.CubismMatrix44,this._maskTexture=null;var t=new f.CubismTextureColor;t.R=1,t.G=0,t.B=0,t.A=0,this._channelColors.pushBack(t),(t=new f.CubismTextureColor).R=0,t.G=1,t.B=0,t.A=0,this._channelColors.pushBack(t),(t=new f.CubismTextureColor).R=0,t.G=0,t.B=1,t.A=0,this._channelColors.pushBack(t),(t=new f.CubismTextureColor).R=0,t.G=0,t.B=0,t.A=1,this._channelColors.pushBack(t)}return t.prototype.getChannelFlagAsColor=function(t){return this._channelColors.at(t)},t.prototype.getMaskRenderTexture=function(){var t=0;if(this._maskTexture&&0!=this._maskTexture.texture&&(this._maskTexture.frameNo=this._currentFrameNo,t=this._maskTexture.texture),0==t){var e=this._clippingMaskBufferSize;this._colorBuffer=this.gl.createTexture(),this.gl.bindTexture(this.gl.TEXTURE_2D,this._colorBuffer),this.gl.texImage2D(this.gl.TEXTURE_2D,0,this.gl.RGBA,e,e,0,this.gl.RGBA,this.gl.UNSIGNED_BYTE,null),this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_S,this.gl.CLAMP_TO_EDGE),this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_T,this.gl.CLAMP_TO_EDGE),this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MIN_FILTER,this.gl.LINEAR),this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MAG_FILTER,this.gl.LINEAR),this.gl.bindTexture(this.gl.TEXTURE_2D,null),t=this.gl.createFramebuffer(),this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,t),this.gl.framebufferTexture2D(this.gl.FRAMEBUFFER,this.gl.COLOR_ATTACHMENT0,this.gl.TEXTURE_2D,this._colorBuffer,0),this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,c),this._maskTexture=new b(this._currentFrameNo,t)}return t},t.prototype.setGL=function(t){this.gl=t},t.prototype.calcClippedDrawTotalBounds=function(t,e){for(var i=Number.MAX_VALUE,r=Number.MAX_VALUE,n=Number.MIN_VALUE,o=Number.MIN_VALUE,a=e._clippedDrawableIndexList.length,s=0;s<a;s++){for(var u=e._clippedDrawableIndexList[s],l=t.getDrawableVertexCount(u),c=t.getDrawableVertices(u),p=Number.MAX_VALUE,d=Number.MAX_VALUE,g=Number.MIN_VALUE,_=Number.MIN_VALUE,m=l*h.Constant.vertexStep,f=h.Constant.vertexOffset;f<m;f+=h.Constant.vertexStep){var y=c[f],b=c[f+1];y<p&&(p=y),y>g&&(g=y),b<d&&(d=b),b>_&&(_=b)}if(p!=Number.MAX_VALUE)if(p<i&&(i=p),d<r&&(r=d),g>n&&(n=g),_>o&&(o=_),i==Number.MAX_VALUE)e._allClippedDrawRect.x=0,e._allClippedDrawRect.y=0,e._allClippedDrawRect.width=0,e._allClippedDrawRect.height=0,e._isUsing=!1;else{e._isUsing=!0;var v=n-i,C=o-r;e._allClippedDrawRect.x=i,e._allClippedDrawRect.y=r,e._allClippedDrawRect.width=v,e._allClippedDrawRect.height=C}}},t.prototype.release=function(){for(var t=0;t<this._clippingContextListForMask.getSize();t++)this._clippingContextListForMask.at(t)&&(this._clippingContextListForMask.at(t).release(),this._clippingContextListForMask.set(t,void 0)),this._clippingContextListForMask.set(t,null);for(this._clippingContextListForMask=null,t=0;t<this._clippingContextListForDraw.getSize();t++)this._clippingContextListForDraw.set(t,null);for(this._clippingContextListForDraw=null,this._maskTexture&&(this.gl.deleteFramebuffer(this._maskTexture.texture),this._maskTexture=null),t=0;t<this._channelColors.getSize();t++)this._channelColors.set(t,null);this._channelColors=null,this.gl.deleteTexture(this._colorBuffer),this._colorBuffer=null},t.prototype.initialize=function(t,e,i,r){for(var n=0;n<e;n++)if(r[n]<=0)this._clippingContextListForDraw.pushBack(null);else{var o=this.findSameClip(i[n],r[n]);null==o&&(o=new v(this,i[n],r[n]),this._clippingContextListForMask.pushBack(o)),o.addClippedDrawable(n),this._clippingContextListForDraw.pushBack(o)}},t.prototype.setupClippingContext=function(t,e){this._currentFrameNo++;for(var i=0,r=0;r<this._clippingContextListForMask.getSize();r++){var n=this._clippingContextListForMask.at(r);this.calcClippedDrawTotalBounds(t,n),n._isUsing&&i++}if(i>0){for(this.gl.viewport(0,0,this._clippingMaskBufferSize,this._clippingMaskBufferSize),this._maskRenderTexture=this.getMaskRenderTexture(),e.getMvpMatrix(),e.preDraw(),this.setupLayoutBounds(i),this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,this._maskRenderTexture),this.gl.clearColor(1,1,1,1),this.gl.clear(this.gl.COLOR_BUFFER_BIT),r=0;r<this._clippingContextListForMask.getSize();r++){var o=this._clippingContextListForMask.at(r),a=o._allClippedDrawRect,s=o._layoutBounds;this._tmpBoundsOnModel.setRect(a),this._tmpBoundsOnModel.expand(.05*a.width,.05*a.height);var u=s.width/this._tmpBoundsOnModel.width,h=s.height/this._tmpBoundsOnModel.height;this._tmpMatrix.loadIdentity(),this._tmpMatrix.translateRelative(-1,-1),this._tmpMatrix.scaleRelative(2,2),this._tmpMatrix.translateRelative(s.x,s.y),this._tmpMatrix.scaleRelative(u,h),this._tmpMatrix.translateRelative(-this._tmpBoundsOnModel.x,-this._tmpBoundsOnModel.y),this._tmpMatrixForMask.setMatrix(this._tmpMatrix.getArray()),this._tmpMatrix.loadIdentity(),this._tmpMatrix.translateRelative(s.x,s.y),this._tmpMatrix.scaleRelative(u,h),this._tmpMatrix.translateRelative(-this._tmpBoundsOnModel.x,-this._tmpBoundsOnModel.y),this._tmpMatrixForDraw.setMatrix(this._tmpMatrix.getArray()),o._matrixForMask.setMatrix(this._tmpMatrixForMask.getArray()),o._matrixForDraw.setMatrix(this._tmpMatrixForDraw.getArray());for(var p=o._clippingIdCount,d=0;d<p;d++){var g=o._clippingIdList[d];t.getDrawableDynamicFlagVertexPositionsDidChange(g)&&(e.setIsCulling(0!=t.getDrawableCulling(g)),e.setClippingContextBufferForMask(o),e.drawMesh(t.getDrawableTextureIndices(g),t.getDrawableVertexIndexCount(g),t.getDrawableVertexCount(g),t.getDrawableVertexIndices(g),t.getDrawableVertices(g),t.getDrawableVertexUvs(g),t.getDrawableOpacity(g),f.CubismBlendMode.CubismBlendMode_Normal,!1))}}this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,c),e.setClippingContextBufferForMask(null),this.gl.viewport(l[0],l[1],l[2],l[3])}},t.prototype.findSameClip=function(t,e){for(var i=0;i<this._clippingContextListForMask.getSize();i++){var r=this._clippingContextListForMask.at(i),n=r._clippingIdCount;if(n==e){for(var o=0,a=0;a<n;a++)for(var s=r._clippingIdList[a],u=0;u<n;u++)if(t[u]==s){o++;break}if(o==n)return r}}return null},t.prototype.setupLayoutBounds=function(t){var e=t/4,i=t%4;e=~~e,i=~~i;for(var r=0,n=0;n<4;n++){var o=e+(n<i?1:0);if(0==o);else if(1==o){var a=this._clippingContextListForMask.at(r++);a._layoutChannelNo=n,a._layoutBounds.x=0,a._layoutBounds.y=0,a._layoutBounds.width=1,a._layoutBounds.height=1}else if(2==o)for(var s=0;s<o;s++)u=~~(u=s%2),(c=this._clippingContextListForMask.at(r++))._layoutChannelNo=n,c._layoutBounds.x=.5*u,c._layoutBounds.y=0,c._layoutBounds.width=.5,c._layoutBounds.height=1;else if(o<=4)for(s=0;s<o;s++)u=~~(u=s%2),l=~~(l=s/2),(c=this._clippingContextListForMask.at(r++))._layoutChannelNo=n,c._layoutBounds.x=.5*u,c._layoutBounds.y=.5*l,c._layoutBounds.width=.5,c._layoutBounds.height=.5;else if(o<=9)for(s=0;s<o;s++){var u,l,c;u=~~(u=s%3),l=~~(l=s/3),(c=this._clippingContextListForMask.at(r++))._layoutChannelNo=n,c._layoutBounds.x=u/3,c._layoutBounds.y=l/3,c._layoutBounds.width=1/3,c._layoutBounds.height=1/3}else(0,m.CubismLogError)("not supported mask count : {0}",o)}},t.prototype.getColorBuffer=function(){return this._colorBuffer},t.prototype.getClippingContextListForDraw=function(){return this._clippingContextListForDraw},t.prototype.setClippingMaskBufferSize=function(t){this._clippingMaskBufferSize=t},t.prototype.getClippingMaskBufferSize=function(){return this._clippingMaskBufferSize},t}();e.CubismClippingManager_WebGL=y;var b=function(t,e){this.frameNo=t,this.texture=e};e.CubismRenderTextureResource=b;var v=function(){function t(t,e,i){this._owner=t,this._clippingIdList=e,this._clippingIdCount=i,this._allClippedDrawRect=new g.csmRect,this._layoutBounds=new g.csmRect,this._clippedDrawableIndexList=[],this._matrixForMask=new p.CubismMatrix44,this._matrixForDraw=new p.CubismMatrix44}return t.prototype.release=function(){null!=this._layoutBounds&&(this._layoutBounds=null),null!=this._allClippedDrawRect&&(this._allClippedDrawRect=null),null!=this._clippedDrawableIndexList&&(this._clippedDrawableIndexList=null)},t.prototype.addClippedDrawable=function(t){this._clippedDrawableIndexList.push(t)},t.prototype.getClippingManager=function(){return this._owner},t.prototype.setGl=function(t){this._owner.setGL(t)},t}();e.CubismClippingContext=v;var C=function(){function t(){this._shaderSets=new _.csmVector}return t.getInstance=function(){return null==u?u=new t:u},t.deleteInstance=function(){u&&(u.release(),u=null)},t.prototype.release=function(){this.releaseShaderProgram()},t.prototype.setupShaderProgram=function(t,e,i,r,n,o,a,s,u,l,c,h,p){var d,g,_,y;if(c||(0,m.CubismLogError)("NoPremultipliedAlpha is not allowed"),0==this._shaderSets.getSize()&&this.generateShaders(),null!=t.getClippingContextBufferForMask()){var b=this._shaderSets.at(S.ShaderNames_SetupMask);this.gl.useProgram(b.shaderProgram),this.gl.activeTexture(this.gl.TEXTURE0),this.gl.bindTexture(this.gl.TEXTURE_2D,e),this.gl.uniform1i(b.samplerTexture0Location,0),null==a.vertex&&(a.vertex=this.gl.createBuffer()),this.gl.bindBuffer(this.gl.ARRAY_BUFFER,a.vertex),this.gl.bufferData(this.gl.ARRAY_BUFFER,r,this.gl.DYNAMIC_DRAW),this.gl.enableVertexAttribArray(b.attributePositionLocation),this.gl.vertexAttribPointer(b.attributePositionLocation,2,this.gl.FLOAT,!1,0,0),null==a.uv&&(a.uv=this.gl.createBuffer()),this.gl.bindBuffer(this.gl.ARRAY_BUFFER,a.uv),this.gl.bufferData(this.gl.ARRAY_BUFFER,o,this.gl.DYNAMIC_DRAW),this.gl.enableVertexAttribArray(b.attributeTexCoordLocation),this.gl.vertexAttribPointer(b.attributeTexCoordLocation,2,this.gl.FLOAT,!1,0,0);var v=t.getClippingContextBufferForMask()._layoutChannelNo,C=t.getClippingContextBufferForMask().getClippingManager().getChannelFlagAsColor(v);this.gl.uniform4f(b.uniformChannelFlagLocation,C.R,C.G,C.B,C.A),this.gl.uniformMatrix4fv(b.uniformClipMatrixLocation,!1,t.getClippingContextBufferForMask()._matrixForMask.getArray());var M=t.getClippingContextBufferForMask()._layoutBounds;this.gl.uniform4f(b.uniformBaseColorLocation,2*M.x-1,2*M.y-1,2*M.getRight()-1,2*M.getBottom()-1),d=this.gl.ZERO,g=this.gl.ONE_MINUS_SRC_COLOR,_=this.gl.ZERO,y=this.gl.ONE_MINUS_SRC_ALPHA}else{var x=null!=t.getClippingContextBufferForDraw(),w=x?p?2:1:0;switch(b=new P,u){case f.CubismBlendMode.CubismBlendMode_Normal:default:b=this._shaderSets.at(S.ShaderNames_NormalPremultipliedAlpha+w),d=this.gl.ONE,g=this.gl.ONE_MINUS_SRC_ALPHA,_=this.gl.ONE,y=this.gl.ONE_MINUS_SRC_ALPHA;break;case f.CubismBlendMode.CubismBlendMode_Additive:b=this._shaderSets.at(S.ShaderNames_AddPremultipliedAlpha+w),d=this.gl.ONE,g=this.gl.ONE,_=this.gl.ZERO,y=this.gl.ONE;break;case f.CubismBlendMode.CubismBlendMode_Multiplicative:b=this._shaderSets.at(S.ShaderNames_MultPremultipliedAlpha+w),d=this.gl.DST_COLOR,g=this.gl.ONE_MINUS_SRC_ALPHA,_=this.gl.ZERO,y=this.gl.ONE}if(this.gl.useProgram(b.shaderProgram),null==a.vertex&&(a.vertex=this.gl.createBuffer()),this.gl.bindBuffer(this.gl.ARRAY_BUFFER,a.vertex),this.gl.bufferData(this.gl.ARRAY_BUFFER,r,this.gl.DYNAMIC_DRAW),this.gl.enableVertexAttribArray(b.attributePositionLocation),this.gl.vertexAttribPointer(b.attributePositionLocation,2,this.gl.FLOAT,!1,0,0),null==a.uv&&(a.uv=this.gl.createBuffer()),this.gl.bindBuffer(this.gl.ARRAY_BUFFER,a.uv),this.gl.bufferData(this.gl.ARRAY_BUFFER,o,this.gl.DYNAMIC_DRAW),this.gl.enableVertexAttribArray(b.attributeTexCoordLocation),this.gl.vertexAttribPointer(b.attributeTexCoordLocation,2,this.gl.FLOAT,!1,0,0),x){this.gl.activeTexture(this.gl.TEXTURE1);var B=t.getClippingContextBufferForDraw().getClippingManager().getColorBuffer();this.gl.bindTexture(this.gl.TEXTURE_2D,B),this.gl.uniform1i(b.samplerTexture1Location,1),this.gl.uniformMatrix4fv(b.uniformClipMatrixLocation,!1,t.getClippingContextBufferForDraw()._matrixForDraw.getArray()),v=t.getClippingContextBufferForDraw()._layoutChannelNo,C=t.getClippingContextBufferForDraw().getClippingManager().getChannelFlagAsColor(v),this.gl.uniform4f(b.uniformChannelFlagLocation,C.R,C.G,C.B,C.A)}this.gl.activeTexture(this.gl.TEXTURE0),this.gl.bindTexture(this.gl.TEXTURE_2D,e),this.gl.uniform1i(b.samplerTexture0Location,0),this.gl.uniformMatrix4fv(b.uniformMatrixLocation,!1,h.getArray()),this.gl.uniform4f(b.uniformBaseColorLocation,l.R,l.G,l.B,l.A)}null==a.index&&(a.index=this.gl.createBuffer()),this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,a.index),this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER,n,this.gl.DYNAMIC_DRAW),this.gl.blendFuncSeparate(d,g,_,y)},t.prototype.releaseShaderProgram=function(){for(var t=0;t<this._shaderSets.getSize();t++)this.gl.deleteProgram(this._shaderSets.at(t).shaderProgram),this._shaderSets.at(t).shaderProgram=0,this._shaderSets.set(t,void 0),this._shaderSets.set(t,null)},t.prototype.generateShaders=function(){for(var t=0;t<10;t++)this._shaderSets.pushBack(new P);this._shaderSets.at(0).shaderProgram=this.loadShaderProgram(e.vertexShaderSrcSetupMask,e.fragmentShaderSrcsetupMask),this._shaderSets.at(1).shaderProgram=this.loadShaderProgram(e.vertexShaderSrc,e.fragmentShaderSrcPremultipliedAlpha),this._shaderSets.at(2).shaderProgram=this.loadShaderProgram(e.vertexShaderSrcMasked,e.fragmentShaderSrcMaskPremultipliedAlpha),this._shaderSets.at(3).shaderProgram=this.loadShaderProgram(e.vertexShaderSrcMasked,e.fragmentShaderSrcMaskInvertedPremultipliedAlpha),this._shaderSets.at(4).shaderProgram=this._shaderSets.at(1).shaderProgram,this._shaderSets.at(5).shaderProgram=this._shaderSets.at(2).shaderProgram,this._shaderSets.at(6).shaderProgram=this._shaderSets.at(3).shaderProgram,this._shaderSets.at(7).shaderProgram=this._shaderSets.at(1).shaderProgram,this._shaderSets.at(8).shaderProgram=this._shaderSets.at(2).shaderProgram,this._shaderSets.at(9).shaderProgram=this._shaderSets.at(3).shaderProgram,this._shaderSets.at(0).attributePositionLocation=this.gl.getAttribLocation(this._shaderSets.at(0).shaderProgram,"a_position"),this._shaderSets.at(0).attributeTexCoordLocation=this.gl.getAttribLocation(this._shaderSets.at(0).shaderProgram,"a_texCoord"),this._shaderSets.at(0).samplerTexture0Location=this.gl.getUniformLocation(this._shaderSets.at(0).shaderProgram,"s_texture0"),this._shaderSets.at(0).uniformClipMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(0).shaderProgram,"u_clipMatrix"),this._shaderSets.at(0).uniformChannelFlagLocation=this.gl.getUniformLocation(this._shaderSets.at(0).shaderProgram,"u_channelFlag"),this._shaderSets.at(0).uniformBaseColorLocation=this.gl.getUniformLocation(this._shaderSets.at(0).shaderProgram,"u_baseColor"),this._shaderSets.at(1).attributePositionLocation=this.gl.getAttribLocation(this._shaderSets.at(1).shaderProgram,"a_position"),this._shaderSets.at(1).attributeTexCoordLocation=this.gl.getAttribLocation(this._shaderSets.at(1).shaderProgram,"a_texCoord"),this._shaderSets.at(1).samplerTexture0Location=this.gl.getUniformLocation(this._shaderSets.at(1).shaderProgram,"s_texture0"),this._shaderSets.at(1).uniformMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(1).shaderProgram,"u_matrix"),this._shaderSets.at(1).uniformBaseColorLocation=this.gl.getUniformLocation(this._shaderSets.at(1).shaderProgram,"u_baseColor"),this._shaderSets.at(2).attributePositionLocation=this.gl.getAttribLocation(this._shaderSets.at(2).shaderProgram,"a_position"),this._shaderSets.at(2).attributeTexCoordLocation=this.gl.getAttribLocation(this._shaderSets.at(2).shaderProgram,"a_texCoord"),this._shaderSets.at(2).samplerTexture0Location=this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram,"s_texture0"),this._shaderSets.at(2).samplerTexture1Location=this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram,"s_texture1"),this._shaderSets.at(2).uniformMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram,"u_matrix"),this._shaderSets.at(2).uniformClipMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram,"u_clipMatrix"),this._shaderSets.at(2).uniformChannelFlagLocation=this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram,"u_channelFlag"),this._shaderSets.at(2).uniformBaseColorLocation=this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram,"u_baseColor"),this._shaderSets.at(3).attributePositionLocation=this.gl.getAttribLocation(this._shaderSets.at(3).shaderProgram,"a_position"),this._shaderSets.at(3).attributeTexCoordLocation=this.gl.getAttribLocation(this._shaderSets.at(3).shaderProgram,"a_texCoord"),this._shaderSets.at(3).samplerTexture0Location=this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram,"s_texture0"),this._shaderSets.at(3).samplerTexture1Location=this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram,"s_texture1"),this._shaderSets.at(3).uniformMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram,"u_matrix"),this._shaderSets.at(3).uniformClipMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram,"u_clipMatrix"),this._shaderSets.at(3).uniformChannelFlagLocation=this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram,"u_channelFlag"),this._shaderSets.at(3).uniformBaseColorLocation=this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram,"u_baseColor"),this._shaderSets.at(4).attributePositionLocation=this.gl.getAttribLocation(this._shaderSets.at(4).shaderProgram,"a_position"),this._shaderSets.at(4).attributeTexCoordLocation=this.gl.getAttribLocation(this._shaderSets.at(4).shaderProgram,"a_texCoord"),this._shaderSets.at(4).samplerTexture0Location=this.gl.getUniformLocation(this._shaderSets.at(4).shaderProgram,"s_texture0"),this._shaderSets.at(4).uniformMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(4).shaderProgram,"u_matrix"),this._shaderSets.at(4).uniformBaseColorLocation=this.gl.getUniformLocation(this._shaderSets.at(4).shaderProgram,"u_baseColor"),this._shaderSets.at(5).attributePositionLocation=this.gl.getAttribLocation(this._shaderSets.at(5).shaderProgram,"a_position"),this._shaderSets.at(5).attributeTexCoordLocation=this.gl.getAttribLocation(this._shaderSets.at(5).shaderProgram,"a_texCoord"),this._shaderSets.at(5).samplerTexture0Location=this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram,"s_texture0"),this._shaderSets.at(5).samplerTexture1Location=this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram,"s_texture1"),this._shaderSets.at(5).uniformMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram,"u_matrix"),this._shaderSets.at(5).uniformClipMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram,"u_clipMatrix"),this._shaderSets.at(5).uniformChannelFlagLocation=this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram,"u_channelFlag"),this._shaderSets.at(5).uniformBaseColorLocation=this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram,"u_baseColor"),this._shaderSets.at(6).attributePositionLocation=this.gl.getAttribLocation(this._shaderSets.at(6).shaderProgram,"a_position"),this._shaderSets.at(6).attributeTexCoordLocation=this.gl.getAttribLocation(this._shaderSets.at(6).shaderProgram,"a_texCoord"),this._shaderSets.at(6).samplerTexture0Location=this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram,"s_texture0"),this._shaderSets.at(6).samplerTexture1Location=this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram,"s_texture1"),this._shaderSets.at(6).uniformMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram,"u_matrix"),this._shaderSets.at(6).uniformClipMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram,"u_clipMatrix"),this._shaderSets.at(6).uniformChannelFlagLocation=this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram,"u_channelFlag"),this._shaderSets.at(6).uniformBaseColorLocation=this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram,"u_baseColor"),this._shaderSets.at(7).attributePositionLocation=this.gl.getAttribLocation(this._shaderSets.at(7).shaderProgram,"a_position"),this._shaderSets.at(7).attributeTexCoordLocation=this.gl.getAttribLocation(this._shaderSets.at(7).shaderProgram,"a_texCoord"),this._shaderSets.at(7).samplerTexture0Location=this.gl.getUniformLocation(this._shaderSets.at(7).shaderProgram,"s_texture0"),this._shaderSets.at(7).uniformMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(7).shaderProgram,"u_matrix"),this._shaderSets.at(7).uniformBaseColorLocation=this.gl.getUniformLocation(this._shaderSets.at(7).shaderProgram,"u_baseColor"),this._shaderSets.at(8).attributePositionLocation=this.gl.getAttribLocation(this._shaderSets.at(8).shaderProgram,"a_position"),this._shaderSets.at(8).attributeTexCoordLocation=this.gl.getAttribLocation(this._shaderSets.at(8).shaderProgram,"a_texCoord"),this._shaderSets.at(8).samplerTexture0Location=this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram,"s_texture0"),this._shaderSets.at(8).samplerTexture1Location=this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram,"s_texture1"),this._shaderSets.at(8).uniformMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram,"u_matrix"),this._shaderSets.at(8).uniformClipMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram,"u_clipMatrix"),this._shaderSets.at(8).uniformChannelFlagLocation=this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram,"u_channelFlag"),this._shaderSets.at(8).uniformBaseColorLocation=this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram,"u_baseColor"),this._shaderSets.at(9).attributePositionLocation=this.gl.getAttribLocation(this._shaderSets.at(9).shaderProgram,"a_position"),this._shaderSets.at(9).attributeTexCoordLocation=this.gl.getAttribLocation(this._shaderSets.at(9).shaderProgram,"a_texCoord"),this._shaderSets.at(9).samplerTexture0Location=this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram,"s_texture0"),this._shaderSets.at(9).samplerTexture1Location=this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram,"s_texture1"),this._shaderSets.at(9).uniformMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram,"u_matrix"),this._shaderSets.at(9).uniformClipMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram,"u_clipMatrix"),this._shaderSets.at(9).uniformChannelFlagLocation=this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram,"u_channelFlag"),this._shaderSets.at(9).uniformBaseColorLocation=this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram,"u_baseColor")},t.prototype.loadShaderProgram=function(t,e){var i=this.gl.createProgram(),r=this.compileShaderSource(this.gl.VERTEX_SHADER,t);if(!r)return(0,m.CubismLogError)("Vertex shader compile error!"),0;var n=this.compileShaderSource(this.gl.FRAGMENT_SHADER,e);return n?(this.gl.attachShader(i,r),this.gl.attachShader(i,n),this.gl.linkProgram(i),this.gl.getProgramParameter(i,this.gl.LINK_STATUS)?(this.gl.deleteShader(r),this.gl.deleteShader(n),i):((0,m.CubismLogError)("Failed to link program: {0}",i),this.gl.deleteShader(r),r=0,this.gl.deleteShader(n),n=0,i&&(this.gl.deleteProgram(i),i=0),0)):((0,m.CubismLogError)("Vertex shader compile error!"),0)},t.prototype.compileShaderSource=function(t,e){var i=e,r=this.gl.createShader(t);if(this.gl.shaderSource(r,i),this.gl.compileShader(r),!r){var n=this.gl.getShaderInfoLog(r);(0,m.CubismLogError)("Shader compile log: {0} ",n)}return this.gl.getShaderParameter(r,this.gl.COMPILE_STATUS)?r:(this.gl.deleteShader(r),null)},t.prototype.setGl=function(t){this.gl=t},t}();e.CubismShader_WebGL=C;var S,P=function(){};e.CubismShaderSet=P,function(t){t[t.ShaderNames_SetupMask=0]="ShaderNames_SetupMask",t[t.ShaderNames_NormalPremultipliedAlpha=1]="ShaderNames_NormalPremultipliedAlpha",t[t.ShaderNames_NormalMaskedPremultipliedAlpha=2]="ShaderNames_NormalMaskedPremultipliedAlpha",t[t.ShaderNames_NomralMaskedInvertedPremultipliedAlpha=3]="ShaderNames_NomralMaskedInvertedPremultipliedAlpha",t[t.ShaderNames_AddPremultipliedAlpha=4]="ShaderNames_AddPremultipliedAlpha",t[t.ShaderNames_AddMaskedPremultipliedAlpha=5]="ShaderNames_AddMaskedPremultipliedAlpha",t[t.ShaderNames_AddMaskedPremultipliedAlphaInverted=6]="ShaderNames_AddMaskedPremultipliedAlphaInverted",t[t.ShaderNames_MultPremultipliedAlpha=7]="ShaderNames_MultPremultipliedAlpha",t[t.ShaderNames_MultMaskedPremultipliedAlpha=8]="ShaderNames_MultMaskedPremultipliedAlpha",t[t.ShaderNames_MultMaskedPremultipliedAlphaInverted=9]="ShaderNames_MultMaskedPremultipliedAlphaInverted"}(S=e.ShaderNames||(e.ShaderNames={})),e.vertexShaderSrcSetupMask="attribute vec4     a_position;attribute vec2     a_texCoord;varying vec2       v_texCoord;varying vec4       v_myPos;uniform mat4       u_clipMatrix;void main(){   gl_Position = u_clipMatrix * a_position;   v_myPos = u_clipMatrix * a_position;   v_texCoord = a_texCoord;   v_texCoord.y = 1.0 - v_texCoord.y;}",e.fragmentShaderSrcsetupMask="precision mediump float;varying vec2       v_texCoord;varying vec4       v_myPos;uniform vec4       u_baseColor;uniform vec4       u_channelFlag;uniform sampler2D  s_texture0;void main(){   float isInside =        step(u_baseColor.x, v_myPos.x/v_myPos.w)       * step(u_baseColor.y, v_myPos.y/v_myPos.w)       * step(v_myPos.x/v_myPos.w, u_baseColor.z)       * step(v_myPos.y/v_myPos.w, u_baseColor.w);   gl_FragColor = u_channelFlag * texture2D(s_texture0, v_texCoord).a * isInside;}",e.vertexShaderSrc="attribute vec4     a_position;attribute vec2     a_texCoord;varying vec2       v_texCoord;uniform mat4       u_matrix;void main(){   gl_Position = u_matrix * a_position;   v_texCoord = a_texCoord;   v_texCoord.y = 1.0 - v_texCoord.y;}",e.vertexShaderSrcMasked="attribute vec4     a_position;attribute vec2     a_texCoord;varying vec2       v_texCoord;varying vec4       v_clipPos;uniform mat4       u_matrix;uniform mat4       u_clipMatrix;void main(){   gl_Position = u_matrix * a_position;   v_clipPos = u_clipMatrix * a_position;   v_texCoord = a_texCoord;   v_texCoord.y = 1.0 - v_texCoord.y;}",e.fragmentShaderSrcPremultipliedAlpha="precision mediump float;varying vec2       v_texCoord;uniform vec4       u_baseColor;uniform sampler2D  s_texture0;void main(){   gl_FragColor = texture2D(s_texture0 , v_texCoord) * u_baseColor;}",e.fragmentShaderSrcMaskPremultipliedAlpha="precision mediump float;varying vec2       v_texCoord;varying vec4       v_clipPos;uniform vec4       u_baseColor;uniform vec4       u_channelFlag;uniform sampler2D  s_texture0;uniform sampler2D  s_texture1;void main(){   vec4 col_formask = texture2D(s_texture0 , v_texCoord) * u_baseColor;   vec4 clipMask = (1.0 - texture2D(s_texture1, v_clipPos.xy / v_clipPos.w)) * u_channelFlag;   float maskVal = clipMask.r + clipMask.g + clipMask.b + clipMask.a;   col_formask = col_formask * maskVal;   gl_FragColor = col_formask;}",e.fragmentShaderSrcMaskInvertedPremultipliedAlpha="precision mediump float;varying vec2 v_texCoord;varying vec4 v_clipPos;uniform sampler2D s_texture0;uniform sampler2D s_texture1;uniform vec4 u_channelFlag;uniform vec4 u_baseColor;void main(){vec4 col_formask = texture2D(s_texture0, v_texCoord) * u_baseColor;vec4 clipMask = (1.0 - texture2D(s_texture1, v_clipPos.xy / v_clipPos.w)) * u_channelFlag;float maskVal = clipMask.r + clipMask.g + clipMask.b + clipMask.a;col_formask = col_formask * (1.0 - maskVal);gl_FragColor = col_formask;}";var M=function(t){function e(){var e=t.call(this)||this;return e._clippingContextBufferForMask=null,e._clippingContextBufferForDraw=null,e._clippingManager=new y,e.firstDraw=!0,e._textures=new d.csmMap,e._sortedDrawableIndexList=new _.csmVector,e._bufferData={vertex:WebGLBuffer=null,uv:WebGLBuffer=null,index:WebGLBuffer=null},e._textures.prepareCapacity(32,!0),e}return n(e,t),e.prototype.initialize=function(e){e.isUsingMasking()&&(this._clippingManager=new y,this._clippingManager.initialize(e,e.getDrawableCount(),e.getDrawableMasks(),e.getDrawableMaskCounts())),this._sortedDrawableIndexList.resize(e.getDrawableCount(),0),t.prototype.initialize.call(this,e)},e.prototype.bindTexture=function(t,e){this._textures.setValue(t,e)},e.prototype.getBindedTextures=function(){return this._textures},e.prototype.setClippingMaskBufferSize=function(t){this._clippingManager.release(),this._clippingManager=void 0,this._clippingManager=null,this._clippingManager=new y,this._clippingManager.setClippingMaskBufferSize(t),this._clippingManager.initialize(this.getModel(),this.getModel().getDrawableCount(),this.getModel().getDrawableMasks(),this.getModel().getDrawableMaskCounts())},e.prototype.getClippingMaskBufferSize=function(){return this._clippingManager.getClippingMaskBufferSize()},e.prototype.release=function(){this._clippingManager.release(),this._clippingManager=void 0,this._clippingManager=null,this.gl.deleteBuffer(this._bufferData.vertex),this._bufferData.vertex=null,this.gl.deleteBuffer(this._bufferData.uv),this._bufferData.uv=null,this.gl.deleteBuffer(this._bufferData.index),this._bufferData.index=null,this._bufferData=null,this._textures=null},e.prototype.doDrawModel=function(){null!=this._clippingManager&&(this.preDraw(),this._clippingManager.setupClippingContext(this.getModel(),this)),this.preDraw();for(var t=this.getModel().getDrawableCount(),e=this.getModel().getDrawableRenderOrders(),i=0;i<t;++i){var r=e[i];this._sortedDrawableIndexList.set(r,i)}for(i=0;i<t;++i){var n=this._sortedDrawableIndexList.at(i);this.getModel().getDrawableDynamicFlagIsVisible(n)&&(this.setClippingContextBufferForDraw(null!=this._clippingManager?this._clippingManager.getClippingContextListForDraw().at(n):null),this.setIsCulling(this.getModel().getDrawableCulling(n)),this.drawMesh(this.getModel().getDrawableTextureIndices(n),this.getModel().getDrawableVertexIndexCount(n),this.getModel().getDrawableVertexCount(n),this.getModel().getDrawableVertexIndices(n),this.getModel().getDrawableVertices(n),this.getModel().getDrawableVertexUvs(n),this.getModel().getDrawableOpacity(n),this.getModel().getDrawableBlendMode(n),this.getModel().getDrawableInvertedMaskBit(n)))}},e.prototype.drawMesh=function(t,e,i,r,n,o,a,s,u){this.isCulling()?this.gl.enable(this.gl.CULL_FACE):this.gl.disable(this.gl.CULL_FACE),this.gl.frontFace(this.gl.CCW);var l,c=this.getModelColor();null==this.getClippingContextBufferForMask()&&(c.A*=a,this.isPremultipliedAlpha()&&(c.R*=c.A,c.G*=c.A,c.B*=c.A)),l=null!=this._textures.getValue(t)?this._textures.getValue(t):null,C.getInstance().setupShaderProgram(this,l,i,n,r,o,this._bufferData,a,s,c,this.isPremultipliedAlpha(),this.getMvpMatrix(),u),this.gl.drawElements(this.gl.TRIANGLES,e,this.gl.UNSIGNED_SHORT,0),this.gl.useProgram(null),this.setClippingContextBufferForDraw(null),this.setClippingContextBufferForMask(null)},e.doStaticRelease=function(){C.deleteInstance()},e.prototype.setRenderState=function(t,e){c=t,l=e},e.prototype.preDraw=function(){this.firstDraw&&(this.firstDraw=!1,this._anisortopy=this.gl.getExtension("EXT_texture_filter_anisotropic")||this.gl.getExtension("WEBKIT_EXT_texture_filter_anisotropic")||this.gl.getExtension("MOZ_EXT_texture_filter_anisotropic")),this.gl.disable(this.gl.SCISSOR_TEST),this.gl.disable(this.gl.STENCIL_TEST),this.gl.disable(this.gl.DEPTH_TEST),this.gl.frontFace(this.gl.CW),this.gl.enable(this.gl.BLEND),this.gl.colorMask(!0,!0,!0,!0),this.gl.bindBuffer(this.gl.ARRAY_BUFFER,null),this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,null)},e.prototype.setClippingContextBufferForMask=function(t){this._clippingContextBufferForMask=t},e.prototype.getClippingContextBufferForMask=function(){return this._clippingContextBufferForMask},e.prototype.setClippingContextBufferForDraw=function(t){this._clippingContextBufferForDraw=t},e.prototype.getClippingContextBufferForDraw=function(){return this._clippingContextBufferForDraw},e.prototype.startUp=function(t){this.gl=t,this._clippingManager.setGL(t),C.getInstance().setGl(t)},e}(f.CubismRenderer);e.CubismRenderer_WebGL=M,f.CubismRenderer.staticRelease=function(){M.doStaticRelease()};var x,w=s(i(3795));(x=e.Live2DCubismFramework||(e.Live2DCubismFramework={})).CubismClippingContext=w.CubismClippingContext,x.CubismClippingManager_WebGL=w.CubismClippingManager_WebGL,x.CubismRenderTextureResource=w.CubismRenderTextureResource,x.CubismRenderer_WebGL=w.CubismRenderer_WebGL,x.CubismShaderSet=w.CubismShaderSet,x.CubismShader_WebGL=w.CubismShader_WebGL,x.ShaderNames=w.ShaderNames},502:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i);var n=Object.getOwnPropertyDescriptor(e,i);n&&!("get"in n?!e.__esModule:n.writable||n.configurable)||(n={enumerable:!0,get:function(){return e[i]}}),Object.defineProperty(t,r,n)}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.iterator=e.csmMap=e.csmPair=void 0;var a=i(1073),s=function(t,e){this.first=null==t?null:t,this.second=null==e?null:e};e.csmPair=s;var u=function(){function t(t){null!=t?t<1?(this._keyValues=[],this._dummyValue=null,this._size=0):(this._keyValues=new Array(t),this._size=t):(this._keyValues=[],this._dummyValue=null,this._size=0)}return t.prototype.release=function(){this.clear()},t.prototype.appendKey=function(t){this.prepareCapacity(this._size+1,!1),this._keyValues[this._size]=new s(t),this._size+=1},t.prototype.getValue=function(t){for(var e=-1,i=0;i<this._size;i++)if(this._keyValues[i].first==t){e=i;break}return e>=0?this._keyValues[e].second:(this.appendKey(t),this._keyValues[this._size-1].second)},t.prototype.setValue=function(t,e){for(var i=-1,r=0;r<this._size;r++)if(this._keyValues[r].first==t){i=r;break}i>=0?this._keyValues[i].second=e:(this.appendKey(t),this._keyValues[this._size-1].second=e)},t.prototype.isExist=function(t){for(var e=0;e<this._size;e++)if(this._keyValues[e].first==t)return!0;return!1},t.prototype.clear=function(){this._keyValues=void 0,this._keyValues=null,this._keyValues=[],this._size=0},t.prototype.getSize=function(){return this._size},t.prototype.prepareCapacity=function(e,i){e>this._keyValues.length&&(0==this._keyValues.length?(!i&&e<t.DefaultSize&&(e=t.DefaultSize),this._keyValues.length=e):(!i&&e<2*this._keyValues.length&&(e=2*this._keyValues.length),this._keyValues.length=e))},t.prototype.begin=function(){return new l(this,0)},t.prototype.end=function(){return new l(this,this._size)},t.prototype.erase=function(t){var e=t._index;return e<0||this._size<=e?t:(this._keyValues.splice(e,1),--this._size,new l(this,e))},t.prototype.dumpAsInt=function(){for(var t=0;t<this._size;t++)(0,a.CubismLogDebug)("{0} ,",this._keyValues[t]),(0,a.CubismLogDebug)("\n")},t.DefaultSize=10,t}();e.csmMap=u;var l=function(){function t(t,e){this._map=null!=t?t:new u,this._index=null!=e?e:0}return t.prototype.set=function(t){return this._index=t._index,this._map=t._map,this},t.prototype.preIncrement=function(){return++this._index,this},t.prototype.preDecrement=function(){return--this._index,this},t.prototype.increment=function(){return new t(this._map,this._index++)},t.prototype.decrement=function(){var e=new t(this._map,this._index);return this._map=e._map,this._index=e._index,this},t.prototype.ptr=function(){return this._map._keyValues[this._index]},t.prototype.notEqual=function(t){return this._index!=t._index||this._map!=t._map},t}();e.iterator=l;var c,h=o(i(502));(c=e.Live2DCubismFramework||(e.Live2DCubismFramework={})).csmMap=h.csmMap,c.csmPair=h.csmPair,c.iterator=h.iterator},9920:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i);var n=Object.getOwnPropertyDescriptor(e,i);n&&!("get"in n?!e.__esModule:n.writable||n.configurable)||(n={enumerable:!0,get:function(){return e[i]}}),Object.defineProperty(t,r,n)}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.csmRect=void 0;var a=function(){function t(t,e,i,r){this.x=t,this.y=e,this.width=i,this.height=r}return t.prototype.getCenterX=function(){return this.x+.5*this.width},t.prototype.getCenterY=function(){return this.y+.5*this.height},t.prototype.getRight=function(){return this.x+this.width},t.prototype.getBottom=function(){return this.y+this.height},t.prototype.setRect=function(t){this.x=t.x,this.y=t.y,this.width=t.width,this.height=t.height},t.prototype.expand=function(t,e){this.x-=t,this.y-=e,this.width+=2*t,this.height+=2*e},t}();e.csmRect=a;var s=o(i(9920));(e.Live2DCubismFramework||(e.Live2DCubismFramework={})).csmRect=s.csmRect},1695:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i);var n=Object.getOwnPropertyDescriptor(e,i);n&&!("get"in n?!e.__esModule:n.writable||n.configurable)||(n={enumerable:!0,get:function(){return e[i]}}),Object.defineProperty(t,r,n)}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.csmString=void 0;var a=function(){function t(t){this.s=t}return t.prototype.append=function(t,e){return this.s+=void 0!==e?t.substr(0,e):t,this},t.prototype.expansion=function(t,e){for(var i=0;i<t;i++)this.append(e);return this},t.prototype.getBytes=function(){return encodeURIComponent(this.s).replace(/%../g,"x").length},t.prototype.getLength=function(){return this.s.length},t.prototype.isLess=function(t){return this.s<t.s},t.prototype.isGreat=function(t){return this.s>t.s},t.prototype.isEqual=function(t){return this.s==t},t.prototype.isEmpty=function(){return 0==this.s.length},t}();e.csmString=a;var s=o(i(1695));(e.Live2DCubismFramework||(e.Live2DCubismFramework={})).csmString=s.csmString},5760:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i);var n=Object.getOwnPropertyDescriptor(e,i);n&&!("get"in n?!e.__esModule:n.writable||n.configurable)||(n={enumerable:!0,get:function(){return e[i]}}),Object.defineProperty(t,r,n)}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.iterator=e.csmVector=void 0;var a=function(){function t(t){void 0===t&&(t=0),t<1?(this._ptr=[],this._capacity=0,this._size=0):(this._ptr=new Array(t),this._capacity=t,this._size=0)}return t.prototype.at=function(t){return this._ptr[t]},t.prototype.set=function(t,e){this._ptr[t]=e},t.prototype.get=function(t){void 0===t&&(t=0);for(var e=new Array,i=t;i<this._size;i++)e.push(this._ptr[i]);return e},t.prototype.pushBack=function(e){this._size>=this._capacity&&this.prepareCapacity(0==this._capacity?t.s_defaultSize:2*this._capacity),this._ptr[this._size++]=e},t.prototype.clear=function(){this._ptr.length=0,this._size=0},t.prototype.getSize=function(){return this._size},t.prototype.assign=function(t,e){this._size<t&&this.prepareCapacity(t);for(var i=0;i<t;i++)this._ptr[i]=e;this._size=t},t.prototype.resize=function(t,e){void 0===e&&(e=null),this.updateSize(t,e,!0)},t.prototype.updateSize=function(t,e,i){if(void 0===e&&(e=null),void 0===i&&(i=!0),this._size<t)if(this.prepareCapacity(t),i)for(var r=this._size;r<t;r++)this._ptr[r]="function"==typeof e?JSON.parse(JSON.stringify(new e)):e;else for(r=this._size;r<t;r++)this._ptr[r]=e;else{var n=this._size-t;this._ptr.splice(this._size-n,n)}this._size=t},t.prototype.insert=function(t,e,i){var r=t._index,n=e._index,o=i._index,a=o-n;this.prepareCapacity(this._size+a);var s=this._size-r;if(s>0)for(var u=0;u<s;u++)this._ptr.splice(r+u,0,null);for(u=n;u<o;u++,r++)this._ptr[r]=e._vector._ptr[u];this._size=this._size+a},t.prototype.remove=function(t){return!(t<0||this._size<=t||(this._ptr.splice(t,1),--this._size,0))},t.prototype.erase=function(t){var e=t._index;return e<0||this._size<=e?t:(this._ptr.splice(e,1),--this._size,new s(this,e))},t.prototype.prepareCapacity=function(t){t>this._capacity&&(0==this._capacity?(this._ptr=new Array(t),this._capacity=t):(this._ptr.length=t,this._capacity=t))},t.prototype.begin=function(){return 0==this._size?this.end():new s(this,0)},t.prototype.end=function(){return new s(this,this._size)},t.prototype.getOffset=function(e){var i=new t;return i._ptr=this.get(e),i._size=this.get(e).length,i._capacity=this.get(e).length,i},t.s_defaultSize=10,t}();e.csmVector=a;var s=function(){function t(t,e){this._vector=null!=t?t:null,this._index=null!=e?e:0}return t.prototype.set=function(t){return this._index=t._index,this._vector=t._vector,this},t.prototype.preIncrement=function(){return++this._index,this},t.prototype.preDecrement=function(){return--this._index,this},t.prototype.increment=function(){return new t(this._vector,this._index++)},t.prototype.decrement=function(){return new t(this._vector,this._index--)},t.prototype.ptr=function(){return this._vector._ptr[this._index]},t.prototype.substitution=function(t){return this._index=t._index,this._vector=t._vector,this},t.prototype.notEqual=function(t){return this._index!=t._index||this._vector!=t._vector},t}();e.iterator=s;var u,l=o(i(5760));(u=e.Live2DCubismFramework||(e.Live2DCubismFramework={})).csmVector=l.csmVector,u.iterator=l.iterator},1073:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i);var n=Object.getOwnPropertyDescriptor(e,i);n&&!("get"in n?!e.__esModule:n.writable||n.configurable)||(n={enumerable:!0,get:function(){return e[i]}}),Object.defineProperty(t,r,n)}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.CubismDebug=e.CubismLogError=e.CubismLogWarning=e.CubismLogInfo=e.CubismLogDebug=e.CubismLogVerbose=e.CSM_ASSERT=e.CubismLogPrintIn=e.CubismLogPrint=void 0;var a=i(1816),s=i(1671);e.CubismLogPrint=function(t,e,i){u.print(t,"[CSM]"+e,i)},e.CubismLogPrintIn=function(t,i,r){(0,e.CubismLogPrint)(t,i+"\n",r)},e.CSM_ASSERT=function(t){console.assert(t)},a.CSM_LOG_LEVEL<=a.CSM_LOG_LEVEL_VERBOSE?(e.CubismLogVerbose=function(t){for(var i=[],r=1;r<arguments.length;r++)i[r-1]=arguments[r];(0,e.CubismLogPrintIn)(s.LogLevel.LogLevel_Verbose,"[V]"+t,i)},e.CubismLogDebug=function(t){for(var i=[],r=1;r<arguments.length;r++)i[r-1]=arguments[r];(0,e.CubismLogPrintIn)(s.LogLevel.LogLevel_Debug,"[D]"+t,i)},e.CubismLogInfo=function(t){for(var i=[],r=1;r<arguments.length;r++)i[r-1]=arguments[r];(0,e.CubismLogPrintIn)(s.LogLevel.LogLevel_Info,"[I]"+t,i)},e.CubismLogWarning=function(t){for(var i=[],r=1;r<arguments.length;r++)i[r-1]=arguments[r];(0,e.CubismLogPrintIn)(s.LogLevel.LogLevel_Warning,"[W]"+t,i)},e.CubismLogError=function(t){for(var i=[],r=1;r<arguments.length;r++)i[r-1]=arguments[r];(0,e.CubismLogPrintIn)(s.LogLevel.LogLevel_Error,"[E]"+t,i)}):a.CSM_LOG_LEVEL==a.CSM_LOG_LEVEL_DEBUG?(e.CubismLogDebug=function(t){for(var i=[],r=1;r<arguments.length;r++)i[r-1]=arguments[r];(0,e.CubismLogPrintIn)(s.LogLevel.LogLevel_Debug,"[D]"+t,i)},e.CubismLogInfo=function(t){for(var i=[],r=1;r<arguments.length;r++)i[r-1]=arguments[r];(0,e.CubismLogPrintIn)(s.LogLevel.LogLevel_Info,"[I]"+t,i)},e.CubismLogWarning=function(t){for(var i=[],r=1;r<arguments.length;r++)i[r-1]=arguments[r];(0,e.CubismLogPrintIn)(s.LogLevel.LogLevel_Warning,"[W]"+t,i)},e.CubismLogError=function(t){for(var i=[],r=1;r<arguments.length;r++)i[r-1]=arguments[r];(0,e.CubismLogPrintIn)(s.LogLevel.LogLevel_Error,"[E]"+t,i)}):a.CSM_LOG_LEVEL==a.CSM_LOG_LEVEL_INFO?(e.CubismLogInfo=function(t){for(var i=[],r=1;r<arguments.length;r++)i[r-1]=arguments[r];(0,e.CubismLogPrintIn)(s.LogLevel.LogLevel_Info,"[I]"+t,i)},e.CubismLogWarning=function(t){for(var i=[],r=1;r<arguments.length;r++)i[r-1]=arguments[r];(0,e.CubismLogPrintIn)(s.LogLevel.LogLevel_Warning,"[W]"+t,i)},e.CubismLogError=function(t){for(var i=[],r=1;r<arguments.length;r++)i[r-1]=arguments[r];(0,e.CubismLogPrintIn)(s.LogLevel.LogLevel_Error,"[E]"+t,i)}):a.CSM_LOG_LEVEL==a.CSM_LOG_LEVEL_WARNING?(e.CubismLogWarning=function(t){for(var i=[],r=1;r<arguments.length;r++)i[r-1]=arguments[r];(0,e.CubismLogPrintIn)(s.LogLevel.LogLevel_Warning,"[W]"+t,i)},e.CubismLogError=function(t){for(var i=[],r=1;r<arguments.length;r++)i[r-1]=arguments[r];(0,e.CubismLogPrintIn)(s.LogLevel.LogLevel_Error,"[E]"+t,i)}):a.CSM_LOG_LEVEL==a.CSM_LOG_LEVEL_ERROR&&(e.CubismLogError=function(t){for(var i=[],r=1;r<arguments.length;r++)i[r-1]=arguments[r];(0,e.CubismLogPrintIn)(s.LogLevel.LogLevel_Error,"[E]"+t,i)});var u=function(){function t(){}return t.print=function(t,e,i){if(!(t<s.CubismFramework.getLoggingLevel())){var r=s.CubismFramework.coreLogFunction;r&&r(e.replace(/\{(\d+)\}/g,(function(t,e){return i[e]})))}},t.dumpBytes=function(t,e,i){for(var r=0;r<i;r++)r%16==0&&r>0?this.print(t,"\n"):r%8==0&&r>0&&this.print(t,"  "),this.print(t,"{0} ",[255&e[r]]);this.print(t,"\n")},t}();e.CubismDebug=u;var l=o(i(1073));(e.Live2DCubismFramework||(e.Live2DCubismFramework={})).CubismDebug=l.CubismDebug},3706:function(t,e,i){var r,n=this&&this.__extends||(r=function(t,e){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},r(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),o=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i);var n=Object.getOwnPropertyDescriptor(e,i);n&&!("get"in n?!e.__esModule:n.writable||n.configurable)||(n={enumerable:!0,get:function(){return e[i]}}),Object.defineProperty(t,r,n)}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),a=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&o(e,t,i);return a(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.JsonMap=e.JsonArray=e.JsonNullvalue=e.JsonError=e.JsonString=e.JsonBoolean=e.JsonFloat=e.CubismJson=e.Value=void 0;var u=i(1671),l=i(502),c=i(1695),h=i(5760),p=i(1073),d="Error: type mismatch",g=function(){function t(){}return t.prototype.getRawString=function(t,e){return this.getString(t,e)},t.prototype.toInt=function(t){return void 0===t&&(t=0),t},t.prototype.toFloat=function(t){return void 0===t&&(t=0),t},t.prototype.toBoolean=function(t){return void 0===t&&(t=!1),t},t.prototype.getSize=function(){return 0},t.prototype.getArray=function(t){return void 0===t&&(t=null),t},t.prototype.getVector=function(t){return void 0===t&&(t=new h.csmVector),t},t.prototype.getMap=function(t){return t},t.prototype.getValueByIndex=function(e){return t.errorValue.setErrorNotForClientCall(d)},t.prototype.getValueByString=function(e){return t.nullValue.setErrorNotForClientCall(d)},t.prototype.getKeys=function(){return t.s_dummyKeys},t.prototype.isError=function(){return!1},t.prototype.isNull=function(){return!1},t.prototype.isBool=function(){return!1},t.prototype.isFloat=function(){return!1},t.prototype.isString=function(){return!1},t.prototype.isArray=function(){return!1},t.prototype.isMap=function(){return!1},t.prototype.equals=function(t){return!1},t.prototype.isStatic=function(){return!1},t.prototype.setErrorNotForClientCall=function(t){return b.errorValue},t.staticInitializeNotForClientCall=function(){f.trueValue=new f(!0),f.falseValue=new f(!1),t.errorValue=new b("ERROR",!0),t.nullValue=new v,t.s_dummyKeys=new h.csmVector},t.staticReleaseNotForClientCall=function(){f.trueValue=null,f.falseValue=null,t.errorValue=null,t.nullValue=null,t.s_dummyKeys=null},t}();e.Value=g;var _=function(){function t(t,e){this._error=null,this._lineCount=0,this._root=null,null!=t&&this.parseBytes(t,e)}return t.create=function(e,i){var r=new t;return r.parseBytes(e,i)?r:(t.delete(r),null)},t.delete=function(t){},t.prototype.getRoot=function(){return this._root},t.prototype.arrayBufferToString=function(t){for(var e=new Uint8Array(t),i="",r=0,n=e.length;r<n;++r)i+="%"+this.pad(e[r].toString(16));return decodeURIComponent(i)},t.prototype.pad=function(t){return t.length<2?"0"+t:t},t.prototype.parseBytes=function(t,e){var i,r=new Array(1),n=this.arrayBufferToString(t);return this._root=this.parseValue(n,e,0,r),this._error?(i="Json parse error : @line "+(this._lineCount+1)+"\n",this._root=new y(i),(0,p.CubismLogInfo)("{0}",this._root.getRawString()),!1):null!=this._root||(this._root=new b(new c.csmString(this._error),!1),!1)},t.prototype.getParseError=function(){return this._error},t.prototype.checkEndOfFile=function(){return this._root.getArray()[1].equals("EOF")},t.prototype.parseValue=function(t,e,i,r){if(this._error)return null;for(var n,o=null,a=i;a<e;a++)switch(t[a]){case"-":case".":case"0":case"1":case"2":case"3":case"4":case"5":case"6":case"7":case"8":case"9":var s=new Array(1);return n=(0,u.strtod)(t.slice(a),s),r[0]=t.indexOf(s[0]),new m(n);case'"':return new y(this.parseString(t,e,a+1,r));case"[":return this.parseArray(t,e,a+1,r);case"{":return this.parseObject(t,e,a+1,r);case"n":return a+3<e?(o=new v,r[0]=a+4):this._error="parse null",o;case"t":return a+3<e?(o=f.trueValue,r[0]=a+4):this._error="parse true",o;case"f":return a+4<e?(o=f.falseValue,r[0]=a+5):this._error="illegal ',' position",o;case",":return this._error="illegal ',' position",null;case"]":return r[0]=a,null;case"\n":this._lineCount++}return this._error="illegal end of value",null},t.prototype.parseString=function(t,e,i,r){if(this._error)return null;for(var n=i,o=new c.csmString(""),a=i;n<e;n++)switch(t[n]){case'"':return r[0]=n+1,o.append(t.slice(a),n-a),o.s;case"//":if(++n-1>a&&o.append(t.slice(a),n-a),a=n+1,n<e)switch(t[n]){case"\\":o.expansion(1,"\\");break;case'"':o.expansion(1,'"');break;case"/":o.expansion(1,"/");break;case"b":o.expansion(1,"\b");break;case"f":o.expansion(1,"\f");break;case"n":o.expansion(1,"\n");break;case"r":o.expansion(1,"\r");break;case"t":o.expansion(1,"\t");break;case"u":this._error="parse string/unicord escape not supported"}else this._error="parse string/escape error"}return this._error="parse string/illegal end",null},t.prototype.parseObject=function(t,e,i,r){if(this._error)return null;for(var n=new S,o="",a=i,s=Array(1),u=!1;a<e;a++){t:for(;a<e;a++)switch(t[a]){case'"':if(o=this.parseString(t,e,a+1,s),this._error)return null;a=s[0],u=!0;break t;case"}":return r[0]=a+1,n;case":":this._error="illegal ':' position";break;case"\n":this._lineCount++}if(!u)return this._error="key not found",null;u=!1;t:for(;a<e;a++)switch(t[a]){case":":u=!0,a++;break t;case"}":this._error="illegal '}' position";break;case"\n":this._lineCount++}if(!u)return this._error="':' not found",null;var l=this.parseValue(t,e,a,s);if(this._error)return null;a=s[0],n.put(o,l);t:for(;a<e;a++)switch(t[a]){case",":break t;case"}":return r[0]=a+1,n;case"\n":this._lineCount++}}return this._error="illegal end of perseObject",null},t.prototype.parseArray=function(t,e,i,r){if(this._error)return null;for(var n=new C,o=i,a=new Array(1);o<e;o++){var s=this.parseValue(t,e,o,a);if(this._error)return null;o=a[0],s&&n.add(s);t:for(;o<e;o++)switch(t[o]){case",":break t;case"]":return r[0]=o+1,n;case"\n":++this._lineCount}}return n=void 0,this._error="illegal end of parseObject",null},t}();e.CubismJson=_;var m=function(t){function e(e){var i=t.call(this)||this;return i._value=e,i}return n(e,t),e.prototype.isFloat=function(){return!0},e.prototype.getString=function(t,e){return this._value=parseFloat("\0"),this._stringBuffer="\0",this._stringBuffer},e.prototype.toInt=function(t){return void 0===t&&(t=0),parseInt(this._value.toString())},e.prototype.toFloat=function(t){return void 0===t&&(t=0),this._value},e.prototype.equals=function(t){return"number"==typeof t&&!Math.round(t)&&t==this._value},e}(g);e.JsonFloat=m;var f=function(t){function e(e){var i=t.call(this)||this;return i._boolValue=e,i}return n(e,t),e.prototype.isBool=function(){return!0},e.prototype.toBoolean=function(t){return void 0===t&&(t=!1),this._boolValue},e.prototype.getString=function(t,e){return this._stringBuffer=this._boolValue?"true":"false",this._stringBuffer},e.prototype.equals=function(t){return"boolean"==typeof t&&t==this._boolValue},e.prototype.isStatic=function(){return!0},e}(g);e.JsonBoolean=f;var y=function(t){function e(e){var i=t.call(this)||this;return"string"==typeof e&&(i._stringBuffer=e),e instanceof c.csmString&&(i._stringBuffer=e.s),i}return n(e,t),e.prototype.isString=function(){return!0},e.prototype.getString=function(t,e){return this._stringBuffer},e.prototype.equals=function(t){return"string"==typeof t?this._stringBuffer==t:t instanceof c.csmString&&this._stringBuffer==t.s},e}(g);e.JsonString=y;var b=function(t){function e(e,i){var r=this;return(r=t.call(this,e)||this)._isStatic=i,r}return n(e,t),e.prototype.isStatic=function(){return this._isStatic},e.prototype.setErrorNotForClientCall=function(t){return this._stringBuffer=t,this},e.prototype.isError=function(){return!0},e}(y);e.JsonError=b;var v=function(t){function e(){var e=t.call(this)||this;return e._stringBuffer="NullValue",e}return n(e,t),e.prototype.isNull=function(){return!0},e.prototype.getString=function(t,e){return this._stringBuffer},e.prototype.isStatic=function(){return!0},e.prototype.setErrorNotForClientCall=function(t){return this._stringBuffer=t,b.nullValue},e}(g);e.JsonNullvalue=v;var C=function(t){function e(){var e=t.call(this)||this;return e._array=new h.csmVector,e}return n(e,t),e.prototype.release=function(){for(var t=this._array.begin();t.notEqual(this._array.end());t.preIncrement()){var e=t.ptr();e&&!e.isStatic()&&(e=void 0,e=null)}},e.prototype.isArray=function(){return!0},e.prototype.getValueByIndex=function(t){if(t<0||this._array.getSize()<=t)return g.errorValue.setErrorNotForClientCall("Error: index out of bounds");var e=this._array.at(t);return null==e?g.nullValue:e},e.prototype.getValueByString=function(t){return g.errorValue.setErrorNotForClientCall(d)},e.prototype.getString=function(t,e){for(var i=e+"[\n",r=this._array.begin();r.notEqual(this._array.end());r.increment()){var n=r.ptr();this._stringBuffer+=e+""+n.getString(e+" ")+"\n"}return this._stringBuffer=i+e+"]\n",this._stringBuffer},e.prototype.add=function(t){this._array.pushBack(t)},e.prototype.getVector=function(t){return void 0===t&&(t=null),this._array},e.prototype.getSize=function(){return this._array.getSize()},e}(g);e.JsonArray=C;var S=function(t){function e(){var e=t.call(this)||this;return e._map=new l.csmMap,e}return n(e,t),e.prototype.release=function(){for(var t=this._map.begin();t.notEqual(this._map.end());){var e=t.ptr().second;e&&!e.isStatic()&&(e=void 0,e=null),t.preIncrement()}},e.prototype.isMap=function(){return!0},e.prototype.getValueByString=function(t){if(t instanceof c.csmString){var e=this._map.getValue(t.s);return null==e?g.nullValue:e}for(var i=this._map.begin();i.notEqual(this._map.end());i.preIncrement())if(i.ptr().first==t)return null==i.ptr().second?g.nullValue:i.ptr().second;return g.nullValue},e.prototype.getValueByIndex=function(t){return g.errorValue.setErrorNotForClientCall(d)},e.prototype.getString=function(t,e){this._stringBuffer=e+"{\n";for(var i=this._map.begin();i.notEqual(this._map.end());){var r=i.ptr().first,n=i.ptr().second;this._stringBuffer+=e+" "+r+" : "+n.getString(e+"   ")+" \n",i.preIncrement()}return this._stringBuffer+=e+"}\n",this._stringBuffer},e.prototype.getMap=function(t){return this._map},e.prototype.put=function(t,e){this._map.setValue(t,e)},e.prototype.getKeys=function(){if(!this._keys){this._keys=new h.csmVector;for(var t=this._map.begin();t.notEqual(this._map.end());){var e=t.ptr().first;this._keys.pushBack(e),t.preIncrement()}}return this._keys},e.prototype.getSize=function(){return this._keys.getSize()},e}(g);e.JsonMap=S;var P,M=s(i(3706));(P=e.Live2DCubismFramework||(e.Live2DCubismFramework={})).CubismJson=M.CubismJson,P.JsonArray=M.JsonArray,P.JsonBoolean=M.JsonBoolean,P.JsonError=M.JsonError,P.JsonFloat=M.JsonFloat,P.JsonMap=M.JsonMap,P.JsonNullvalue=M.JsonNullvalue,P.JsonString=M.JsonString,P.Value=M.Value},9556:function(t,e,i){Object.defineProperty(e,"__esModule",{value:!0}),e.RenderTargetHeight=e.RenderTargetWidth=e.CubismLoggingLevel=e.DebugTouchLogEnable=e.DebugLogEnable=e.PriorityForce=e.PriorityNormal=e.PriorityIdle=e.PriorityNone=e.HitAreaNameBody=e.HitAreaNameHead=e.MotionGroupTapBody=e.MotionGroupIdle=e.ModelDirSize=e.ModelDir=e.PowerImageName=e.GearImageName=e.BackImageName=e.ResourcesPath=e.ViewLogicalMaxTop=e.ViewLogicalMaxBottom=e.ViewLogicalMaxRight=e.ViewLogicalMaxLeft=e.ViewLogicalTop=e.ViewLogicalBottom=e.ViewLogicalRight=e.ViewLogicalLeft=e.ViewMinScale=e.ViewMaxScale=e.ViewScale=e.CanvasSize=void 0;var r=i(1671);e.CanvasSize={width:1024,height:1024},e.ViewScale=1.3,e.ViewMaxScale=2,e.ViewMinScale=.8,e.ViewLogicalLeft=-1,e.ViewLogicalRight=1,e.ViewLogicalBottom=-1,e.ViewLogicalTop=1,e.ViewLogicalMaxLeft=-2,e.ViewLogicalMaxRight=2,e.ViewLogicalMaxBottom=-2,e.ViewLogicalMaxTop=2,e.ResourcesPath="../../Resources/",e.BackImageName="",e.GearImageName="",e.PowerImageName="",e.ModelDir=["biandan"],e.ModelDirSize=e.ModelDir.length,e.MotionGroupIdle="Idle",e.MotionGroupTapBody="TapBody",e.HitAreaNameHead="Head",e.HitAreaNameBody="Body",e.PriorityNone=0,e.PriorityIdle=1,e.PriorityNormal=2,e.PriorityForce=3,e.DebugLogEnable=!1,e.DebugTouchLogEnable=!1,e.CubismLoggingLevel=r.LogLevel.LogLevel_Off,e.RenderTargetWidth=2048,e.RenderTargetHeight=2048,window.defineLive2D=function(t){var i=void 0===t?{}:t,r=i.viewScale,n=void 0===r?1.3:r,o=i.resourcesPath,a=void 0===o?"./Resources/":o,s=i.modelDir,u=void 0===s?["biandan"]:s;e.ViewScale=n,e.ResourcesPath=a,e.ModelDir=u,e.ModelDirSize=u.length}},7551:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i);var n=Object.getOwnPropertyDescriptor(e,i);n&&!("get"in n?!e.__esModule:n.writable||n.configurable)||(n={enumerable:!0,get:function(){return e[i]}}),Object.defineProperty(t,r,n)}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.LAppDelegate=e.frameBuffer=e.gl=e.s_instance=e.canvas=void 0;var a=i(1671),s=o(i(9556)),u=i(6424),l=i(1986),c=i(3938),h=i(4585);e.canvas=null,e.s_instance=null,e.gl=null,e.frameBuffer=null;var p=function(){function t(){this._captured=!1,this._mouseX=0,this._mouseY=0,this._isEnd=!1,this._cubismOption=new a.Option,this._view=new h.LAppView,this._textureManager=new c.LAppTextureManager}return t.getInstance=function(){return null==e.s_instance&&(e.s_instance=new t),e.s_instance},t.releaseInstance=function(){null!=e.s_instance&&e.s_instance.release(),e.s_instance=null},t.prototype.initialize=function(){return e.canvas=document.createElement("canvas"),"auto"===s.CanvasSize?this._resizeCanvas():(e.canvas.width=s.CanvasSize.width,e.canvas.height=s.CanvasSize.height),e.gl=e.canvas.getContext("webgl")||e.canvas.getContext("experimental-webgl"),e.gl?(document.querySelector("#live2d_canvas").appendChild(e.canvas),e.frameBuffer||(e.frameBuffer=e.gl.getParameter(e.gl.FRAMEBUFFER_BINDING)),e.gl.enable(e.gl.BLEND),"ontouchend"in e.canvas?(window.ontouchstart=m,window.ontouchmove=f,window.ontouchend=y,window.ontouchcancel=b):(window.onmousedown=d,window.onmousemove=g,window.onmouseup=_),this._view.initialize(),this.initializeCubism(),!0):(alert("Cannot initialize WebGL. This browser does not support."),e.gl=null,document.body.innerHTML="This browser does not support the <code>&lt;canvas&gt;</code> element.",!1)},t.prototype.onResize=function(){this._resizeCanvas(),this._view.initialize(),this._view.initializeSprite()},t.prototype.release=function(){this._textureManager.release(),this._textureManager=null,this._view.release(),this._view=null,u.LAppLive2DManager.releaseInstance(),a.CubismFramework.dispose()},t.prototype.run=function(){var t=this,i=function(){null!=e.s_instance&&(l.LAppPal.updateTime(),e.gl.clearColor(0,0,0,0),e.gl.enable(e.gl.DEPTH_TEST),e.gl.depthFunc(e.gl.LEQUAL),e.gl.clearDepth(1),e.gl.enable(e.gl.BLEND),t._view.render(),requestAnimationFrame(i))};i()},t.prototype.createShader=function(){var t=e.gl.createShader(e.gl.VERTEX_SHADER);if(null==t)return l.LAppPal.printMessage("failed to create vertexShader"),null;e.gl.shaderSource(t,"precision mediump float;attribute vec3 position;attribute vec2 uv;varying vec2 vuv;void main(void){   gl_Position = vec4(position, 1.0);   vuv = uv;}"),e.gl.compileShader(t);var i=e.gl.createShader(e.gl.FRAGMENT_SHADER);if(null==i)return l.LAppPal.printMessage("failed to create fragmentShader"),null;e.gl.shaderSource(i,"precision mediump float;varying vec2 vuv;uniform sampler2D texture;void main(void){   gl_FragColor = texture2D(texture, vuv);}"),e.gl.compileShader(i);var r=e.gl.createProgram();return e.gl.attachShader(r,t),e.gl.attachShader(r,i),e.gl.deleteShader(t),e.gl.deleteShader(i),e.gl.linkProgram(r),e.gl.useProgram(r),r},t.prototype.getView=function(){return this._view},t.prototype.getTextureManager=function(){return this._textureManager},t.prototype.initializeCubism=function(){this._cubismOption.logFunction=l.LAppPal.printMessage,this._cubismOption.loggingLevel=s.CubismLoggingLevel,a.CubismFramework.startUp(this._cubismOption),a.CubismFramework.initialize(),u.LAppLive2DManager.getInstance(),l.LAppPal.updateTime(),this._view.initializeSprite()},t.prototype._resizeCanvas=function(){e.canvas.width=window.innerWidth,e.canvas.height=window.innerHeight},t}();function d(t){if(p.getInstance()._view){p.getInstance()._captured=!0;var e=t.pageX,i=t.pageY;p.getInstance()._view.onTouchesBegan(e,i)}else l.LAppPal.printMessage("view notfound")}function g(t){if(p.getInstance()._view){var i=e.canvas.getBoundingClientRect(),r=t.clientX-i.left+i.width,n=t.clientY-i.top+i.height;p.getInstance()._view.onTouchesMoved(r,n)}else l.LAppPal.printMessage("view notfound")}function _(t){if(p.getInstance()._captured=!1,p.getInstance()._view){var i=e.canvas.getBoundingClientRect(),r=t.clientX-i.left,n=t.clientY-i.top;p.getInstance()._view.onTouchesEnded(r,n)}else l.LAppPal.printMessage("view notfound")}function m(t){if(p.getInstance()._view){p.getInstance()._captured=!0;var e=t.changedTouches[0].pageX,i=t.changedTouches[0].pageY;p.getInstance()._view.onTouchesBegan(e,i)}else l.LAppPal.printMessage("view notfound")}function f(t){if(p.getInstance()._captured)if(p.getInstance()._view){var i=e.canvas.getBoundingClientRect(),r=t.changedTouches[0].clientX-i.left+i.width,n=t.changedTouches[0].clientY-i.top+i.height;p.getInstance()._view.onTouchesMoved(r,n)}else l.LAppPal.printMessage("view notfound")}function y(t){if(p.getInstance()._captured=!1,p.getInstance()._view){var e=t.target.getBoundingClientRect(),i=t.changedTouches[0].clientX-e.left,r=t.changedTouches[0].clientY-e.top;p.getInstance()._view.onTouchesEnded(i,r)}else l.LAppPal.printMessage("view notfound")}function b(t){if(p.getInstance()._captured=!1,p.getInstance()._view){var e=t.target.getBoundingClientRect(),i=t.changedTouches[0].clientX-e.left,r=t.changedTouches[0].clientY-e.top;p.getInstance()._view.onTouchesEnded(i,r)}else l.LAppPal.printMessage("view notfound")}e.LAppDelegate=p},6424:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i);var n=Object.getOwnPropertyDescriptor(e,i);n&&!("get"in n?!e.__esModule:n.writable||n.configurable)||(n={enumerable:!0,get:function(){return e[i]}}),Object.defineProperty(t,r,n)}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.LAppLive2DManager=e.s_instance=void 0;var a=i(1149),s=i(5760),u=o(i(9556)),l=i(7551),c=i(398),h=i(1986);e.s_instance=null;var p=function(){function t(){this._finishedMotion=function(t){h.LAppPal.printMessage("Motion Finished:"),console.log(t)},this._viewMatrix=new a.CubismMatrix44,this._models=new s.csmVector,this._sceneIndex=0,this.changeScene(this._sceneIndex)}return t.getInstance=function(){return null==e.s_instance&&(e.s_instance=new t),e.s_instance},t.releaseInstance=function(){null!=e.s_instance&&(e.s_instance=void 0),e.s_instance=null},t.prototype.getModel=function(t){return t<this._models.getSize()?this._models.at(t):null},t.prototype.releaseAllModel=function(){for(var t=0;t<this._models.getSize();t++)this._models.at(t).release(),this._models.set(t,null);this._models.clear()},t.prototype.onDrag=function(t,e){for(var i=0;i<this._models.getSize();i++){var r=this.getModel(i);r&&r.setDragging(t,e)}},t.prototype.onTap=function(t,e){u.DebugLogEnable&&h.LAppPal.printMessage("[APP]tap point: {x: ".concat(t.toFixed(2)," y: ").concat(e.toFixed(2),"}"));for(var i=0;i<this._models.getSize();i++)this._models.at(i).hitTest(u.HitAreaNameHead,t,e)?(u.DebugLogEnable&&h.LAppPal.printMessage("[APP]hit area: [".concat(u.HitAreaNameHead,"]")),this._models.at(i).setRandomExpression()):this._models.at(i).hitTest(u.HitAreaNameBody,t,e)&&(u.DebugLogEnable&&h.LAppPal.printMessage("[APP]hit area: [".concat(u.HitAreaNameBody,"]")),this._models.at(i).startRandomMotion(u.MotionGroupTapBody,u.PriorityNormal,this._finishedMotion))},t.prototype.onUpdate=function(){for(var t=l.canvas.width,e=l.canvas.height,i=this._models.getSize(),r=0;r<i;++r){var n=new a.CubismMatrix44,o=this.getModel(r);o.getModel()&&(o.getModel().getCanvasWidth()>1&&t<e?(o.getModelMatrix().setWidth(2),n.scale(1,t/e)):n.scale(e/t,1),null!=this._viewMatrix&&n.multiplyByMatrix(this._viewMatrix)),o.update(),o.draw(n)}},t.prototype.nextScene=function(){var t=(this._sceneIndex+1)%u.ModelDirSize;this.changeScene(t)},t.prototype.changeScene=function(t){this._sceneIndex=t,u.DebugLogEnable&&h.LAppPal.printMessage("[APP]model index: ".concat(this._sceneIndex));var e=u.ModelDir[t],i=u.ResourcesPath+e+"/",r=u.ModelDir[t];r+=".model3.json",this.releaseAllModel(),this._models.pushBack(new c.LAppModel),this._models.at(0).loadAssets(i,r)},t.prototype.setViewMatrix=function(t){for(var e=0;e<16;e++)this._viewMatrix.getArray()[e]=t.getArray()[e]},t}();e.LAppLive2DManager=p},398:function(t,e,i){var r,n=this&&this.__extends||(r=function(t,e){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},r(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),o=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i);var n=Object.getOwnPropertyDescriptor(e,i);n&&!("get"in n?!e.__esModule:n.writable||n.configurable)||(n={enumerable:!0,get:function(){return e[i]}}),Object.defineProperty(t,r,n)}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),a=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&o(e,t,i);return a(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.LAppModel=void 0,i(7147);var u,l=i(7564),c=i(9462),h=i(5644),p=i(6325),d=i(1671),g=i(8385),_=i(8855),m=i(2928),f=i(502),y=i(5760),b=i(1073),v=s(i(9556)),C=i(7551),S=i(1986),P=i(5364);!function(t){t[t.LoadAssets=0]="LoadAssets",t[t.LoadModel=1]="LoadModel",t[t.WaitLoadModel=2]="WaitLoadModel",t[t.LoadExpression=3]="LoadExpression",t[t.WaitLoadExpression=4]="WaitLoadExpression",t[t.LoadPhysics=5]="LoadPhysics",t[t.WaitLoadPhysics=6]="WaitLoadPhysics",t[t.LoadPose=7]="LoadPose",t[t.WaitLoadPose=8]="WaitLoadPose",t[t.SetupEyeBlink=9]="SetupEyeBlink",t[t.SetupBreath=10]="SetupBreath",t[t.LoadUserData=11]="LoadUserData",t[t.WaitLoadUserData=12]="WaitLoadUserData",t[t.SetupEyeBlinkIds=13]="SetupEyeBlinkIds",t[t.SetupLipSyncIds=14]="SetupLipSyncIds",t[t.SetupLayout=15]="SetupLayout",t[t.LoadMotion=16]="LoadMotion",t[t.WaitLoadMotion=17]="WaitLoadMotion",t[t.CompleteInitialize=18]="CompleteInitialize",t[t.CompleteSetupModel=19]="CompleteSetupModel",t[t.LoadTexture=20]="LoadTexture",t[t.WaitLoadTexture=21]="WaitLoadTexture",t[t.CompleteSetup=22]="CompleteSetup"}(u||(u={}));var M=function(t){function e(){var e=t.call(this)||this;return e._modelSetting=null,e._modelHomeDir=null,e._userTimeSeconds=0,e._eyeBlinkIds=new y.csmVector,e._lipSyncIds=new y.csmVector,e._motions=new f.csmMap,e._expressions=new f.csmMap,e._hitArea=new y.csmVector,e._userArea=new y.csmVector,e._idParamAngleX=d.CubismFramework.getIdManager().getId(l.CubismDefaultParameterId.ParamAngleX),e._idParamAngleY=d.CubismFramework.getIdManager().getId(l.CubismDefaultParameterId.ParamAngleY),e._idParamAngleZ=d.CubismFramework.getIdManager().getId(l.CubismDefaultParameterId.ParamAngleZ),e._idParamEyeBallX=d.CubismFramework.getIdManager().getId(l.CubismDefaultParameterId.ParamEyeBallX),e._idParamEyeBallY=d.CubismFramework.getIdManager().getId(l.CubismDefaultParameterId.ParamEyeBallY),e._idParamBodyAngleX=d.CubismFramework.getIdManager().getId(l.CubismDefaultParameterId.ParamBodyAngleX),e._state=u.LoadAssets,e._expressionCount=0,e._textureCount=0,e._motionCount=0,e._allMotionCount=0,e._wavFileHandler=new P.LAppWavFileHandler,e}return n(e,t),e.prototype.loadAssets=function(t,e){var i=this;this._modelHomeDir=t,fetch("".concat(this._modelHomeDir).concat(e)).then((function(t){return t.arrayBuffer()})).then((function(t){var e=new c.CubismModelSettingJson(t,t.byteLength);i._state=u.LoadModel,i.setupModel(e)}))},e.prototype.setupModel=function(t){var e=this;if(this._updating=!0,this._initialized=!1,this._modelSetting=t,""!=this._modelSetting.getModelFileName()){var i=this._modelSetting.getModelFileName();fetch("".concat(this._modelHomeDir).concat(i)).then((function(t){return t.arrayBuffer()})).then((function(t){e.loadModel(t),e._state=u.LoadExpression,r()})),this._state=u.WaitLoadModel}else S.LAppPal.printMessage("Model data does not exist.");var r=function(){if(e._modelSetting.getExpressionCount()>0){for(var t=e._modelSetting.getExpressionCount(),i=function(i){var r=e._modelSetting.getExpressionName(i),o=e._modelSetting.getExpressionFileName(i);fetch("".concat(e._modelHomeDir).concat(o)).then((function(t){return t.arrayBuffer()})).then((function(i){var o=e.loadExpression(i,i.byteLength,r);null!=e._expressions.getValue(r)&&(_.ACubismMotion.delete(e._expressions.getValue(r)),e._expressions.setValue(r,null)),e._expressions.setValue(r,o),e._expressionCount++,e._expressionCount>=t&&(e._state=u.LoadPhysics,n())}))},r=0;r<t;r++)i(r);e._state=u.WaitLoadExpression}else e._state=u.LoadPhysics,n()},n=function(){if(""!=e._modelSetting.getPhysicsFileName()){var t=e._modelSetting.getPhysicsFileName();fetch("".concat(e._modelHomeDir).concat(t)).then((function(t){return t.arrayBuffer()})).then((function(t){e.loadPhysics(t,t.byteLength),e._state=u.LoadPose,o()})),e._state=u.WaitLoadPhysics}else e._state=u.LoadPose,o()},o=function(){if(""!=e._modelSetting.getPoseFileName()){var t=e._modelSetting.getPoseFileName();fetch("".concat(e._modelHomeDir).concat(t)).then((function(t){return t.arrayBuffer()})).then((function(t){e.loadPose(t,t.byteLength),e._state=u.SetupEyeBlink,a()})),e._state=u.WaitLoadPose}else e._state=u.SetupEyeBlink,a()},a=function(){e._modelSetting.getEyeBlinkParameterCount()>0&&(e._eyeBlink=p.CubismEyeBlink.create(e._modelSetting),e._state=u.SetupBreath),s()},s=function(){e._breath=h.CubismBreath.create();var t=new y.csmVector;t.pushBack(new h.BreathParameterData(e._idParamAngleX,0,15,6.5345,.5)),t.pushBack(new h.BreathParameterData(e._idParamAngleY,0,8,3.5345,.5)),t.pushBack(new h.BreathParameterData(e._idParamAngleZ,0,10,5.5345,.5)),t.pushBack(new h.BreathParameterData(e._idParamBodyAngleX,0,4,15.5345,.5)),t.pushBack(new h.BreathParameterData(d.CubismFramework.getIdManager().getId(l.CubismDefaultParameterId.ParamBreath),.5,.5,3.2345,1)),e._breath.setParameters(t),e._state=u.LoadUserData,c()},c=function(){if(""!=e._modelSetting.getUserDataFile()){var t=e._modelSetting.getUserDataFile();fetch("".concat(e._modelHomeDir).concat(t)).then((function(t){return t.arrayBuffer()})).then((function(t){e.loadUserData(t,t.byteLength),e._state=u.SetupEyeBlinkIds,g()})),e._state=u.WaitLoadUserData}else e._state=u.SetupEyeBlinkIds,g()},g=function(){for(var t=e._modelSetting.getEyeBlinkParameterCount(),i=0;i<t;++i)e._eyeBlinkIds.pushBack(e._modelSetting.getEyeBlinkParameterId(i));e._state=u.SetupLipSyncIds,m()},m=function(){for(var t=e._modelSetting.getLipSyncParameterCount(),i=0;i<t;++i)e._lipSyncIds.pushBack(e._modelSetting.getLipSyncParameterId(i));e._state=u.SetupLayout,b()},b=function(){var t=new f.csmMap;e._modelSetting.getLayoutMap(t),e._modelMatrix.setupFromLayout(t),e._state=u.LoadMotion,v()},v=function(){e._state=u.WaitLoadMotion,e._model.saveParameters(),e._allMotionCount=0,e._motionCount=0;for(var t=[],i=e._modelSetting.getMotionGroupCount(),r=0;r<i;r++)t[r]=e._modelSetting.getMotionGroupName(r),e._allMotionCount+=e._modelSetting.getMotionCount(t[r]);for(r=0;r<i;r++)e.preLoadMotionGroup(t[r]);0==i&&(e._state=u.LoadTexture,e._motionManager.stopAllMotions(),e._updating=!1,e._initialized=!0,e.createRenderer(),e.setupTextures(),e.getRenderer().startUp(C.gl))}},e.prototype.setupTextures=function(){var t=this;if(this._state==u.LoadTexture){for(var e=this._modelSetting.getTextureCount(),i=function(i){if(""==r._modelSetting.getTextureFileName(i))return console.log("getTextureFileName null"),"continue";var n=r._modelSetting.getTextureFileName(i);n=r._modelHomeDir+n,C.LAppDelegate.getInstance().getTextureManager().createTextureFromPngFile(n,!0,(function(r){t.getRenderer().bindTexture(i,r.id),t._textureCount++,t._textureCount>=e&&(t._state=u.CompleteSetup)})),r.getRenderer().setIsPremultipliedAlpha(!0)},r=this,n=0;n<e;n++)i(n);this._state=u.WaitLoadTexture}},e.prototype.reloadRenderer=function(){this.deleteRenderer(),this.createRenderer(),this.setupTextures()},e.prototype.update=function(){if(this._state==u.CompleteSetup){var t=S.LAppPal.getDeltaTime();this._userTimeSeconds+=t,this._dragManager.update(t),this._dragX=this._dragManager.getX(),this._dragY=this._dragManager.getY();var e=!1;if(this._model.loadParameters(),this._motionManager.isFinished()?this.startRandomMotion(v.MotionGroupIdle,v.PriorityIdle):e=this._motionManager.updateMotion(this._model,t),this._model.saveParameters(),e||null!=this._eyeBlink&&this._eyeBlink.updateParameters(this._model,t),null!=this._expressionManager&&this._expressionManager.updateMotion(this._model,t),this._model.addParameterValueById(this._idParamAngleX,30*this._dragX),this._model.addParameterValueById(this._idParamAngleY,30*this._dragY),this._model.addParameterValueById(this._idParamAngleZ,this._dragX*this._dragY*-30),this._model.addParameterValueById(this._idParamBodyAngleX,10*this._dragX),this._model.addParameterValueById(this._idParamEyeBallX,this._dragX),this._model.addParameterValueById(this._idParamEyeBallY,this._dragY),null!=this._breath&&this._breath.updateParameters(this._model,t),null!=this._physics&&this._physics.evaluate(this._model,t),this._lipsync){var i;this._wavFileHandler.update(t),i=this._wavFileHandler.getRms();for(var r=0;r<this._lipSyncIds.getSize();++r)this._model.addParameterValueById(this._lipSyncIds.at(r),i,.8)}null!=this._pose&&this._pose.updateParameters(this._model,t),this._model.update()}},e.prototype.startMotion=function(t,e,i,r){var n=this;if(i==v.PriorityForce)this._motionManager.setReservePriority(i);else if(!this._motionManager.reserveMotion(i))return this._debugMode&&S.LAppPal.printMessage("[APP]can't start motion."),m.InvalidMotionQueueEntryHandleValue;var o=this._modelSetting.getMotionFileName(t,e),a="".concat(t,"_").concat(e),s=this._motions.getValue(a),u=!1;null==s?fetch("".concat(this._modelHomeDir).concat(o)).then((function(t){return t.arrayBuffer()})).then((function(i){s=n.loadMotion(i,i.byteLength,null,r);var o=n._modelSetting.getMotionFadeInTimeValue(t,e);o>=0&&s.setFadeInTime(o),(o=n._modelSetting.getMotionFadeOutTimeValue(t,e))>=0&&s.setFadeOutTime(o),s.setEffectIds(n._eyeBlinkIds,n._lipSyncIds),u=!0})):s.setFinishedMotionHandler(r);var l=this._modelSetting.getMotionSoundFileName(t,e);if(0!=l.localeCompare("")){var c=l;c=this._modelHomeDir+c,this._wavFileHandler.start(c)}return this._debugMode&&S.LAppPal.printMessage("[APP]start motion: [".concat(t,"_").concat(e)),this._motionManager.startMotionPriority(s,u,i)},e.prototype.startRandomMotion=function(t,e,i){if(0==this._modelSetting.getMotionCount(t))return m.InvalidMotionQueueEntryHandleValue;var r=Math.floor(Math.random()*this._modelSetting.getMotionCount(t));return this.startMotion(t,r,e,i)},e.prototype.setExpression=function(t){var e=this._expressions.getValue(t);this._debugMode&&S.LAppPal.printMessage("[APP]expression: [".concat(t,"]")),null!=e?this._expressionManager.startMotionPriority(e,!1,v.PriorityForce):this._debugMode&&S.LAppPal.printMessage("[APP]expression[".concat(t,"] is null"))},e.prototype.setRandomExpression=function(){if(0!=this._expressions.getSize())for(var t=Math.floor(Math.random()*this._expressions.getSize()),e=0;e<this._expressions.getSize();e++)if(e==t){var i=this._expressions._keyValues[e].first;return void this.setExpression(i)}},e.prototype.motionEventFired=function(t){(0,b.CubismLogInfo)("{0} is fired on LAppModel!!",t.s)},e.prototype.hitTest=function(t,e,i){if(this._opacity<1)return!1;for(var r=this._modelSetting.getHitAreasCount(),n=0;n<r;n++)if(this._modelSetting.getHitAreaName(n)==t){var o=this._modelSetting.getHitAreaId(n);return this.isHit(o,e,i)}return!1},e.prototype.preLoadMotionGroup=function(t){for(var e=this,i=function(i){var n=r._modelSetting.getMotionFileName(t,i),o="".concat(t,"_").concat(i);r._debugMode&&S.LAppPal.printMessage("[APP]load motion: ".concat(n," => [").concat(o,"]")),fetch("".concat(r._modelHomeDir).concat(n)).then((function(t){return t.arrayBuffer()})).then((function(r){var n=e.loadMotion(r,r.byteLength,o),a=e._modelSetting.getMotionFadeInTimeValue(t,i);a>=0&&n.setFadeInTime(a),(a=e._modelSetting.getMotionFadeOutTimeValue(t,i))>=0&&n.setFadeOutTime(a),n.setEffectIds(e._eyeBlinkIds,e._lipSyncIds),null!=e._motions.getValue(o)&&_.ACubismMotion.delete(e._motions.getValue(o)),e._motions.setValue(o,n),e._motionCount++,e._motionCount>=e._allMotionCount&&(e._state=u.LoadTexture,e._motionManager.stopAllMotions(),e._updating=!1,e._initialized=!0,e.createRenderer(),e.setupTextures(),e.getRenderer().startUp(C.gl))}))},r=this,n=0;n<this._modelSetting.getMotionCount(t);n++)i(n)},e.prototype.releaseMotions=function(){this._motions.clear()},e.prototype.releaseExpressions=function(){this._expressions.clear()},e.prototype.doDraw=function(){if(null!=this._model){var t=[0,0,C.canvas.width,C.canvas.height];this.getRenderer().setRenderState(C.frameBuffer,t),this.getRenderer().drawModel()}},e.prototype.draw=function(t){null!=this._model&&this._state==u.CompleteSetup&&(t.multiplyByMatrix(this._modelMatrix),this.getRenderer().setMvpMatrix(t),this.doDraw())},e}(g.CubismUserModel);e.LAppModel=M},1986:function(t,e){Object.defineProperty(e,"__esModule",{value:!0}),e.LAppPal=void 0;var i=function(){function t(){}return t.loadFileAsBytes=function(t,e){fetch(t).then((function(t){return t.arrayBuffer()})).then((function(t){return e(t,t.byteLength)}))},t.getDeltaTime=function(){return this.s_deltaTime},t.updateTime=function(){this.s_currentFrame=Date.now(),this.s_deltaTime=(this.s_currentFrame-this.s_lastFrame)/1e3,this.s_lastFrame=this.s_currentFrame},t.printMessage=function(t){console.log(t)},t.lastUpdate=Date.now(),t.s_currentFrame=0,t.s_lastFrame=0,t.s_deltaTime=0,t}();e.LAppPal=i},5279:function(t,e,i){Object.defineProperty(e,"__esModule",{value:!0}),e.Rect=e.LAppSprite=void 0;var r=i(7551),n=function(){function t(t,e,i,r,n){this._rect=new o,this._rect.left=t-.5*i,this._rect.right=t+.5*i,this._rect.up=e+.5*r,this._rect.down=e-.5*r,this._texture=n,this._vertexBuffer=null,this._uvBuffer=null,this._indexBuffer=null,this._positionLocation=null,this._uvLocation=null,this._textureLocation=null,this._positionArray=null,this._uvArray=null,this._indexArray=null,this._firstDraw=!0}return t.prototype.release=function(){this._rect=null,r.gl.deleteTexture(this._texture),this._texture=null,r.gl.deleteBuffer(this._uvBuffer),this._uvBuffer=null,r.gl.deleteBuffer(this._vertexBuffer),this._vertexBuffer=null,r.gl.deleteBuffer(this._indexBuffer),this._indexBuffer=null},t.prototype.getTexture=function(){return this._texture},t.prototype.render=function(t){if(null!=this._texture){if(this._firstDraw){this._positionLocation=r.gl.getAttribLocation(t,"position"),r.gl.enableVertexAttribArray(this._positionLocation),this._uvLocation=r.gl.getAttribLocation(t,"uv"),r.gl.enableVertexAttribArray(this._uvLocation),this._textureLocation=r.gl.getUniformLocation(t,"texture"),r.gl.uniform1i(this._textureLocation,0),this._uvArray=new Float32Array([1,0,0,0,0,1,1,1]),this._uvBuffer=r.gl.createBuffer();var e=r.canvas.width,i=r.canvas.height;this._positionArray=new Float32Array([(this._rect.right-.5*e)/(.5*e),(this._rect.up-.5*i)/(.5*i),(this._rect.left-.5*e)/(.5*e),(this._rect.up-.5*i)/(.5*i),(this._rect.left-.5*e)/(.5*e),(this._rect.down-.5*i)/(.5*i),(this._rect.right-.5*e)/(.5*e),(this._rect.down-.5*i)/(.5*i)]),this._vertexBuffer=r.gl.createBuffer(),this._indexArray=new Uint16Array([0,1,2,3,2,0]),this._indexBuffer=r.gl.createBuffer(),this._firstDraw=!1}r.gl.bindBuffer(r.gl.ARRAY_BUFFER,this._uvBuffer),r.gl.bufferData(r.gl.ARRAY_BUFFER,this._uvArray,r.gl.STATIC_DRAW),r.gl.vertexAttribPointer(this._uvLocation,2,r.gl.FLOAT,!1,0,0),r.gl.bindBuffer(r.gl.ARRAY_BUFFER,this._vertexBuffer),r.gl.bufferData(r.gl.ARRAY_BUFFER,this._positionArray,r.gl.STATIC_DRAW),r.gl.vertexAttribPointer(this._positionLocation,2,r.gl.FLOAT,!1,0,0),r.gl.bindBuffer(r.gl.ELEMENT_ARRAY_BUFFER,this._indexBuffer),r.gl.bufferData(r.gl.ELEMENT_ARRAY_BUFFER,this._indexArray,r.gl.DYNAMIC_DRAW),r.gl.bindTexture(r.gl.TEXTURE_2D,this._texture),r.gl.drawElements(r.gl.TRIANGLES,this._indexArray.length,r.gl.UNSIGNED_SHORT,0)}},t.prototype.isHit=function(t,e){var i=r.canvas.height-e;return t>=this._rect.left&&t<=this._rect.right&&i<=this._rect.up&&i>=this._rect.down},t}();e.LAppSprite=n;var o=function(){};e.Rect=o},3938:function(t,e,i){Object.defineProperty(e,"__esModule",{value:!0}),e.TextureInfo=e.LAppTextureManager=void 0;var r=i(5760),n=i(7551),o=function(){function t(){this._textures=new r.csmVector}return t.prototype.release=function(){for(var t=this._textures.begin();t.notEqual(this._textures.end());t.preIncrement())n.gl.deleteTexture(t.ptr().id);this._textures=null},t.prototype.createTextureFromPngFile=function(t,e,i){for(var r=this,o=function(r){if(r.ptr().fileName==t&&r.ptr().usePremultply==e)return r.ptr().img=new Image,r.ptr().img.onload=function(){return i(r.ptr())},r.ptr().img.src=t,{value:void 0}},s=this._textures.begin();s.notEqual(this._textures.end());s.preIncrement()){var u=o(s);if("object"==typeof u)return u.value}var l=new Image;l.onload=function(){var o=n.gl.createTexture();n.gl.bindTexture(n.gl.TEXTURE_2D,o),n.gl.texParameteri(n.gl.TEXTURE_2D,n.gl.TEXTURE_MIN_FILTER,n.gl.LINEAR_MIPMAP_LINEAR),n.gl.texParameteri(n.gl.TEXTURE_2D,n.gl.TEXTURE_MAG_FILTER,n.gl.LINEAR),e&&n.gl.pixelStorei(n.gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,1),n.gl.texImage2D(n.gl.TEXTURE_2D,0,n.gl.RGBA,n.gl.RGBA,n.gl.UNSIGNED_BYTE,l),n.gl.generateMipmap(n.gl.TEXTURE_2D),n.gl.bindTexture(n.gl.TEXTURE_2D,null);var s=new a;null!=s&&(s.fileName=t,s.width=l.width,s.height=l.height,s.id=o,s.img=l,s.usePremultply=e,r._textures.pushBack(s)),i(s)},l.src=t},t.prototype.releaseTextures=function(){for(var t=0;t<this._textures.getSize();t++)this._textures.set(t,null);this._textures.clear()},t.prototype.releaseTextureByTexture=function(t){for(var e=0;e<this._textures.getSize();e++)if(this._textures.at(e).id==t){this._textures.set(e,null),this._textures.remove(e);break}},t.prototype.releaseTextureByFilePath=function(t){for(var e=0;e<this._textures.getSize();e++)if(this._textures.at(e).fileName==t){this._textures.set(e,null),this._textures.remove(e);break}},t}();e.LAppTextureManager=o;var a=function(){this.id=null,this.width=0,this.height=0};e.TextureInfo=a},4585:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i);var n=Object.getOwnPropertyDescriptor(e,i);n&&!("get"in n?!e.__esModule:n.writable||n.configurable)||(n={enumerable:!0,get:function(){return e[i]}}),Object.defineProperty(t,r,n)}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.LAppView=void 0;var a=i(1149),s=i(9248),u=o(i(9556)),l=i(7551),c=i(6424),h=i(1986),p=i(5279),d=i(9307),g=function(){function t(){this._programId=null,this._back=null,this._gear=null,this._touchManager=new d.TouchManager,this._deviceToScreen=new a.CubismMatrix44,this._viewMatrix=new s.CubismViewMatrix}return t.prototype.initialize=function(){var t=l.canvas.width,e=l.canvas.height,i=t/e,r=-i,n=i,o=u.ViewLogicalLeft,a=u.ViewLogicalRight;if(this._viewMatrix.setScreenRect(r,n,o,a),this._viewMatrix.scale(u.ViewScale,u.ViewScale),this._deviceToScreen.loadIdentity(),t>e){var s=Math.abs(n-r);this._deviceToScreen.scaleRelative(s/t,-s/t)}else{var c=Math.abs(a-o);this._deviceToScreen.scaleRelative(c/e,-c/e)}this._deviceToScreen.translateRelative(.5*-t,.5*-e),this._viewMatrix.setMaxScale(u.ViewMaxScale),this._viewMatrix.setMinScale(u.ViewMinScale),this._viewMatrix.setMaxScreenRect(u.ViewLogicalMaxLeft,u.ViewLogicalMaxRight,u.ViewLogicalMaxBottom,u.ViewLogicalMaxTop)},t.prototype.release=function(){this._viewMatrix=null,this._touchManager=null,this._deviceToScreen=null,this._gear.release(),this._gear=null,this._back.release(),this._back=null,l.gl.deleteProgram(this._programId),this._programId=null},t.prototype.render=function(){l.gl.useProgram(this._programId),this._back&&this._back.render(this._programId),this._gear&&this._gear.render(this._programId),l.gl.flush();var t=c.LAppLive2DManager.getInstance();t.setViewMatrix(this._viewMatrix),t.onUpdate()},t.prototype.initializeSprite=function(){var t=this,e=l.canvas.width,i=l.canvas.height,r=l.LAppDelegate.getInstance().getTextureManager(),n=u.ResourcesPath,o="";o=u.BackImageName,r.createTextureFromPngFile(n+o,!1,(function(r){var n=.5*e,o=.5*i,a=2*r.width,s=.95*i;t._back=new p.LAppSprite(n,o,a,s,r.id)})),o=u.GearImageName,r.createTextureFromPngFile(n+o,!1,(function(r){var n=e-.5*r.width,o=i-.5*r.height,a=r.width,s=r.height;t._gear=new p.LAppSprite(n,o,a,s,r.id)})),null==this._programId&&(this._programId=l.LAppDelegate.getInstance().createShader())},t.prototype.onTouchesBegan=function(t,e){this._touchManager.touchesBegan(t,e)},t.prototype.onTouchesMoved=function(t,e){var i=this.transformViewX(this._touchManager.getX()),r=this.transformViewY(this._touchManager.getY());this._touchManager.touchesMoved(t,e),c.LAppLive2DManager.getInstance().onDrag(i,r)},t.prototype.onTouchesEnded=function(t,e){var i=c.LAppLive2DManager.getInstance();i.onDrag(0,0);var r=this._deviceToScreen.transformX(this._touchManager.getX()),n=this._deviceToScreen.transformY(this._touchManager.getY());u.DebugTouchLogEnable&&h.LAppPal.printMessage("[APP]touchesEnded x: ".concat(r," y: ").concat(n)),i.onTap(r,n)},t.prototype.transformViewX=function(t){var e=this._deviceToScreen.transformX(t);return this._viewMatrix.invertTransformX(e)},t.prototype.transformViewY=function(t){var e=this._deviceToScreen.transformY(t);return this._viewMatrix.invertTransformY(e)},t.prototype.transformScreenX=function(t){return this._deviceToScreen.transformX(t)},t.prototype.transformScreenY=function(t){return this._deviceToScreen.transformY(t)},t}();e.LAppView=g},5364:function(t,e){var i=this&&this.__awaiter||function(t,e,i,r){return new(i||(i=Promise))((function(n,o){function a(t){try{u(r.next(t))}catch(t){o(t)}}function s(t){try{u(r.throw(t))}catch(t){o(t)}}function u(t){var e;t.done?n(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(a,s)}u((r=r.apply(t,e||[])).next())}))},r=this&&this.__generator||function(t,e){var i,r,n,o,a={label:0,sent:function(){if(1&n[0])throw n[1];return n[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(i)throw new TypeError("Generator is already executing.");for(;a;)try{if(i=1,r&&(n=2&o[0]?r.return:o[0]?r.throw||((n=r.return)&&n.call(r),0):r.next)&&!(n=n.call(r,o[1])).done)return n;switch(r=0,n&&(o=[2&o[0],n.value]),o[0]){case 0:case 1:n=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,r=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!((n=(n=a.trys).length>0&&n[n.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!n||o[1]>n[0]&&o[1]<n[3])){a.label=o[1];break}if(6===o[0]&&a.label<n[1]){a.label=n[1],n=o;break}if(n&&a.label<n[2]){a.label=n[2],a.ops.push(o);break}n[2]&&a.ops.pop(),a.trys.pop();continue}o=e.call(t,a)}catch(t){o=[6,t],r=0}finally{i=n=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}};Object.defineProperty(e,"__esModule",{value:!0}),e.ByteReader=e.WavFileInfo=e.LAppWavFileHandler=e.s_instance=void 0,e.s_instance=null;var n=function(){function t(){var t=this;this._loadFiletoBytes=function(e,i){t._byteReader._fileByte=e,t._byteReader._fileDataView=new DataView(t._byteReader._fileByte),t._byteReader._fileSize=i},this._pcmData=null,this._userTimeSeconds=0,this._lastRms=0,this._sampleOffset=0,this._wavFileInfo=new o,this._byteReader=new a}return t.getInstance=function(){return null==e.s_instance&&(e.s_instance=new t),e.s_instance},t.releaseInstance=function(){null!=e.s_instance&&(e.s_instance=void 0),e.s_instance=null},t.prototype.update=function(t){var e,i;if(null==this._pcmData||this._sampleOffset>=this._wavFileInfo._samplesPerChannel)return this._lastRms=0,!1;this._userTimeSeconds+=t,(e=Math.floor(this._userTimeSeconds*this._wavFileInfo._samplingRate))>this._wavFileInfo._samplesPerChannel&&(e=this._wavFileInfo._samplesPerChannel),i=0;for(var r=0;r<this._wavFileInfo._numberOfChannels;r++)for(var n=this._sampleOffset;n<e;n++){var o=this._pcmData[r][n];i+=o*o}return i=Math.sqrt(i/(this._wavFileInfo._numberOfChannels*(e-this._sampleOffset))),this._lastRms=i,this._sampleOffset=e,!0},t.prototype.start=function(t){this._sampleOffset=0,this._userTimeSeconds=0,this._lastRms=0,this.loadWavFile(t)},t.prototype.getRms=function(){return this._lastRms},t.prototype.loadWavFile=function(t){var e=this,n=!1;return null!=this._pcmData&&this.releasePcmData(),i(e,void 0,void 0,(function(){var o,a,s,u,l;return r(this,(function(c){switch(c.label){case 0:return o=this._byteReader,[4,i(e,void 0,void 0,(function(){return r(this,(function(e){return[2,fetch(t).then((function(t){return t.arrayBuffer()}))]}))}))];case 1:if(o._fileByte=c.sent(),this._byteReader._fileDataView=new DataView(this._byteReader._fileByte),this._byteReader._fileSize=this._byteReader._fileByte.byteLength,this._byteReader._readOffset=0,null==this._byteReader._fileByte||this._byteReader._fileSize<4)return[2,!1];this._wavFileInfo._fileName=t;try{if(!this._byteReader.getCheckSignature("RIFF"))throw n=!1,new Error('Cannot find Signeture "RIFF".');if(this._byteReader.get32LittleEndian(),!this._byteReader.getCheckSignature("WAVE"))throw n=!1,new Error('Cannot find Signeture "WAVE".');if(!this._byteReader.getCheckSignature("fmt "))throw n=!1,new Error('Cannot find Signeture "fmt".');if(a=this._byteReader.get32LittleEndian(),1!=this._byteReader.get16LittleEndian())throw n=!1,new Error("File is not linear PCM.");for(this._wavFileInfo._numberOfChannels=this._byteReader.get16LittleEndian(),this._wavFileInfo._samplingRate=this._byteReader.get32LittleEndian(),this._byteReader.get32LittleEndian(),this._byteReader.get16LittleEndian(),this._wavFileInfo._bitsPerSample=this._byteReader.get16LittleEndian(),a>16&&(this._byteReader._readOffset+=a-16);!this._byteReader.getCheckSignature("data")&&this._byteReader._readOffset<this._byteReader._fileSize;)this._byteReader._readOffset+=this._byteReader.get32LittleEndian()+4;if(this._byteReader._readOffset>=this._byteReader._fileSize)throw n=!1,new Error('Cannot find "data" Chunk.');for(s=this._byteReader.get32LittleEndian(),this._wavFileInfo._samplesPerChannel=8*s/(this._wavFileInfo._bitsPerSample*this._wavFileInfo._numberOfChannels),this._pcmData=new Array(this._wavFileInfo._numberOfChannels),l=0;l<this._wavFileInfo._numberOfChannels;l++)this._pcmData[l]=new Float32Array(this._wavFileInfo._samplesPerChannel);for(u=0;u<this._wavFileInfo._samplesPerChannel;u++)for(l=0;l<this._wavFileInfo._numberOfChannels;l++)this._pcmData[l][u]=this.getPcmSample();n=!0}catch(t){console.log(t)}return[2]}}))})),n},t.prototype.getPcmSample=function(){var t;switch(this._wavFileInfo._bitsPerSample){case 8:t=this._byteReader.get8()-128,t<<=24;break;case 16:t=this._byteReader.get16LittleEndian()<<16;break;case 24:t=this._byteReader.get24LittleEndian()<<8;break;default:t=0}return t/2147483647},t.prototype.releasePcmData=function(){for(var t=0;t<this._wavFileInfo._numberOfChannels;t++)delete this._pcmData[t];delete this._pcmData,this._pcmData=null},t}();e.LAppWavFileHandler=n;var o=function(){this._fileName="",this._numberOfChannels=0,this._bitsPerSample=0,this._samplingRate=0,this._samplesPerChannel=0};e.WavFileInfo=o;var a=function(){function t(){this._fileByte=null,this._fileDataView=null,this._fileSize=0,this._readOffset=0}return t.prototype.get8=function(){var t=this._fileDataView.getUint8(this._readOffset);return this._readOffset++,t},t.prototype.get16LittleEndian=function(){var t=this._fileDataView.getUint8(this._readOffset+1)<<8|this._fileDataView.getUint8(this._readOffset);return this._readOffset+=2,t},t.prototype.get24LittleEndian=function(){var t=this._fileDataView.getUint8(this._readOffset+2)<<16|this._fileDataView.getUint8(this._readOffset+1)<<8|this._fileDataView.getUint8(this._readOffset);return this._readOffset+=3,t},t.prototype.get32LittleEndian=function(){var t=this._fileDataView.getUint8(this._readOffset+3)<<24|this._fileDataView.getUint8(this._readOffset+2)<<16|this._fileDataView.getUint8(this._readOffset+1)<<8|this._fileDataView.getUint8(this._readOffset);return this._readOffset+=4,t},t.prototype.getCheckSignature=function(t){var e=new Uint8Array(4),i=(new TextEncoder).encode(t);if(4!=t.length)return!1;for(var r=0;r<4;r++)e[r]=this.get8();return e[0]==i[0]&&e[1]==i[1]&&e[2]==i[2]&&e[3]==i[3]},t}();e.ByteReader=a},8519:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i);var n=Object.getOwnPropertyDescriptor(e,i);n&&!("get"in n?!e.__esModule:n.writable||n.configurable)||(n={enumerable:!0,get:function(){return e[i]}}),Object.defineProperty(t,r,n)}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0});var a=i(7551),s=o(i(9556));window.LAppDelegate=a.LAppDelegate,window.onbeforeunload=function(){return a.LAppDelegate.releaseInstance()},window.onresize=function(){"auto"===s.CanvasSize&&a.LAppDelegate.getInstance().onResize()}},9307:function(t,e){Object.defineProperty(e,"__esModule",{value:!0}),e.TouchManager=void 0;var i=function(){function t(){this._startX=0,this._startY=0,this._lastX=0,this._lastY=0,this._lastX1=0,this._lastY1=0,this._lastX2=0,this._lastY2=0,this._lastTouchDistance=0,this._deltaX=0,this._deltaY=0,this._scale=1,this._touchSingle=!1,this._flipAvailable=!1}return t.prototype.getCenterX=function(){return this._lastX},t.prototype.getCenterY=function(){return this._lastY},t.prototype.getDeltaX=function(){return this._deltaX},t.prototype.getDeltaY=function(){return this._deltaY},t.prototype.getStartX=function(){return this._startX},t.prototype.getStartY=function(){return this._startY},t.prototype.getScale=function(){return this._scale},t.prototype.getX=function(){return this._lastX},t.prototype.getY=function(){return this._lastY},t.prototype.getX1=function(){return this._lastX1},t.prototype.getY1=function(){return this._lastY1},t.prototype.getX2=function(){return this._lastX2},t.prototype.getY2=function(){return this._lastY2},t.prototype.isSingleTouch=function(){return this._touchSingle},t.prototype.isFlickAvailable=function(){return this._flipAvailable},t.prototype.disableFlick=function(){this._flipAvailable=!1},t.prototype.touchesBegan=function(t,e){this._lastX=t,this._lastY=e,this._startX=t,this._startY=e,this._lastTouchDistance=-1,this._flipAvailable=!0,this._touchSingle=!0},t.prototype.touchesMoved=function(t,e){this._lastX=t,this._lastY=e,this._lastTouchDistance=-1,this._touchSingle=!0},t.prototype.getFlickDistance=function(){return this.calculateDistance(this._startX,this._startY,this._lastX,this._lastY)},t.prototype.calculateDistance=function(t,e,i,r){return Math.sqrt((t-i)*(t-i)+(e-r)*(e-r))},t.prototype.calculateMovingAmount=function(t,e){if(t>0!=e>0)return 0;var i=t>0?1:-1,r=Math.abs(t),n=Math.abs(e);return i*(r<n?r:n)},t}();e.TouchManager=i},7147:function(t,e,i){i.r(e),i.d(e,{DOMException:function(){return x},Headers:function(){return g},Request:function(){return C},Response:function(){return P},fetch:function(){return w}});var r="undefined"!=typeof globalThis&&globalThis||"undefined"!=typeof self&&self||void 0!==r&&r,n="URLSearchParams"in r,o="Symbol"in r&&"iterator"in Symbol,a="FileReader"in r&&"Blob"in r&&function(){try{return new Blob,!0}catch(t){return!1}}(),s="FormData"in r,u="ArrayBuffer"in r;if(u)var l=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],c=ArrayBuffer.isView||function(t){return t&&l.indexOf(Object.prototype.toString.call(t))>-1};function h(t){if("string"!=typeof t&&(t=String(t)),/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(t)||""===t)throw new TypeError('Invalid character in header field name: "'+t+'"');return t.toLowerCase()}function p(t){return"string"!=typeof t&&(t=String(t)),t}function d(t){var e={next:function(){var e=t.shift();return{done:void 0===e,value:e}}};return o&&(e[Symbol.iterator]=function(){return e}),e}function g(t){this.map={},t instanceof g?t.forEach((function(t,e){this.append(e,t)}),this):Array.isArray(t)?t.forEach((function(t){this.append(t[0],t[1])}),this):t&&Object.getOwnPropertyNames(t).forEach((function(e){this.append(e,t[e])}),this)}function _(t){if(t.bodyUsed)return Promise.reject(new TypeError("Already read"));t.bodyUsed=!0}function m(t){return new Promise((function(e,i){t.onload=function(){e(t.result)},t.onerror=function(){i(t.error)}}))}function f(t){var e=new FileReader,i=m(e);return e.readAsArrayBuffer(t),i}function y(t){if(t.slice)return t.slice(0);var e=new Uint8Array(t.byteLength);return e.set(new Uint8Array(t)),e.buffer}function b(){return this.bodyUsed=!1,this._initBody=function(t){var e;this.bodyUsed=this.bodyUsed,this._bodyInit=t,t?"string"==typeof t?this._bodyText=t:a&&Blob.prototype.isPrototypeOf(t)?this._bodyBlob=t:s&&FormData.prototype.isPrototypeOf(t)?this._bodyFormData=t:n&&URLSearchParams.prototype.isPrototypeOf(t)?this._bodyText=t.toString():u&&a&&(e=t)&&DataView.prototype.isPrototypeOf(e)?(this._bodyArrayBuffer=y(t.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer])):u&&(ArrayBuffer.prototype.isPrototypeOf(t)||c(t))?this._bodyArrayBuffer=y(t):this._bodyText=t=Object.prototype.toString.call(t):this._bodyText="",this.headers.get("content-type")||("string"==typeof t?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):n&&URLSearchParams.prototype.isPrototypeOf(t)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},a&&(this.blob=function(){var t=_(this);if(t)return t;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?_(this)||(ArrayBuffer.isView(this._bodyArrayBuffer)?Promise.resolve(this._bodyArrayBuffer.buffer.slice(this._bodyArrayBuffer.byteOffset,this._bodyArrayBuffer.byteOffset+this._bodyArrayBuffer.byteLength)):Promise.resolve(this._bodyArrayBuffer)):this.blob().then(f)}),this.text=function(){var t,e,i,r=_(this);if(r)return r;if(this._bodyBlob)return t=this._bodyBlob,i=m(e=new FileReader),e.readAsText(t),i;if(this._bodyArrayBuffer)return Promise.resolve(function(t){for(var e=new Uint8Array(t),i=new Array(e.length),r=0;r<e.length;r++)i[r]=String.fromCharCode(e[r]);return i.join("")}(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},s&&(this.formData=function(){return this.text().then(S)}),this.json=function(){return this.text().then(JSON.parse)},this}g.prototype.append=function(t,e){t=h(t),e=p(e);var i=this.map[t];this.map[t]=i?i+", "+e:e},g.prototype.delete=function(t){delete this.map[h(t)]},g.prototype.get=function(t){return t=h(t),this.has(t)?this.map[t]:null},g.prototype.has=function(t){return this.map.hasOwnProperty(h(t))},g.prototype.set=function(t,e){this.map[h(t)]=p(e)},g.prototype.forEach=function(t,e){for(var i in this.map)this.map.hasOwnProperty(i)&&t.call(e,this.map[i],i,this)},g.prototype.keys=function(){var t=[];return this.forEach((function(e,i){t.push(i)})),d(t)},g.prototype.values=function(){var t=[];return this.forEach((function(e){t.push(e)})),d(t)},g.prototype.entries=function(){var t=[];return this.forEach((function(e,i){t.push([i,e])})),d(t)},o&&(g.prototype[Symbol.iterator]=g.prototype.entries);var v=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];function C(t,e){if(!(this instanceof C))throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');var i,r,n=(e=e||{}).body;if(t instanceof C){if(t.bodyUsed)throw new TypeError("Already read");this.url=t.url,this.credentials=t.credentials,e.headers||(this.headers=new g(t.headers)),this.method=t.method,this.mode=t.mode,this.signal=t.signal,n||null==t._bodyInit||(n=t._bodyInit,t.bodyUsed=!0)}else this.url=String(t);if(this.credentials=e.credentials||this.credentials||"same-origin",!e.headers&&this.headers||(this.headers=new g(e.headers)),this.method=(r=(i=e.method||this.method||"GET").toUpperCase(),v.indexOf(r)>-1?r:i),this.mode=e.mode||this.mode||null,this.signal=e.signal||this.signal,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&n)throw new TypeError("Body not allowed for GET or HEAD requests");if(this._initBody(n),!("GET"!==this.method&&"HEAD"!==this.method||"no-store"!==e.cache&&"no-cache"!==e.cache)){var o=/([?&])_=[^&]*/;o.test(this.url)?this.url=this.url.replace(o,"$1_="+(new Date).getTime()):this.url+=(/\?/.test(this.url)?"&":"?")+"_="+(new Date).getTime()}}function S(t){var e=new FormData;return t.trim().split("&").forEach((function(t){if(t){var i=t.split("="),r=i.shift().replace(/\+/g," "),n=i.join("=").replace(/\+/g," ");e.append(decodeURIComponent(r),decodeURIComponent(n))}})),e}function P(t,e){if(!(this instanceof P))throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');e||(e={}),this.type="default",this.status=void 0===e.status?200:e.status,this.ok=this.status>=200&&this.status<300,this.statusText=void 0===e.statusText?"":""+e.statusText,this.headers=new g(e.headers),this.url=e.url||"",this._initBody(t)}C.prototype.clone=function(){return new C(this,{body:this._bodyInit})},b.call(C.prototype),b.call(P.prototype),P.prototype.clone=function(){return new P(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new g(this.headers),url:this.url})},P.error=function(){var t=new P(null,{status:0,statusText:""});return t.type="error",t};var M=[301,302,303,307,308];P.redirect=function(t,e){if(-1===M.indexOf(e))throw new RangeError("Invalid status code");return new P(null,{status:e,headers:{location:t}})};var x=r.DOMException;try{new x}catch(t){(x=function(t,e){this.message=t,this.name=e;var i=Error(t);this.stack=i.stack}).prototype=Object.create(Error.prototype),x.prototype.constructor=x}function w(t,e){return new Promise((function(i,n){var o=new C(t,e);if(o.signal&&o.signal.aborted)return n(new x("Aborted","AbortError"));var s=new XMLHttpRequest;function l(){s.abort()}s.onload=function(){var t,e,r={status:s.status,statusText:s.statusText,headers:(t=s.getAllResponseHeaders()||"",e=new g,t.replace(/\r?\n[\t ]+/g," ").split("\r").map((function(t){return 0===t.indexOf("\n")?t.substr(1,t.length):t})).forEach((function(t){var i=t.split(":"),r=i.shift().trim();if(r){var n=i.join(":").trim();e.append(r,n)}})),e)};r.url="responseURL"in s?s.responseURL:r.headers.get("X-Request-URL");var n="response"in s?s.response:s.responseText;setTimeout((function(){i(new P(n,r))}),0)},s.onerror=function(){setTimeout((function(){n(new TypeError("Network request failed"))}),0)},s.ontimeout=function(){setTimeout((function(){n(new TypeError("Network request failed"))}),0)},s.onabort=function(){setTimeout((function(){n(new x("Aborted","AbortError"))}),0)},s.open(o.method,function(t){try{return""===t&&r.location.href?r.location.href:t}catch(e){return t}}(o.url),!0),"include"===o.credentials?s.withCredentials=!0:"omit"===o.credentials&&(s.withCredentials=!1),"responseType"in s&&(a?s.responseType="blob":u&&o.headers.get("Content-Type")&&-1!==o.headers.get("Content-Type").indexOf("application/octet-stream")&&(s.responseType="arraybuffer")),!e||"object"!=typeof e.headers||e.headers instanceof g?o.headers.forEach((function(t,e){s.setRequestHeader(e,t)})):Object.getOwnPropertyNames(e.headers).forEach((function(t){s.setRequestHeader(t,p(e.headers[t]))})),o.signal&&(o.signal.addEventListener("abort",l),s.onreadystatechange=function(){4===s.readyState&&o.signal.removeEventListener("abort",l)}),s.send(void 0===o._bodyInit?null:o._bodyInit)}))}w.polyfill=!0,r.fetch||(r.fetch=w,r.Headers=g,r.Request=C,r.Response=P)}},e={};function i(r){var n=e[r];if(void 0!==n)return n.exports;var o=e[r]={exports:{}};return t[r].call(o.exports,o,o.exports,i),o.exports}i.d=function(t,e){for(var r in e)i.o(e,r)&&!i.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i(8519)}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,